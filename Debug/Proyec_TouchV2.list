
Proyec_TouchV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000616c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800633c  0800633c  0000733c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  080067a0  080067a0  000077a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08006948  08006948  00007948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08006960  08006960  00008070  2**0
                  CONTENTS
  6 .ARM          00000008  08006960  08006960  00007960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08006968  08006968  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000010  08006968  08006968  00007968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  08006978  08006978  00007978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000070  20000000  0800697c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00013d88  20000070  080069ec  00008070  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20013df8  080069ec  00008df8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c71d  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000050dc  00000000  00000000  000247bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001378  00000000  00000000  000298a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e5e  00000000  00000000  0002ac18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000287cc  00000000  00000000  0002ba76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018a60  00000000  00000000  00054242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f93a3  00000000  00000000  0006cca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c2  00000000  00000000  00166045  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005928  00000000  00000000  00166108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007c  00000000  00000000  0016ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006324 	.word	0x08006324

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006324 	.word	0x08006324

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a4:	f3bf 8f4f 	dsb	sy
}
 80005a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005aa:	f3bf 8f6f 	isb	sy
}
 80005ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b0:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <SCB_EnableICache+0x48>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <SCB_EnableICache+0x48>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <SCB_EnableICache+0x48>)
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d0:	f3bf 8f4f 	dsb	sy
}
 80005d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d6:	f3bf 8f6f 	isb	sy
}
 80005da:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <SCB_EnableDCache+0x84>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <SCB_EnableDCache+0x84>)
 8000602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000606:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0b5b      	lsrs	r3, r3, #13
 800060c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000610:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	08db      	lsrs	r3, r3, #3
 8000616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800061a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	015a      	lsls	r2, r3, #5
 8000620:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000624:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800062a:	4911      	ldr	r1, [pc, #68]	@ (8000670 <SCB_EnableDCache+0x84>)
 800062c:	4313      	orrs	r3, r2
 800062e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	60ba      	str	r2, [r7, #8]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1ef      	bne.n	800061c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	60fa      	str	r2, [r7, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1e5      	bne.n	8000612 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000646:	f3bf 8f4f 	dsb	sy
}
 800064a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <SCB_EnableDCache+0x84>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a07      	ldr	r2, [pc, #28]	@ (8000670 <SCB_EnableDCache+0x84>)
 8000652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000656:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000658:	f3bf 8f4f 	dsb	sy
}
 800065c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065e:	f3bf 8f6f 	isb	sy
}
 8000662:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000678:	f000 fa70 	bl	8000b5c <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800067c:	f7ff ff90 	bl	80005a0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000680:	f7ff ffb4 	bl	80005ec <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fdc3 	bl	800120e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f81c 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f95a 	bl	8000944 <MX_GPIO_Init>
  MX_CRC_Init();
 8000690:	f000 f886 	bl	80007a0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000694:	f000 f8a6 	bl	80007e4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000698:	f000 f8d6 	bl	8000848 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuffer, LTDC_LAYER_1);
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <main+0x44>)
 800069e:	2200      	movs	r2, #0
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	@ (80006bc <main+0x48>)
 80006a4:	f001 fdae 	bl	8002204 <HAL_LTDC_SetAddress>
  LTDC->IER |= LTDC_IER_LIE; // Enable LTDC interrupts
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <main+0x4c>)
 80006aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ac:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <main+0x4c>)
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <main+0x40>
 80006b8:	20000198 	.word	0x20000198
 80006bc:	200000f0 	.word	0x200000f0
 80006c0:	40016800 	.word	0x40016800

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	@ 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 f81b 	bl	800570e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <SystemClock_Config+0xd4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000798 <SystemClock_Config+0xd4>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <SystemClock_Config+0xd4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	4b26      	ldr	r3, [pc, #152]	@ (800079c <SystemClock_Config+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a25      	ldr	r2, [pc, #148]	@ (800079c <SystemClock_Config+0xd8>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <SystemClock_Config+0xd8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800072c:	2319      	movs	r3, #25
 800072e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000730:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	4618      	mov	r0, r3
 8000744:	f001 ffb6 	bl	80026b4 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800074e:	f000 fa43 	bl	8000bd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000752:	f001 ff5f 	bl	8002614 <HAL_PWREx_EnableOverDrive>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800075c:	f000 fa3c 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2107      	movs	r1, #7
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fa3c 	bl	8002bfc <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800078a:	f000 fa25 	bl	8000bd8 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <MX_CRC_Init+0x3c>)
 80007a6:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <MX_CRC_Init+0x40>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_CRC_Init+0x3c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <MX_CRC_Init+0x3c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_CRC_Init+0x3c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_CRC_Init+0x3c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_CRC_Init+0x3c>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_CRC_Init+0x3c>)
 80007ca:	f000 fea7 	bl	800151c <HAL_CRC_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007d4:	f000 fa00 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	40023000 	.word	0x40023000

080007e4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007e8:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_DMA2D_Init+0x5c>)
 80007ea:	4a16      	ldr	r2, [pc, #88]	@ (8000844 <MX_DMA2D_Init+0x60>)
 80007ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_DMA2D_Init+0x5c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_DMA2D_Init+0x5c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_DMA2D_Init+0x5c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_DMA2D_Init+0x5c>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_DMA2D_Init+0x5c>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_DMA2D_Init+0x5c>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_DMA2D_Init+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000818:	4809      	ldr	r0, [pc, #36]	@ (8000840 <MX_DMA2D_Init+0x5c>)
 800081a:	f000 ff71 	bl	8001700 <HAL_DMA2D_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000824:	f000 f9d8 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000828:	2101      	movs	r1, #1
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_DMA2D_Init+0x5c>)
 800082c:	f001 f8c2 	bl	80019b4 <HAL_DMA2D_ConfigLayer>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000836:	f000 f9cf 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000b0 	.word	0x200000b0
 8000844:	4002b000 	.word	0x4002b000

08000848 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	@ 0x38
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2234      	movs	r2, #52	@ 0x34
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f004 ff5a 	bl	800570e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800085a:	4b38      	ldr	r3, [pc, #224]	@ (800093c <MX_LTDC_Init+0xf4>)
 800085c:	4a38      	ldr	r2, [pc, #224]	@ (8000940 <MX_LTDC_Init+0xf8>)
 800085e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000860:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_LTDC_Init+0xf4>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000866:	4b35      	ldr	r3, [pc, #212]	@ (800093c <MX_LTDC_Init+0xf4>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800086c:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_LTDC_Init+0xf4>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000872:	4b32      	ldr	r3, [pc, #200]	@ (800093c <MX_LTDC_Init+0xf4>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000878:	4b30      	ldr	r3, [pc, #192]	@ (800093c <MX_LTDC_Init+0xf4>)
 800087a:	2228      	movs	r2, #40	@ 0x28
 800087c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800087e:	4b2f      	ldr	r3, [pc, #188]	@ (800093c <MX_LTDC_Init+0xf4>)
 8000880:	2209      	movs	r2, #9
 8000882:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000884:	4b2d      	ldr	r3, [pc, #180]	@ (800093c <MX_LTDC_Init+0xf4>)
 8000886:	2235      	movs	r2, #53	@ 0x35
 8000888:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800088a:	4b2c      	ldr	r3, [pc, #176]	@ (800093c <MX_LTDC_Init+0xf4>)
 800088c:	220b      	movs	r2, #11
 800088e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 453;
 8000890:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <MX_LTDC_Init+0xf4>)
 8000892:	f240 12c5 	movw	r2, #453	@ 0x1c5
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 111;
 8000898:	4b28      	ldr	r3, [pc, #160]	@ (800093c <MX_LTDC_Init+0xf4>)
 800089a:	226f      	movs	r2, #111	@ 0x6f
 800089c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 485;
 800089e:	4b27      	ldr	r3, [pc, #156]	@ (800093c <MX_LTDC_Init+0xf4>)
 80008a0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80008a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 113;
 80008a6:	4b25      	ldr	r3, [pc, #148]	@ (800093c <MX_LTDC_Init+0xf4>)
 80008a8:	2271      	movs	r2, #113	@ 0x71
 80008aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008ac:	4b23      	ldr	r3, [pc, #140]	@ (800093c <MX_LTDC_Init+0xf4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008b4:	4b21      	ldr	r3, [pc, #132]	@ (800093c <MX_LTDC_Init+0xf4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <MX_LTDC_Init+0xf4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008c4:	481d      	ldr	r0, [pc, #116]	@ (800093c <MX_LTDC_Init+0xf4>)
 80008c6:	f001 facd 	bl	8001e64 <HAL_LTDC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 80008d0:	f000 f982 	bl	8000bd8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 400;
 80008d8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80008dc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 100;
 80008e2:	2364      	movs	r3, #100	@ 0x64
 80008e4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008e6:	2302      	movs	r3, #2
 80008e8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008ea:	23ff      	movs	r3, #255	@ 0xff
 80008ec:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008f8:	2305      	movs	r3, #5
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80008fc:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 400;
 8000902:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 100;
 8000908:	2364      	movs	r3, #100	@ 0x64
 800090a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0x00;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0x00;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0xFF;
 8000918:	23ff      	movs	r3, #255	@ 0xff
 800091a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_LTDC_Init+0xf4>)
 8000926:	f001 fc2f 	bl	8002188 <HAL_LTDC_ConfigLayer>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000930:	f000 f952 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3738      	adds	r7, #56	@ 0x38
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000f0 	.word	0x200000f0
 8000940:	40016800 	.word	0x40016800

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08e      	sub	sp, #56	@ 0x38
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b79      	ldr	r3, [pc, #484]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a78      	ldr	r2, [pc, #480]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b76      	ldr	r3, [pc, #472]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	623b      	str	r3, [r7, #32]
 8000970:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b73      	ldr	r3, [pc, #460]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a72      	ldr	r2, [pc, #456]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b70      	ldr	r3, [pc, #448]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800098a:	4b6d      	ldr	r3, [pc, #436]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a6c      	ldr	r2, [pc, #432]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000990:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b6a      	ldr	r3, [pc, #424]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	4b67      	ldr	r3, [pc, #412]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a66      	ldr	r2, [pc, #408]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b64      	ldr	r3, [pc, #400]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009ba:	4b61      	ldr	r3, [pc, #388]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a60      	ldr	r2, [pc, #384]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b5e      	ldr	r3, [pc, #376]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009d2:	4b5b      	ldr	r3, [pc, #364]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a5a      	ldr	r2, [pc, #360]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b58      	ldr	r3, [pc, #352]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	4b55      	ldr	r3, [pc, #340]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a54      	ldr	r2, [pc, #336]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b52      	ldr	r3, [pc, #328]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b4f      	ldr	r3, [pc, #316]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a4e      	ldr	r2, [pc, #312]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b49      	ldr	r3, [pc, #292]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a48      	ldr	r2, [pc, #288]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b46      	ldr	r3, [pc, #280]	@ (8000b40 <MX_GPIO_Init+0x1fc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2110      	movs	r1, #16
 8000a36:	4843      	ldr	r0, [pc, #268]	@ (8000b44 <MX_GPIO_Init+0x200>)
 8000a38:	f001 f9fa 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2108      	movs	r1, #8
 8000a40:	4841      	ldr	r0, [pc, #260]	@ (8000b48 <MX_GPIO_Init+0x204>)
 8000a42:	f001 f9f5 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a4c:	483f      	ldr	r0, [pc, #252]	@ (8000b4c <MX_GPIO_Init+0x208>)
 8000a4e:	f001 f9ef 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	21c0      	movs	r1, #192	@ 0xc0
 8000a56:	483e      	ldr	r0, [pc, #248]	@ (8000b50 <MX_GPIO_Init+0x20c>)
 8000a58:	f001 f9ea 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2140      	movs	r1, #64	@ 0x40
 8000a60:	483c      	ldr	r0, [pc, #240]	@ (8000b54 <MX_GPIO_Init+0x210>)
 8000a62:	f001 f9e5 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VSYNC_FREQ_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
 8000a66:	2310      	movs	r3, #16
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4831      	ldr	r0, [pc, #196]	@ (8000b44 <MX_GPIO_Init+0x200>)
 8000a7e:	f001 f82b 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a82:	2308      	movs	r3, #8
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	482b      	ldr	r0, [pc, #172]	@ (8000b48 <MX_GPIO_Init+0x204>)
 8000a9a:	f001 f81d 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4825      	ldr	r0, [pc, #148]	@ (8000b4c <MX_GPIO_Init+0x208>)
 8000ab8:	f001 f80e 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FRAME_RATE_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 8000abc:	23c0      	movs	r3, #192	@ 0xc0
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481f      	ldr	r0, [pc, #124]	@ (8000b50 <MX_GPIO_Init+0x20c>)
 8000ad4:	f001 f800 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8000ad8:	2340      	movs	r3, #64	@ 0x40
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	4819      	ldr	r0, [pc, #100]	@ (8000b54 <MX_GPIO_Init+0x210>)
 8000af0:	f000 fff2 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000af4:	2308      	movs	r3, #8
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b04:	230c      	movs	r3, #12
 8000b06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4810      	ldr	r0, [pc, #64]	@ (8000b50 <MX_GPIO_Init+0x20c>)
 8000b10:	f000 ffe2 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8000b14:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b26:	2309      	movs	r3, #9
 8000b28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <MX_GPIO_Init+0x214>)
 8000b32:	f000 ffd1 	bl	8001ad8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b36:	bf00      	nop
 8000b38:	3738      	adds	r7, #56	@ 0x38
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40022800 	.word	0x40022800
 8000b4c:	40022000 	.word	0x40022000
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40021800 	.word	0x40021800
 8000b58:	40020c00 	.word	0x40020c00

08000b5c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b6e:	f000 fc5d 	bl	800142c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b72:	2301      	movs	r3, #1
 8000b74:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b7e:	231f      	movs	r3, #31
 8000b80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b82:	2387      	movs	r3, #135	@ 0x87
 8000b84:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b92:	2301      	movs	r3, #1
 8000b94:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fc7b 	bl	800149c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ba6:	2004      	movs	r0, #4
 8000ba8:	f000 fc58 	bl	800145c <HAL_MPU_Enable>

}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc6:	f000 fb2f 	bl	8001228 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40001000 	.word	0x40001000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <Error_Handler+0x8>

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <HAL_CRC_MspInit+0x38>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d10b      	bne.n	8000c56 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_CRC_MspInit+0x3c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <HAL_CRC_MspInit+0x3c>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <HAL_CRC_MspInit+0x3c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023000 	.word	0x40023000
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <HAL_DMA2D_MspInit+0x44>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d113      	bne.n	8000ca6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <HAL_DMA2D_MspInit+0x48>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb4 <HAL_DMA2D_MspInit+0x48>)
 8000c84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <HAL_DMA2D_MspInit+0x48>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	205a      	movs	r0, #90	@ 0x5a
 8000c9c:	f000 fb9c 	bl	80013d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ca0:	205a      	movs	r0, #90	@ 0x5a
 8000ca2:	f000 fbb5 	bl	8001410 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	4002b000 	.word	0x4002b000
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0ae      	sub	sp, #184	@ 0xb8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	2284      	movs	r2, #132	@ 0x84
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 fd18 	bl	800570e <memset>
  if(hltdc->Instance==LTDC)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8000e5c <HAL_LTDC_MspInit+0x1a4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	f040 80b4 	bne.w	8000e52 <HAL_LTDC_MspInit+0x19a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000cea:	2308      	movs	r3, #8
 8000cec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000cee:	23c0      	movs	r3, #192	@ 0xc0
 8000cf0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000d02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 f979 	bl	8003004 <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8000d18:	f7ff ff5e 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d1c:	4b50      	ldr	r3, [pc, #320]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d20:	4a4f      	ldr	r2, [pc, #316]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d26:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d28:	4b4d      	ldr	r3, [pc, #308]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d34:	4b4a      	ldr	r3, [pc, #296]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	4a49      	ldr	r2, [pc, #292]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d40:	4b47      	ldr	r3, [pc, #284]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4c:	4b44      	ldr	r3, [pc, #272]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d50:	4a43      	ldr	r2, [pc, #268]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d58:	4b41      	ldr	r3, [pc, #260]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d64:	4b3e      	ldr	r3, [pc, #248]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d68:	4a3d      	ldr	r2, [pc, #244]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d70:	4b3b      	ldr	r3, [pc, #236]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d7c:	4b38      	ldr	r3, [pc, #224]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d80:	4a37      	ldr	r2, [pc, #220]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d88:	4b35      	ldr	r3, [pc, #212]	@ (8000e60 <HAL_LTDC_MspInit+0x1a8>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000d94:	23f7      	movs	r3, #247	@ 0xf7
 8000d96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dac:	230e      	movs	r3, #14
 8000dae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000db2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000db6:	4619      	mov	r1, r3
 8000db8:	482a      	ldr	r0, [pc, #168]	@ (8000e64 <HAL_LTDC_MspInit+0x1ac>)
 8000dba:	f000 fe8d 	bl	8001ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000dd8:	2309      	movs	r3, #9
 8000dda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dde:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4820      	ldr	r0, [pc, #128]	@ (8000e68 <HAL_LTDC_MspInit+0x1b0>)
 8000de6:	f000 fe77 	bl	8001ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_8
 8000dea:	f64c 73ff 	movw	r3, #53247	@ 0xcfff
 8000dee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_6
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2
                          |GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e04:	230e      	movs	r3, #14
 8000e06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e0a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4816      	ldr	r0, [pc, #88]	@ (8000e6c <HAL_LTDC_MspInit+0x1b4>)
 8000e12:	f000 fe61 	bl	8001ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8000e16:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e30:	230e      	movs	r3, #14
 8000e32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <HAL_LTDC_MspInit+0x1b8>)
 8000e3e:	f000 fe4b 	bl	8001ad8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2058      	movs	r0, #88	@ 0x58
 8000e48:	f000 fac6 	bl	80013d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000e4c:	2058      	movs	r0, #88	@ 0x58
 8000e4e:	f000 fadf 	bl	8001410 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000e52:	bf00      	nop
 8000e54:	37b8      	adds	r7, #184	@ 0xb8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40016800 	.word	0x40016800
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40022800 	.word	0x40022800
 8000e68:	40021800 	.word	0x40021800
 8000e6c:	40022400 	.word	0x40022400
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	@ 0x38
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e84:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <HAL_InitTick+0xe0>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	4a32      	ldr	r2, [pc, #200]	@ (8000f54 <HAL_InitTick+0xe0>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e90:	4b30      	ldr	r3, [pc, #192]	@ (8000f54 <HAL_InitTick+0xe0>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e9c:	f107 0210 	add.w	r2, r7, #16
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 f87a 	bl	8002fa0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d103      	bne.n	8000ebe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eb6:	f002 f85f 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 8000eba:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ebc:	e004      	b.n	8000ec8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ebe:	f002 f85b 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eca:	4a23      	ldr	r2, [pc, #140]	@ (8000f58 <HAL_InitTick+0xe4>)
 8000ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed0:	0c9b      	lsrs	r3, r3, #18
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000ed8:	4a21      	ldr	r2, [pc, #132]	@ (8000f60 <HAL_InitTick+0xec>)
 8000eda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000ede:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ee2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ee8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000efc:	4817      	ldr	r0, [pc, #92]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000efe:	f002 fc71 	bl	80037e4 <HAL_TIM_Base_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d11b      	bne.n	8000f48 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f10:	4812      	ldr	r0, [pc, #72]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000f12:	f002 fcc9 	bl	80038a8 <HAL_TIM_Base_Start_IT>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d111      	bne.n	8000f48 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f24:	2036      	movs	r0, #54	@ 0x36
 8000f26:	f000 fa73 	bl	8001410 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d808      	bhi.n	8000f42 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	2036      	movs	r0, #54	@ 0x36
 8000f36:	f000 fa4f 	bl	80013d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <HAL_InitTick+0xf0>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	e002      	b.n	8000f48 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3738      	adds	r7, #56	@ 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	20013a18 	.word	0x20013a18
 8000f60:	40001000 	.word	0x40001000
 8000f64:	20000004 	.word	0x20000004

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <NMI_Handler+0x4>

08000f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <MemManage_Handler+0x4>

08000f80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <TIM6_DAC_IRQHandler+0x10>)
 8000fce:	f002 fce3 	bl	8003998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20013a18 	.word	0x20013a18

08000fdc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000fe0:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <LTDC_IRQHandler+0x18>)
 8000fe2:	f001 f80f 	bl	8002004 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */
  HAL_LTDC_ProgramLineEvent(&hltdc,0);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <LTDC_IRQHandler+0x18>)
 8000fea:	f001 f941 	bl	8002270 <HAL_LTDC_ProgramLineEvent>
  /* USER CODE END LTDC_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000f0 	.word	0x200000f0

08000ff8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <DMA2D_IRQHandler+0x10>)
 8000ffe:	f000 fbc9 	bl	8001794 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000b0 	.word	0x200000b0

0800100c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return 1;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_kill>:

int _kill(int pid, int sig)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001026:	f004 fc15 	bl	8005854 <__errno>
 800102a:	4603      	mov	r3, r0
 800102c:	2216      	movs	r2, #22
 800102e:	601a      	str	r2, [r3, #0]
  return -1;
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_exit>:

void _exit (int status)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ffe7 	bl	800101c <_kill>
  while (1) {}    /* Make sure we hang here */
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <_exit+0x12>

08001052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e00a      	b.n	800107a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001064:	f3af 8000 	nop.w
 8001068:	4601      	mov	r1, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	60ba      	str	r2, [r7, #8]
 8001070:	b2ca      	uxtb	r2, r1
 8001072:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbf0      	blt.n	8001064 <_read+0x12>
  }

  return len;
 8001082:	687b      	ldr	r3, [r7, #4]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e009      	b.n	80010b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	60ba      	str	r2, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbf1      	blt.n	800109e <_write+0x12>
  }
  return len;
 80010ba:	687b      	ldr	r3, [r7, #4]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_close>:

int _close(int file)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ec:	605a      	str	r2, [r3, #4]
  return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_isatty>:

int _isatty(int file)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	@ (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f004 fb7a 	bl	8005854 <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20050000 	.word	0x20050000
 800118c:	00000400 	.word	0x00000400
 8001190:	20013a64 	.word	0x20013a64
 8001194:	20013df8 	.word	0x20013df8

08001198 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011c0:	f7ff ffea 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001208 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f004 fb39 	bl	8005860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fa41 	bl	8000674 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001200:	0800697c 	.word	0x0800697c
  ldr r2, =_sbss
 8001204:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001208:	20013df8 	.word	0x20013df8

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>

0800120e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001212:	2003      	movs	r0, #3
 8001214:	f000 f8d5 	bl	80013c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001218:	200f      	movs	r0, #15
 800121a:	f7ff fe2b 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121e:	f7ff fce1 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	20013a68 	.word	0x20013a68

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20013a68 	.word	0x20013a68

08001268 <__NVIC_SetPriorityGrouping>:
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x40>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	4313      	orrs	r3, r2
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00
 80012ac:	05fa0000 	.word	0x05fa0000

080012b0 <__NVIC_GetPriorityGrouping>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	@ (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	@ (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	@ 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff4c 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ea:	f7ff ff61 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 80013ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	6978      	ldr	r0, [r7, #20]
 80013f6:	f7ff ffb1 	bl	800135c <NVIC_EncodePriority>
 80013fa:	4602      	mov	r2, r0
 80013fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff80 	bl	8001308 <__NVIC_SetPriority>
}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff54 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001430:	f3bf 8f5f 	dmb	sy
}
 8001434:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001436:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <HAL_MPU_Disable+0x28>)
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_MPU_Disable+0x28>)
 800143c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001440:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_MPU_Disable+0x2c>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00
 8001458:	e000ed90 	.word	0xe000ed90

0800145c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001464:	4a0b      	ldr	r2, [pc, #44]	@ (8001494 <HAL_MPU_Enable+0x38>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_MPU_Enable+0x3c>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <HAL_MPU_Enable+0x3c>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001478:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed90 	.word	0xe000ed90
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	785a      	ldrb	r2, [r3, #1]
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_MPU_ConfigRegion+0x7c>)
 80014aa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <HAL_MPU_ConfigRegion+0x7c>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	4a19      	ldr	r2, [pc, #100]	@ (8001518 <HAL_MPU_ConfigRegion+0x7c>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014b8:	4a17      	ldr	r2, [pc, #92]	@ (8001518 <HAL_MPU_ConfigRegion+0x7c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7b1b      	ldrb	r3, [r3, #12]
 80014c4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7adb      	ldrb	r3, [r3, #11]
 80014ca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7a9b      	ldrb	r3, [r3, #10]
 80014d2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7b5b      	ldrb	r3, [r3, #13]
 80014da:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7b9b      	ldrb	r3, [r3, #14]
 80014e2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7bdb      	ldrb	r3, [r3, #15]
 80014ea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7a5b      	ldrb	r3, [r3, #9]
 80014f2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7a1b      	ldrb	r3, [r3, #8]
 80014fa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014fc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	7812      	ldrb	r2, [r2, #0]
 8001502:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001506:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001508:	6113      	str	r3, [r2, #16]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed90 	.word	0xe000ed90

0800151c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e054      	b.n	80015d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7f5b      	ldrb	r3, [r3, #29]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fb74 	bl	8000c2c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	791b      	ldrb	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a22      	ldr	r2, [pc, #136]	@ (80015e0 <HAL_CRC_Init+0xc4>)
 8001558:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0218 	bic.w	r2, r2, #24
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	e00c      	b.n	8001586 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6899      	ldr	r1, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	461a      	mov	r2, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f834 	bl	80015e4 <HAL_CRCEx_Polynomial_Set>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e028      	b.n	80015d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	795b      	ldrb	r3, [r3, #5]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d105      	bne.n	800159a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	611a      	str	r2, [r3, #16]
 8001598:	e004      	b.n	80015a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6912      	ldr	r2, [r2, #16]
 80015a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699a      	ldr	r2, [r3, #24]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	04c11db7 	.word	0x04c11db7

080015e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80015f4:	231f      	movs	r3, #31
 80015f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	75fb      	strb	r3, [r7, #23]
 8001606:	e063      	b.n	80016d0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001608:	bf00      	nop
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	613a      	str	r2, [r7, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d009      	beq.n	8001628 <HAL_CRCEx_Polynomial_Set+0x44>
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b18      	cmp	r3, #24
 800162c:	d846      	bhi.n	80016bc <HAL_CRCEx_Polynomial_Set+0xd8>
 800162e:	a201      	add	r2, pc, #4	@ (adr r2, 8001634 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	080016c3 	.word	0x080016c3
 8001638:	080016bd 	.word	0x080016bd
 800163c:	080016bd 	.word	0x080016bd
 8001640:	080016bd 	.word	0x080016bd
 8001644:	080016bd 	.word	0x080016bd
 8001648:	080016bd 	.word	0x080016bd
 800164c:	080016bd 	.word	0x080016bd
 8001650:	080016bd 	.word	0x080016bd
 8001654:	080016b1 	.word	0x080016b1
 8001658:	080016bd 	.word	0x080016bd
 800165c:	080016bd 	.word	0x080016bd
 8001660:	080016bd 	.word	0x080016bd
 8001664:	080016bd 	.word	0x080016bd
 8001668:	080016bd 	.word	0x080016bd
 800166c:	080016bd 	.word	0x080016bd
 8001670:	080016bd 	.word	0x080016bd
 8001674:	080016a5 	.word	0x080016a5
 8001678:	080016bd 	.word	0x080016bd
 800167c:	080016bd 	.word	0x080016bd
 8001680:	080016bd 	.word	0x080016bd
 8001684:	080016bd 	.word	0x080016bd
 8001688:	080016bd 	.word	0x080016bd
 800168c:	080016bd 	.word	0x080016bd
 8001690:	080016bd 	.word	0x080016bd
 8001694:	08001699 	.word	0x08001699
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2b06      	cmp	r3, #6
 800169c:	d913      	bls.n	80016c6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80016a2:	e010      	b.n	80016c6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2b07      	cmp	r3, #7
 80016a8:	d90f      	bls.n	80016ca <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80016ae:	e00c      	b.n	80016ca <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	d90b      	bls.n	80016ce <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80016ba:	e008      	b.n	80016ce <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	75fb      	strb	r3, [r7, #23]
        break;
 80016c0:	e006      	b.n	80016d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016c2:	bf00      	nop
 80016c4:	e004      	b.n	80016d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016c6:	bf00      	nop
 80016c8:	e002      	b.n	80016d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016ca:	bf00      	nop
 80016cc:	e000      	b.n	80016d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016ce:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80016d0:	7dfb      	ldrb	r3, [r7, #23]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 0118 	bic.w	r1, r3, #24
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e039      	b.n	8001786 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d106      	bne.n	800172c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff faa0 	bl	8000c6c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001750:	f023 0107 	bic.w	r1, r3, #7
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_DMA2D_Init+0x90>)
 8001768:	4013      	ands	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68d1      	ldr	r1, [r2, #12]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	430b      	orrs	r3, r1
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	ffffc000 	.word	0xffffc000

08001794 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d026      	beq.n	8001804 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d021      	beq.n	8001804 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017ce:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b00      	cmp	r3, #0
 800180c:	d026      	beq.n	800185c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d021      	beq.n	800185c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001826:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2220      	movs	r2, #32
 800182e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001834:	f043 0202 	orr.w	r2, r3, #2
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2204      	movs	r2, #4
 8001840:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d026      	beq.n	80018b4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800186c:	2b00      	cmp	r3, #0
 800186e:	d021      	beq.n	80018b4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800187e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2208      	movs	r2, #8
 8001886:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188c:	f043 0204 	orr.w	r2, r3, #4
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2204      	movs	r2, #4
 8001898:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d013      	beq.n	80018e6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00e      	beq.n	80018e6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018d6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2204      	movs	r2, #4
 80018de:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f853 	bl	800198c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d024      	beq.n	800193a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01f      	beq.n	800193a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001908:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2202      	movs	r2, #2
 8001910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01f      	beq.n	8001984 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d01a      	beq.n	8001984 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800195c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2210      	movs	r2, #16
 8001964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f80e 	bl	80019a0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_DMA2D_ConfigLayer+0x20>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e079      	b.n	8001ac8 <HAL_DMA2D_ConfigLayer+0x114>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	3318      	adds	r3, #24
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	4313      	orrs	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80019fe:	4b35      	ldr	r3, [pc, #212]	@ (8001ad4 <HAL_DMA2D_ConfigLayer+0x120>)
 8001a00:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b0a      	cmp	r3, #10
 8001a08:	d003      	beq.n	8001a12 <HAL_DMA2D_ConfigLayer+0x5e>
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b09      	cmp	r3, #9
 8001a10:	d107      	bne.n	8001a22 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e005      	b.n	8001a2e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	061b      	lsls	r3, r3, #24
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d120      	bne.n	8001a76 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	ea02 0103 	and.w	r1, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d003      	beq.n	8001a66 <HAL_DMA2D_ConfigLayer+0xb2>
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b09      	cmp	r3, #9
 8001a64:	d127      	bne.n	8001ab6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001a72:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a74:	e01f      	b.n	8001ab6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69da      	ldr	r2, [r3, #28]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	ea02 0103 	and.w	r1, r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b0a      	cmp	r3, #10
 8001a9e:	d003      	beq.n	8001aa8 <HAL_DMA2D_ConfigLayer+0xf4>
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	d106      	bne.n	8001ab6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001ab4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	ff03000f 	.word	0xff03000f

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	@ 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	e175      	b.n	8001de4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	f040 8164 	bne.w	8001dde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d005      	beq.n	8001b2e <HAL_GPIO_Init+0x56>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d130      	bne.n	8001b90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 0201 	and.w	r2, r3, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d017      	beq.n	8001bcc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d123      	bne.n	8001c20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	69b9      	ldr	r1, [r7, #24]
 8001c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80be 	beq.w	8001dde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	4b66      	ldr	r3, [pc, #408]	@ (8001dfc <HAL_GPIO_Init+0x324>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a65      	ldr	r2, [pc, #404]	@ (8001dfc <HAL_GPIO_Init+0x324>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b63      	ldr	r3, [pc, #396]	@ (8001dfc <HAL_GPIO_Init+0x324>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c7a:	4a61      	ldr	r2, [pc, #388]	@ (8001e00 <HAL_GPIO_Init+0x328>)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	@ (8001e04 <HAL_GPIO_Init+0x32c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d037      	beq.n	8001d16 <HAL_GPIO_Init+0x23e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a57      	ldr	r2, [pc, #348]	@ (8001e08 <HAL_GPIO_Init+0x330>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d031      	beq.n	8001d12 <HAL_GPIO_Init+0x23a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a56      	ldr	r2, [pc, #344]	@ (8001e0c <HAL_GPIO_Init+0x334>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d02b      	beq.n	8001d0e <HAL_GPIO_Init+0x236>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a55      	ldr	r2, [pc, #340]	@ (8001e10 <HAL_GPIO_Init+0x338>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d025      	beq.n	8001d0a <HAL_GPIO_Init+0x232>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a54      	ldr	r2, [pc, #336]	@ (8001e14 <HAL_GPIO_Init+0x33c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01f      	beq.n	8001d06 <HAL_GPIO_Init+0x22e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a53      	ldr	r2, [pc, #332]	@ (8001e18 <HAL_GPIO_Init+0x340>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d019      	beq.n	8001d02 <HAL_GPIO_Init+0x22a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <HAL_GPIO_Init+0x344>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <HAL_GPIO_Init+0x226>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a51      	ldr	r2, [pc, #324]	@ (8001e20 <HAL_GPIO_Init+0x348>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00d      	beq.n	8001cfa <HAL_GPIO_Init+0x222>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a50      	ldr	r2, [pc, #320]	@ (8001e24 <HAL_GPIO_Init+0x34c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <HAL_GPIO_Init+0x21e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4f      	ldr	r2, [pc, #316]	@ (8001e28 <HAL_GPIO_Init+0x350>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_GPIO_Init+0x21a>
 8001cee:	2309      	movs	r3, #9
 8001cf0:	e012      	b.n	8001d18 <HAL_GPIO_Init+0x240>
 8001cf2:	230a      	movs	r3, #10
 8001cf4:	e010      	b.n	8001d18 <HAL_GPIO_Init+0x240>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	e00e      	b.n	8001d18 <HAL_GPIO_Init+0x240>
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	e00c      	b.n	8001d18 <HAL_GPIO_Init+0x240>
 8001cfe:	2306      	movs	r3, #6
 8001d00:	e00a      	b.n	8001d18 <HAL_GPIO_Init+0x240>
 8001d02:	2305      	movs	r3, #5
 8001d04:	e008      	b.n	8001d18 <HAL_GPIO_Init+0x240>
 8001d06:	2304      	movs	r3, #4
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x240>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x240>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x240>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x240>
 8001d16:	2300      	movs	r3, #0
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d28:	4935      	ldr	r1, [pc, #212]	@ (8001e00 <HAL_GPIO_Init+0x328>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d36:	4b3d      	ldr	r3, [pc, #244]	@ (8001e2c <HAL_GPIO_Init+0x354>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5a:	4a34      	ldr	r2, [pc, #208]	@ (8001e2c <HAL_GPIO_Init+0x354>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d60:	4b32      	ldr	r3, [pc, #200]	@ (8001e2c <HAL_GPIO_Init+0x354>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d84:	4a29      	ldr	r2, [pc, #164]	@ (8001e2c <HAL_GPIO_Init+0x354>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d8a:	4b28      	ldr	r3, [pc, #160]	@ (8001e2c <HAL_GPIO_Init+0x354>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dae:	4a1f      	ldr	r2, [pc, #124]	@ (8001e2c <HAL_GPIO_Init+0x354>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e2c <HAL_GPIO_Init+0x354>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	@ (8001e2c <HAL_GPIO_Init+0x354>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f67f ae86 	bls.w	8001af8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3724      	adds	r7, #36	@ 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40013800 	.word	0x40013800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40020c00 	.word	0x40020c00
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40021400 	.word	0x40021400
 8001e1c:	40021800 	.word	0x40021800
 8001e20:	40021c00 	.word	0x40021c00
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40022400 	.word	0x40022400
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e4c:	e003      	b.n	8001e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	041a      	lsls	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0bf      	b.n	8001ff6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe ff14 	bl	8000cb8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8001ea6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6999      	ldr	r1, [r3, #24]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001ebc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6899      	ldr	r1, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8002000 <HAL_LTDC_Init+0x19c>)
 8001ed8:	400b      	ands	r3, r1
 8001eda:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6899      	ldr	r1, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68d9      	ldr	r1, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b3e      	ldr	r3, [pc, #248]	@ (8002000 <HAL_LTDC_Init+0x19c>)
 8001f06:	400b      	ands	r3, r1
 8001f08:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68d9      	ldr	r1, [r3, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6919      	ldr	r1, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b33      	ldr	r3, [pc, #204]	@ (8002000 <HAL_LTDC_Init+0x19c>)
 8001f34:	400b      	ands	r3, r1
 8001f36:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6959      	ldr	r1, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b27      	ldr	r3, [pc, #156]	@ (8002000 <HAL_LTDC_Init+0x19c>)
 8001f62:	400b      	ands	r3, r1
 8001f64:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6a:	041b      	lsls	r3, r3, #16
 8001f6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6959      	ldr	r1, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001f94:	041b      	lsls	r3, r3, #16
 8001f96:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8001fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0206 	orr.w	r2, r2, #6
 8001fd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	f000f800 	.word	0xf000f800

08002004 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002012:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d023      	beq.n	800206e <HAL_LTDC_IRQHandler+0x6a>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01e      	beq.n	800206e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0204 	bic.w	r2, r2, #4
 800203e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2204      	movs	r2, #4
 8002046:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2204      	movs	r2, #4
 800205c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f86f 	bl	800214c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d023      	beq.n	80020c0 <HAL_LTDC_IRQHandler+0xbc>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01e      	beq.n	80020c0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0202 	bic.w	r2, r2, #2
 8002090:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2202      	movs	r2, #2
 8002098:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020a0:	f043 0202 	orr.w	r2, r3, #2
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2204      	movs	r2, #4
 80020ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f846 	bl	800214c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01b      	beq.n	8002102 <HAL_LTDC_IRQHandler+0xfe>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d016      	beq.n	8002102 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f82f 	bl	8002160 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01b      	beq.n	8002144 <HAL_LTDC_IRQHandler+0x140>
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0208 	bic.w	r2, r2, #8
 8002124:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2208      	movs	r2, #8
 800212c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f818 	bl	8002174 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_LTDC_ConfigLayer+0x1a>
 800219e:	2302      	movs	r3, #2
 80021a0:	e02c      	b.n	80021fc <HAL_LTDC_ConfigLayer+0x74>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2134      	movs	r1, #52	@ 0x34
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4614      	mov	r4, r2
 80021c6:	461d      	mov	r5, r3
 80021c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d4:	682b      	ldr	r3, [r5, #0]
 80021d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f87f 	bl	80022e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bdb0      	pop	{r4, r5, r7, pc}

08002204 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_LTDC_SetAddress+0x1a>
 800221a:	2302      	movs	r3, #2
 800221c:	e024      	b.n	8002268 <HAL_LTDC_SetAddress+0x64>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2234      	movs	r2, #52	@ 0x34
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	3338      	adds	r3, #56	@ 0x38
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6979      	ldr	r1, [r7, #20]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f849 	bl	80022e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_LTDC_ProgramLineEvent+0x18>
 8002284:	2302      	movs	r3, #2
 8002286:	e023      	b.n	80022d0 <HAL_LTDC_ProgramLineEvent+0x60>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80022a8:	4a0c      	ldr	r2, [pc, #48]	@ (80022dc <HAL_LTDC_ProgramLineEvent+0x6c>)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40016800 	.word	0x40016800

080022e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	@ 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	0c1b      	lsrs	r3, r3, #16
 80022f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fc:	4413      	add	r3, r2
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	01db      	lsls	r3, r3, #7
 800230c:	4413      	add	r3, r2
 800230e:	3384      	adds	r3, #132	@ 0x84
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	4611      	mov	r1, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	01d2      	lsls	r2, r2, #7
 800231c:	440a      	add	r2, r1
 800231e:	3284      	adds	r2, #132	@ 0x84
 8002320:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002324:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002336:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002338:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	01db      	lsls	r3, r3, #7
 8002344:	440b      	add	r3, r1
 8002346:	3384      	adds	r3, #132	@ 0x84
 8002348:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800234e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800235e:	4413      	add	r3, r2
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	01db      	lsls	r3, r3, #7
 800236e:	4413      	add	r3, r2
 8002370:	3384      	adds	r3, #132	@ 0x84
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	4611      	mov	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	01d2      	lsls	r2, r2, #7
 800237e:	440a      	add	r2, r1
 8002380:	3284      	adds	r2, #132	@ 0x84
 8002382:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002386:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002396:	4413      	add	r3, r2
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	01db      	lsls	r3, r3, #7
 80023a4:	440b      	add	r3, r1
 80023a6:	3384      	adds	r3, #132	@ 0x84
 80023a8:	4619      	mov	r1, r3
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	01db      	lsls	r3, r3, #7
 80023ba:	4413      	add	r3, r2
 80023bc:	3384      	adds	r3, #132	@ 0x84
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	4611      	mov	r1, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	01d2      	lsls	r2, r2, #7
 80023ca:	440a      	add	r2, r1
 80023cc:	3284      	adds	r2, #132	@ 0x84
 80023ce:	f023 0307 	bic.w	r3, r3, #7
 80023d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	01db      	lsls	r3, r3, #7
 80023de:	4413      	add	r3, r2
 80023e0:	3384      	adds	r3, #132	@ 0x84
 80023e2:	461a      	mov	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	061b      	lsls	r3, r3, #24
 8002404:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	01db      	lsls	r3, r3, #7
 8002410:	4413      	add	r3, r2
 8002412:	3384      	adds	r3, #132	@ 0x84
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	01db      	lsls	r3, r3, #7
 8002420:	4413      	add	r3, r2
 8002422:	3384      	adds	r3, #132	@ 0x84
 8002424:	461a      	mov	r2, r3
 8002426:	2300      	movs	r3, #0
 8002428:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002430:	461a      	mov	r2, r3
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	431a      	orrs	r2, r3
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	431a      	orrs	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	01db      	lsls	r3, r3, #7
 8002444:	440b      	add	r3, r1
 8002446:	3384      	adds	r3, #132	@ 0x84
 8002448:	4619      	mov	r1, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	01db      	lsls	r3, r3, #7
 800245a:	4413      	add	r3, r2
 800245c:	3384      	adds	r3, #132	@ 0x84
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	4611      	mov	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	01d2      	lsls	r2, r2, #7
 800246a:	440a      	add	r2, r1
 800246c:	3284      	adds	r2, #132	@ 0x84
 800246e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002472:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	01db      	lsls	r3, r3, #7
 800247e:	4413      	add	r3, r2
 8002480:	3384      	adds	r3, #132	@ 0x84
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	01db      	lsls	r3, r3, #7
 8002494:	4413      	add	r3, r2
 8002496:	3384      	adds	r3, #132	@ 0x84
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4619      	mov	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	01db      	lsls	r3, r3, #7
 80024a4:	440b      	add	r3, r1
 80024a6:	3384      	adds	r3, #132	@ 0x84
 80024a8:	4619      	mov	r1, r3
 80024aa:	4b58      	ldr	r3, [pc, #352]	@ (800260c <LTDC_SetConfig+0x32c>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	68f9      	ldr	r1, [r7, #12]
 80024ba:	6809      	ldr	r1, [r1, #0]
 80024bc:	4608      	mov	r0, r1
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	01c9      	lsls	r1, r1, #7
 80024c2:	4401      	add	r1, r0
 80024c4:	3184      	adds	r1, #132	@ 0x84
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	01db      	lsls	r3, r3, #7
 80024d4:	4413      	add	r3, r2
 80024d6:	3384      	adds	r3, #132	@ 0x84
 80024d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	01db      	lsls	r3, r3, #7
 80024e4:	4413      	add	r3, r2
 80024e6:	3384      	adds	r3, #132	@ 0x84
 80024e8:	461a      	mov	r2, r3
 80024ea:	2300      	movs	r3, #0
 80024ec:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	01db      	lsls	r3, r3, #7
 80024f8:	4413      	add	r3, r2
 80024fa:	3384      	adds	r3, #132	@ 0x84
 80024fc:	461a      	mov	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800250c:	2304      	movs	r3, #4
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	e01b      	b.n	800254a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d102      	bne.n	8002520 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800251a:	2303      	movs	r3, #3
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	e014      	b.n	800254a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d00b      	beq.n	8002540 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800252c:	2b02      	cmp	r3, #2
 800252e:	d007      	beq.n	8002540 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002534:	2b03      	cmp	r3, #3
 8002536:	d003      	beq.n	8002540 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800253c:	2b07      	cmp	r3, #7
 800253e:	d102      	bne.n	8002546 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002540:	2302      	movs	r3, #2
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	e001      	b.n	800254a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002546:	2301      	movs	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	01db      	lsls	r3, r3, #7
 8002554:	4413      	add	r3, r2
 8002556:	3384      	adds	r3, #132	@ 0x84
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	4611      	mov	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	01d2      	lsls	r2, r2, #7
 8002564:	440a      	add	r2, r1
 8002566:	3284      	adds	r2, #132	@ 0x84
 8002568:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800256c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	6859      	ldr	r1, [r3, #4]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	1acb      	subs	r3, r1, r3
 8002584:	69f9      	ldr	r1, [r7, #28]
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800258c:	68f9      	ldr	r1, [r7, #12]
 800258e:	6809      	ldr	r1, [r1, #0]
 8002590:	4608      	mov	r0, r1
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	01c9      	lsls	r1, r1, #7
 8002596:	4401      	add	r1, r0
 8002598:	3184      	adds	r1, #132	@ 0x84
 800259a:	4313      	orrs	r3, r2
 800259c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	01db      	lsls	r3, r3, #7
 80025a8:	4413      	add	r3, r2
 80025aa:	3384      	adds	r3, #132	@ 0x84
 80025ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4619      	mov	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	01db      	lsls	r3, r3, #7
 80025b8:	440b      	add	r3, r1
 80025ba:	3384      	adds	r3, #132	@ 0x84
 80025bc:	4619      	mov	r1, r3
 80025be:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <LTDC_SetConfig+0x330>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	01db      	lsls	r3, r3, #7
 80025ce:	4413      	add	r3, r2
 80025d0:	3384      	adds	r3, #132	@ 0x84
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	01db      	lsls	r3, r3, #7
 80025e4:	4413      	add	r3, r2
 80025e6:	3384      	adds	r3, #132	@ 0x84
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	4611      	mov	r1, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	01d2      	lsls	r2, r2, #7
 80025f4:	440a      	add	r2, r1
 80025f6:	3284      	adds	r2, #132	@ 0x84
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6013      	str	r3, [r2, #0]
}
 80025fe:	bf00      	nop
 8002600:	3724      	adds	r7, #36	@ 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	fffff8f8 	.word	0xfffff8f8
 8002610:	fffff800 	.word	0xfffff800

08002614 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b23      	ldr	r3, [pc, #140]	@ (80026ac <HAL_PWREx_EnableOverDrive+0x98>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	4a22      	ldr	r2, [pc, #136]	@ (80026ac <HAL_PWREx_EnableOverDrive+0x98>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
 800262a:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <HAL_PWREx_EnableOverDrive+0x98>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002636:	4b1e      	ldr	r3, [pc, #120]	@ (80026b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1d      	ldr	r2, [pc, #116]	@ (80026b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002640:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002642:	f7fe fe05 	bl	8001250 <HAL_GetTick>
 8002646:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002648:	e009      	b.n	800265e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800264a:	f7fe fe01 	bl	8001250 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002658:	d901      	bls.n	800265e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e022      	b.n	80026a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800265e:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266a:	d1ee      	bne.n	800264a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800266c:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0f      	ldr	r2, [pc, #60]	@ (80026b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002676:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002678:	f7fe fdea 	bl	8001250 <HAL_GetTick>
 800267c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800267e:	e009      	b.n	8002694 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002680:	f7fe fde6 	bl	8001250 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800268e:	d901      	bls.n	8002694 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e007      	b.n	80026a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026a0:	d1ee      	bne.n	8002680 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40007000 	.word	0x40007000

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e291      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8087 	beq.w	80027e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d8:	4b96      	ldr	r3, [pc, #600]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d00c      	beq.n	80026fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e4:	4b93      	ldr	r3, [pc, #588]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d112      	bne.n	8002716 <HAL_RCC_OscConfig+0x62>
 80026f0:	4b90      	ldr	r3, [pc, #576]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026fc:	d10b      	bne.n	8002716 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d06c      	beq.n	80027e4 <HAL_RCC_OscConfig+0x130>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d168      	bne.n	80027e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e26b      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x7a>
 8002720:	4b84      	ldr	r3, [pc, #528]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a83      	ldr	r2, [pc, #524]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	e02e      	b.n	800278c <HAL_RCC_OscConfig+0xd8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x9c>
 8002736:	4b7f      	ldr	r3, [pc, #508]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7e      	ldr	r2, [pc, #504]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 800273c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b7c      	ldr	r3, [pc, #496]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a7b      	ldr	r2, [pc, #492]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002748:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xd8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0xc0>
 800275a:	4b76      	ldr	r3, [pc, #472]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a75      	ldr	r2, [pc, #468]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b73      	ldr	r3, [pc, #460]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a72      	ldr	r2, [pc, #456]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0xd8>
 8002774:	4b6f      	ldr	r3, [pc, #444]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6e      	ldr	r2, [pc, #440]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b6c      	ldr	r3, [pc, #432]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a6b      	ldr	r2, [pc, #428]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fd5c 	bl	8001250 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fd58 	bl	8001250 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e21f      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b61      	ldr	r3, [pc, #388]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xe8>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fd48 	bl	8001250 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fd44 	bl	8001250 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	@ 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e20b      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	4b57      	ldr	r3, [pc, #348]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x110>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d069      	beq.n	80028c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f2:	4b50      	ldr	r3, [pc, #320]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b08      	cmp	r3, #8
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x190>
 800280a:	4b4a      	ldr	r3, [pc, #296]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b47      	ldr	r3, [pc, #284]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x17a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1df      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b41      	ldr	r3, [pc, #260]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	493d      	ldr	r1, [pc, #244]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	e040      	b.n	80028c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d023      	beq.n	8002894 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b39      	ldr	r3, [pc, #228]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a38      	ldr	r2, [pc, #224]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fcfa 	bl	8001250 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe fcf6 	bl	8001250 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e1bd      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	4b30      	ldr	r3, [pc, #192]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4929      	ldr	r1, [pc, #164]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
 8002892:	e018      	b.n	80028c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002894:	4b27      	ldr	r3, [pc, #156]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a26      	ldr	r2, [pc, #152]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fcd6 	bl	8001250 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a8:	f7fe fcd2 	bl	8001250 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e199      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d038      	beq.n	8002944 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d019      	beq.n	800290e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028de:	4a15      	ldr	r2, [pc, #84]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e6:	f7fe fcb3 	bl	8001250 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ee:	f7fe fcaf 	bl	8001250 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e176      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002900:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x23a>
 800290c:	e01a      	b.n	8002944 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290e:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002912:	4a08      	ldr	r2, [pc, #32]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7fe fc99 	bl	8001250 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002922:	f7fe fc95 	bl	8001250 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d903      	bls.n	8002938 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e15c      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
 8002934:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002938:	4b91      	ldr	r3, [pc, #580]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 800293a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1ee      	bne.n	8002922 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80a4 	beq.w	8002a9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002952:	4b8b      	ldr	r3, [pc, #556]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10d      	bne.n	800297a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4b88      	ldr	r3, [pc, #544]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	4a87      	ldr	r2, [pc, #540]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	@ 0x40
 800296a:	4b85      	ldr	r3, [pc, #532]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297a:	4b82      	ldr	r3, [pc, #520]	@ (8002b84 <HAL_RCC_OscConfig+0x4d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d118      	bne.n	80029b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002986:	4b7f      	ldr	r3, [pc, #508]	@ (8002b84 <HAL_RCC_OscConfig+0x4d0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b84 <HAL_RCC_OscConfig+0x4d0>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002992:	f7fe fc5d 	bl	8001250 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe fc59 	bl	8001250 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b64      	cmp	r3, #100	@ 0x64
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e120      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ac:	4b75      	ldr	r3, [pc, #468]	@ (8002b84 <HAL_RCC_OscConfig+0x4d0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x31a>
 80029c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80029cc:	e02d      	b.n	8002a2a <HAL_RCC_OscConfig+0x376>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x33c>
 80029d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	4a69      	ldr	r2, [pc, #420]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e2:	4b67      	ldr	r3, [pc, #412]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	4a66      	ldr	r2, [pc, #408]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ee:	e01c      	b.n	8002a2a <HAL_RCC_OscConfig+0x376>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d10c      	bne.n	8002a12 <HAL_RCC_OscConfig+0x35e>
 80029f8:	4b61      	ldr	r3, [pc, #388]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fc:	4a60      	ldr	r2, [pc, #384]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a04:	4b5e      	ldr	r3, [pc, #376]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a08:	4a5d      	ldr	r2, [pc, #372]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a10:	e00b      	b.n	8002a2a <HAL_RCC_OscConfig+0x376>
 8002a12:	4b5b      	ldr	r3, [pc, #364]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	4a5a      	ldr	r2, [pc, #360]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1e:	4b58      	ldr	r3, [pc, #352]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	4a57      	ldr	r2, [pc, #348]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d015      	beq.n	8002a5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe fc0d 	bl	8001250 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a38:	e00a      	b.n	8002a50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f7fe fc09 	bl	8001250 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e0ce      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	4b4b      	ldr	r3, [pc, #300]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ee      	beq.n	8002a3a <HAL_RCC_OscConfig+0x386>
 8002a5c:	e014      	b.n	8002a88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fbf7 	bl	8001250 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe fbf3 	bl	8001250 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0b8      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	4b40      	ldr	r3, [pc, #256]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ee      	bne.n	8002a66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d105      	bne.n	8002a9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	4a3b      	ldr	r2, [pc, #236]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002a94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80a4 	beq.w	8002bec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa4:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d06b      	beq.n	8002b88 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d149      	bne.n	8002b4c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab8:	4b31      	ldr	r3, [pc, #196]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a30      	ldr	r2, [pc, #192]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fbc4 	bl	8001250 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fbc0 	bl	8001250 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e087      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	4b28      	ldr	r3, [pc, #160]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69da      	ldr	r2, [r3, #28]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	019b      	lsls	r3, r3, #6
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b16:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a18      	ldr	r2, [pc, #96]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fb94 	bl	8001250 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fb90 	bl	8001250 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e057      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x478>
 8002b4a:	e04f      	b.n	8002bec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0b      	ldr	r2, [pc, #44]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fb7a 	bl	8001250 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe fb76 	bl	8001250 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e03d      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4ac>
 8002b7e:	e035      	b.n	8002bec <HAL_RCC_OscConfig+0x538>
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b88:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf8 <HAL_RCC_OscConfig+0x544>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d028      	beq.n	8002be8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d121      	bne.n	8002be8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d11a      	bne.n	8002be8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bb8:	4013      	ands	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d111      	bne.n	8002be8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800

08002bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0d0      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c14:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d910      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b67      	ldr	r3, [pc, #412]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 020f 	bic.w	r2, r3, #15
 8002c2a:	4965      	ldr	r1, [pc, #404]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b63      	ldr	r3, [pc, #396]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0b8      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c5c:	4b59      	ldr	r3, [pc, #356]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a58      	ldr	r2, [pc, #352]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c74:	4b53      	ldr	r3, [pc, #332]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a52      	ldr	r2, [pc, #328]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b50      	ldr	r3, [pc, #320]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	494d      	ldr	r1, [pc, #308]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d040      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b47      	ldr	r3, [pc, #284]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d115      	bne.n	8002cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e07f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbe:	4b41      	ldr	r3, [pc, #260]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e073      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cce:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06b      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cde:	4b39      	ldr	r3, [pc, #228]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f023 0203 	bic.w	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4936      	ldr	r1, [pc, #216]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf0:	f7fe faae 	bl	8001250 <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf8:	f7fe faaa 	bl	8001250 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e053      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 020c 	and.w	r2, r3, #12
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d1eb      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d20:	4b27      	ldr	r3, [pc, #156]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d210      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b24      	ldr	r3, [pc, #144]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 020f 	bic.w	r2, r3, #15
 8002d36:	4922      	ldr	r1, [pc, #136]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b20      	ldr	r3, [pc, #128]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e032      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4916      	ldr	r1, [pc, #88]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d7a:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	490e      	ldr	r1, [pc, #56]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d8e:	f000 f821 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	490a      	ldr	r1, [pc, #40]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	fa22 f303 	lsr.w	r3, r2, r3
 8002da6:	4a09      	ldr	r2, [pc, #36]	@ (8002dcc <HAL_RCC_ClockConfig+0x1d0>)
 8002da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1d4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe f860 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023c00 	.word	0x40023c00
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	080065e0 	.word	0x080065e0
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b090      	sub	sp, #64	@ 0x40
 8002dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8002de0:	2300      	movs	r3, #0
 8002de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002de4:	2300      	movs	r3, #0
 8002de6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dec:	4b59      	ldr	r3, [pc, #356]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d00d      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x40>
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	f200 80a1 	bhi.w	8002f40 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x34>
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d003      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e06:	e09b      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b53      	ldr	r3, [pc, #332]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e0c:	e09b      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e0e:	4b53      	ldr	r3, [pc, #332]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e12:	e098      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e14:	4b4f      	ldr	r3, [pc, #316]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d028      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	099b      	lsrs	r3, r3, #6
 8002e30:	2200      	movs	r2, #0
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4b47      	ldr	r3, [pc, #284]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e40:	fb03 f201 	mul.w	r2, r3, r1
 8002e44:	2300      	movs	r3, #0
 8002e46:	fb00 f303 	mul.w	r3, r0, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a43      	ldr	r2, [pc, #268]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002e4e:	fba0 1202 	umull	r1, r2, r0, r2
 8002e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e54:	460a      	mov	r2, r1
 8002e56:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e5a:	4413      	add	r3, r2
 8002e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e60:	2200      	movs	r2, #0
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	61fa      	str	r2, [r7, #28]
 8002e66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e6e:	f7fd fa1f 	bl	80002b0 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4613      	mov	r3, r2
 8002e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e7a:	e053      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7c:	4b35      	ldr	r3, [pc, #212]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	2200      	movs	r2, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	617a      	str	r2, [r7, #20]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e8e:	f04f 0b00 	mov.w	fp, #0
 8002e92:	4652      	mov	r2, sl
 8002e94:	465b      	mov	r3, fp
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	0159      	lsls	r1, r3, #5
 8002ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea4:	0150      	lsls	r0, r2, #5
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	ebb2 080a 	subs.w	r8, r2, sl
 8002eae:	eb63 090b 	sbc.w	r9, r3, fp
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ebe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ec2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ec6:	ebb2 0408 	subs.w	r4, r2, r8
 8002eca:	eb63 0509 	sbc.w	r5, r3, r9
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	00eb      	lsls	r3, r5, #3
 8002ed8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002edc:	00e2      	lsls	r2, r4, #3
 8002ede:	4614      	mov	r4, r2
 8002ee0:	461d      	mov	r5, r3
 8002ee2:	eb14 030a 	adds.w	r3, r4, sl
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	eb45 030b 	adc.w	r3, r5, fp
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002efa:	4629      	mov	r1, r5
 8002efc:	028b      	lsls	r3, r1, #10
 8002efe:	4621      	mov	r1, r4
 8002f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f04:	4621      	mov	r1, r4
 8002f06:	028a      	lsls	r2, r1, #10
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	60fa      	str	r2, [r7, #12]
 8002f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f18:	f7fd f9ca 	bl	80002b0 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4613      	mov	r3, r2
 8002f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	0c1b      	lsrs	r3, r3, #16
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002f34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f3e:	e002      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3740      	adds	r7, #64	@ 0x40
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	00f42400 	.word	0x00f42400
 8002f5c:	017d7840 	.word	0x017d7840

08002f60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f64:	4b03      	ldr	r3, [pc, #12]	@ (8002f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000000 	.word	0x20000000

08002f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f7c:	f7ff fff0 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	0a9b      	lsrs	r3, r3, #10
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4903      	ldr	r1, [pc, #12]	@ (8002f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	080065f0 	.word	0x080065f0

08002fa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	220f      	movs	r2, #15
 8002fae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fb0:	4b12      	ldr	r3, [pc, #72]	@ (8002ffc <HAL_RCC_GetClockConfig+0x5c>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0203 	and.w	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <HAL_RCC_GetClockConfig+0x5c>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <HAL_RCC_GetClockConfig+0x5c>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <HAL_RCC_GetClockConfig+0x5c>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	08db      	lsrs	r3, r3, #3
 8002fda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fe2:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <HAL_RCC_GetClockConfig+0x60>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 020f 	and.w	r2, r3, #15
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	601a      	str	r2, [r3, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40023c00 	.word	0x40023c00

08003004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800302c:	4b69      	ldr	r3, [pc, #420]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4a68      	ldr	r2, [pc, #416]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003036:	6093      	str	r3, [r2, #8]
 8003038:	4b66      	ldr	r3, [pc, #408]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003040:	4964      	ldr	r1, [pc, #400]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d017      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800305e:	4b5d      	ldr	r3, [pc, #372]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003064:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306c:	4959      	ldr	r1, [pc, #356]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003078:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800307c:	d101      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800307e:	2301      	movs	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800308a:	2301      	movs	r3, #1
 800308c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d017      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800309a:	4b4e      	ldr	r3, [pc, #312]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	494a      	ldr	r1, [pc, #296]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030b8:	d101      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 808b 	beq.w	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e8:	4b3a      	ldr	r3, [pc, #232]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	4a39      	ldr	r2, [pc, #228]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f4:	4b37      	ldr	r3, [pc, #220]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003100:	4b35      	ldr	r3, [pc, #212]	@ (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a34      	ldr	r2, [pc, #208]	@ (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800310a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310c:	f7fe f8a0 	bl	8001250 <HAL_GetTick>
 8003110:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003114:	f7fe f89c 	bl	8001250 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	@ 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e357      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003126:	4b2c      	ldr	r3, [pc, #176]	@ (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003132:	4b28      	ldr	r3, [pc, #160]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800313a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d035      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	429a      	cmp	r2, r3
 800314e:	d02e      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003150:	4b20      	ldr	r3, [pc, #128]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003158:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800315a:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	4a1d      	ldr	r2, [pc, #116]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003164:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003166:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	4a1a      	ldr	r2, [pc, #104]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003170:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003172:	4a18      	ldr	r2, [pc, #96]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003178:	4b16      	ldr	r3, [pc, #88]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d114      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe f864 	bl	8001250 <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe f860 	bl	8001250 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e319      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ba:	d111      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031bc:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031c8:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031ca:	400b      	ands	r3, r1
 80031cc:	4901      	ldr	r1, [pc, #4]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
 80031d2:	e00b      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40007000 	.word	0x40007000
 80031dc:	0ffffcff 	.word	0x0ffffcff
 80031e0:	4baa      	ldr	r3, [pc, #680]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4aa9      	ldr	r2, [pc, #676]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80031ea:	6093      	str	r3, [r2, #8]
 80031ec:	4ba7      	ldr	r3, [pc, #668]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	49a4      	ldr	r1, [pc, #656]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800320a:	4ba0      	ldr	r3, [pc, #640]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003210:	4a9e      	ldr	r2, [pc, #632]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003216:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800321a:	4b9c      	ldr	r3, [pc, #624]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800321c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	4999      	ldr	r1, [pc, #612]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003238:	4b94      	ldr	r3, [pc, #592]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003246:	4991      	ldr	r1, [pc, #580]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800325a:	4b8c      	ldr	r3, [pc, #560]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003260:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003268:	4988      	ldr	r1, [pc, #544]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800327c:	4b83      	ldr	r3, [pc, #524]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003282:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800328a:	4980      	ldr	r1, [pc, #512]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800329e:	4b7b      	ldr	r3, [pc, #492]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ac:	4977      	ldr	r1, [pc, #476]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032c0:	4b72      	ldr	r3, [pc, #456]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c6:	f023 0203 	bic.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	496f      	ldr	r1, [pc, #444]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032e2:	4b6a      	ldr	r3, [pc, #424]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e8:	f023 020c 	bic.w	r2, r3, #12
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f0:	4966      	ldr	r1, [pc, #408]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003304:	4b61      	ldr	r3, [pc, #388]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	495e      	ldr	r1, [pc, #376]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003326:	4b59      	ldr	r3, [pc, #356]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003334:	4955      	ldr	r1, [pc, #340]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003348:	4b50      	ldr	r3, [pc, #320]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	494d      	ldr	r1, [pc, #308]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800336a:	4b48      	ldr	r3, [pc, #288]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003370:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	4944      	ldr	r1, [pc, #272]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800338c:	4b3f      	ldr	r3, [pc, #252]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339a:	493c      	ldr	r1, [pc, #240]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033ae:	4b37      	ldr	r3, [pc, #220]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033bc:	4933      	ldr	r1, [pc, #204]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033d0:	4b2e      	ldr	r3, [pc, #184]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033de:	492b      	ldr	r1, [pc, #172]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d011      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033f2:	4b26      	ldr	r3, [pc, #152]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003400:	4922      	ldr	r1, [pc, #136]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800340c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003410:	d101      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003432:	4b16      	ldr	r3, [pc, #88]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003438:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003440:	4912      	ldr	r1, [pc, #72]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003454:	4b0d      	ldr	r3, [pc, #52]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003464:	4909      	ldr	r1, [pc, #36]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d006      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80d9 	beq.w	8003632 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003480:	4b02      	ldr	r3, [pc, #8]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a01      	ldr	r2, [pc, #4]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003486:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800348a:	e001      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800348c:	40023800 	.word	0x40023800
 8003490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003492:	f7fd fedd 	bl	8001250 <HAL_GetTick>
 8003496:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800349a:	f7fd fed9 	bl	8001250 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	@ 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e194      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d021      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d11d      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034cc:	4b64      	ldr	r3, [pc, #400]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034d2:	0c1b      	lsrs	r3, r3, #16
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034da:	4b61      	ldr	r3, [pc, #388]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034e0:	0e1b      	lsrs	r3, r3, #24
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	019a      	lsls	r2, r3, #6
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	431a      	orrs	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	061b      	lsls	r3, r3, #24
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	071b      	lsls	r3, r3, #28
 8003500:	4957      	ldr	r1, [pc, #348]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02e      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003532:	d129      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003534:	4b4a      	ldr	r3, [pc, #296]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003542:	4b47      	ldr	r3, [pc, #284]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003548:	0f1b      	lsrs	r3, r3, #28
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	019a      	lsls	r2, r3, #6
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	431a      	orrs	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	071b      	lsls	r3, r3, #28
 8003568:	493d      	ldr	r1, [pc, #244]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003570:	4b3b      	ldr	r3, [pc, #236]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003576:	f023 021f 	bic.w	r2, r3, #31
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	3b01      	subs	r3, #1
 8003580:	4937      	ldr	r1, [pc, #220]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01d      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003594:	4b32      	ldr	r3, [pc, #200]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800359a:	0e1b      	lsrs	r3, r3, #24
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035a8:	0f1b      	lsrs	r3, r3, #28
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	019a      	lsls	r2, r3, #6
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	041b      	lsls	r3, r3, #16
 80035bc:	431a      	orrs	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	061b      	lsls	r3, r3, #24
 80035c2:	431a      	orrs	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	071b      	lsls	r3, r3, #28
 80035c8:	4925      	ldr	r1, [pc, #148]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d011      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	019a      	lsls	r2, r3, #6
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	061b      	lsls	r3, r3, #24
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	071b      	lsls	r3, r3, #28
 80035f8:	4919      	ldr	r1, [pc, #100]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003600:	4b17      	ldr	r3, [pc, #92]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a16      	ldr	r2, [pc, #88]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003606:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800360a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fd fe20 	bl	8001250 <HAL_GetTick>
 8003610:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003614:	f7fd fe1c 	bl	8001250 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e0d7      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003626:	4b0e      	ldr	r3, [pc, #56]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b01      	cmp	r3, #1
 8003636:	f040 80cd 	bne.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800363a:	4b09      	ldr	r3, [pc, #36]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a08      	ldr	r2, [pc, #32]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003646:	f7fd fe03 	bl	8001250 <HAL_GetTick>
 800364a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800364e:	f7fd fdff 	bl	8001250 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b64      	cmp	r3, #100	@ 0x64
 800365a:	d903      	bls.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e0ba      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003660:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003664:	4b5e      	ldr	r3, [pc, #376]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800366c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003670:	d0ed      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800368e:	2b00      	cmp	r3, #0
 8003690:	d02e      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d12a      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800369a:	4b51      	ldr	r3, [pc, #324]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036a8:	4b4d      	ldr	r3, [pc, #308]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ae:	0f1b      	lsrs	r3, r3, #28
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	019a      	lsls	r2, r3, #6
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	4944      	ldr	r1, [pc, #272]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036d6:	4b42      	ldr	r3, [pc, #264]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036dc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e4:	3b01      	subs	r3, #1
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	493d      	ldr	r1, [pc, #244]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d022      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003700:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003704:	d11d      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003706:	4b36      	ldr	r3, [pc, #216]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370c:	0e1b      	lsrs	r3, r3, #24
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003714:	4b32      	ldr	r3, [pc, #200]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	0f1b      	lsrs	r3, r3, #28
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	019a      	lsls	r2, r3, #6
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	041b      	lsls	r3, r3, #16
 800372e:	431a      	orrs	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	061b      	lsls	r3, r3, #24
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	071b      	lsls	r3, r3, #28
 800373a:	4929      	ldr	r1, [pc, #164]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d028      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800374e:	4b24      	ldr	r3, [pc, #144]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003754:	0e1b      	lsrs	r3, r3, #24
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800375c:	4b20      	ldr	r3, [pc, #128]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003762:	0c1b      	lsrs	r3, r3, #16
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	019a      	lsls	r2, r3, #6
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	071b      	lsls	r3, r3, #28
 8003782:	4917      	ldr	r1, [pc, #92]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800378a:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800378c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003790:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	4911      	ldr	r1, [pc, #68]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037a0:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0e      	ldr	r2, [pc, #56]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ac:	f7fd fd50 	bl	8001250 <HAL_GetTick>
 80037b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037b4:	f7fd fd4c 	bl	8001250 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	@ 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e007      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037c6:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037d2:	d1ef      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800

080037e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e049      	b.n	800388a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f841 	bl	8003892 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f000 f9e8 	bl	8003bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d001      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e054      	b.n	800396a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a26      	ldr	r2, [pc, #152]	@ (8003978 <HAL_TIM_Base_Start_IT+0xd0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d022      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x80>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ea:	d01d      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x80>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a22      	ldr	r2, [pc, #136]	@ (800397c <HAL_TIM_Base_Start_IT+0xd4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d018      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x80>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a21      	ldr	r2, [pc, #132]	@ (8003980 <HAL_TIM_Base_Start_IT+0xd8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x80>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1f      	ldr	r2, [pc, #124]	@ (8003984 <HAL_TIM_Base_Start_IT+0xdc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x80>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1e      	ldr	r2, [pc, #120]	@ (8003988 <HAL_TIM_Base_Start_IT+0xe0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d009      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x80>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <HAL_TIM_Base_Start_IT+0xe4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x80>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1b      	ldr	r2, [pc, #108]	@ (8003990 <HAL_TIM_Base_Start_IT+0xe8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d115      	bne.n	8003954 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <HAL_TIM_Base_Start_IT+0xec>)
 8003930:	4013      	ands	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b06      	cmp	r3, #6
 8003938:	d015      	beq.n	8003966 <HAL_TIM_Base_Start_IT+0xbe>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003940:	d011      	beq.n	8003966 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003952:	e008      	b.n	8003966 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e000      	b.n	8003968 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40010000 	.word	0x40010000
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800
 8003984:	40000c00 	.word	0x40000c00
 8003988:	40010400 	.word	0x40010400
 800398c:	40014000 	.word	0x40014000
 8003990:	40001800 	.word	0x40001800
 8003994:	00010007 	.word	0x00010007

08003998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d020      	beq.n	80039fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01b      	beq.n	80039fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0202 	mvn.w	r2, #2
 80039cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f8e9 	bl	8003bba <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f8db 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f8ec 	bl	8003bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d020      	beq.n	8003a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0204 	mvn.w	r2, #4
 8003a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8c3 	bl	8003bba <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8b5 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8c6 	bl	8003bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d020      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01b      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0208 	mvn.w	r2, #8
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f89d 	bl	8003bba <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f88f 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f8a0 	bl	8003bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d020      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0210 	mvn.w	r2, #16
 8003ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f877 	bl	8003bba <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f869 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f87a 	bl	8003bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00c      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0201 	mvn.w	r2, #1
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd f858 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d104      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00c      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f919 	bl	8003d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00c      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f911 	bl	8003d78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00c      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f834 	bl	8003be2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00c      	beq.n	8003b9e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f06f 0220 	mvn.w	r2, #32
 8003b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f8d9 	bl	8003d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a46      	ldr	r2, [pc, #280]	@ (8003d24 <TIM_Base_SetConfig+0x12c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d013      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c16:	d00f      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a43      	ldr	r2, [pc, #268]	@ (8003d28 <TIM_Base_SetConfig+0x130>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a42      	ldr	r2, [pc, #264]	@ (8003d2c <TIM_Base_SetConfig+0x134>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a41      	ldr	r2, [pc, #260]	@ (8003d30 <TIM_Base_SetConfig+0x138>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a40      	ldr	r2, [pc, #256]	@ (8003d34 <TIM_Base_SetConfig+0x13c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d108      	bne.n	8003c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a35      	ldr	r2, [pc, #212]	@ (8003d24 <TIM_Base_SetConfig+0x12c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d02b      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c58:	d027      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a32      	ldr	r2, [pc, #200]	@ (8003d28 <TIM_Base_SetConfig+0x130>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d023      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a31      	ldr	r2, [pc, #196]	@ (8003d2c <TIM_Base_SetConfig+0x134>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01f      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a30      	ldr	r2, [pc, #192]	@ (8003d30 <TIM_Base_SetConfig+0x138>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01b      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2f      	ldr	r2, [pc, #188]	@ (8003d34 <TIM_Base_SetConfig+0x13c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d017      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003d38 <TIM_Base_SetConfig+0x140>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2d      	ldr	r2, [pc, #180]	@ (8003d3c <TIM_Base_SetConfig+0x144>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00f      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8003d40 <TIM_Base_SetConfig+0x148>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00b      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a2b      	ldr	r2, [pc, #172]	@ (8003d44 <TIM_Base_SetConfig+0x14c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d48 <TIM_Base_SetConfig+0x150>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d003      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a29      	ldr	r2, [pc, #164]	@ (8003d4c <TIM_Base_SetConfig+0x154>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d108      	bne.n	8003cbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a10      	ldr	r2, [pc, #64]	@ (8003d24 <TIM_Base_SetConfig+0x12c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_Base_SetConfig+0xf8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a12      	ldr	r2, [pc, #72]	@ (8003d34 <TIM_Base_SetConfig+0x13c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d103      	bne.n	8003cf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d105      	bne.n	8003d16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f023 0201 	bic.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	611a      	str	r2, [r3, #16]
  }
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	40010400 	.word	0x40010400
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	40014400 	.word	0x40014400
 8003d40:	40014800 	.word	0x40014800
 8003d44:	40001800 	.word	0x40001800
 8003d48:	40001c00 	.word	0x40001c00
 8003d4c:	40002000 	.word	0x40002000

08003d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    {
 8003d94:	4a04      	ldr	r2, [pc, #16]	@ (8003da8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
    }
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	08006668 	.word	0x08006668

08003dac <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
    }
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ffe9 	bl	8003d8c <_ZN8touchgfx4FontD1Ev>
 8003dba:	2114      	movs	r1, #20
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f001 fa7e 	bl	80052be <_ZdlPvj>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003dcc:	b590      	push	{r4, r7, lr}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003dd8:	887b      	ldrh	r3, [r7, #2]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e010      	b.n	8003e04 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3308      	adds	r3, #8
 8003df0:	681c      	ldr	r4, [r3, #0]
 8003df2:	f107 030f 	add.w	r3, r7, #15
 8003df6:	f107 0210 	add.w	r2, r7, #16
 8003dfa:	8879      	ldrh	r1, [r7, #2]
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	47a0      	blx	r4
 8003e00:	6178      	str	r0, [r7, #20]
        return glyph;
 8003e02:	697b      	ldr	r3, [r7, #20]
    }
 8003e04:	4618      	mov	r0, r3
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd90      	pop	{r4, r7, pc}

08003e0c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	89db      	ldrh	r3, [r3, #14]
    }
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8a1b      	ldrh	r3, [r3, #16]
    }
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	88db      	ldrh	r3, [r3, #6]
    }
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	889b      	ldrh	r3, [r3, #4]
    }
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	7a9b      	ldrb	r3, [r3, #10]
 8003e78:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003e7c:	b2db      	uxtb	r3, r3
    }
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7a9b      	ldrb	r3, [r3, #10]
 8003e96:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e9a:	b2db      	uxtb	r3, r3
    }
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
    {
        return false;
 8003eb0:	2300      	movs	r3, #0
    }
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	ee07 3a90 	vmov	s15, r3
    }
 8003ece:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	4a05      	ldr	r2, [pc, #20]	@ (8003efc <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff4d 	bl	8003d8c <_ZN8touchgfx4FontD1Ev>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	080066cc 	.word	0x080066cc

08003f00 <_ZN8touchgfx9ConstFontD0Ev>:
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ffe7 	bl	8003edc <_ZN8touchgfx9ConstFontD1Ev>
 8003f0e:	211c      	movs	r1, #28
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f001 f9d4 	bl	80052be <_ZdlPvj>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	4a05      	ldr	r2, [pc, #20]	@ (8003f40 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff ffd3 	bl	8003edc <_ZN8touchgfx9ConstFontD1Ev>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	08006600 	.word	0x08006600

08003f44 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ffe7 	bl	8003f20 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003f52:	212c      	movs	r1, #44	@ 0x2c
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f001 f9b2 	bl	80052be <_ZdlPvj>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08e      	sub	sp, #56	@ 0x38
 8003f98:	af0a      	add	r7, sp, #40	@ 0x28
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	80fb      	strh	r3, [r7, #6]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	88b9      	ldrh	r1, [r7, #4]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003fb4:	9308      	str	r3, [sp, #32]
 8003fb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003fb8:	9307      	str	r3, [sp, #28]
 8003fba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003fbe:	9306      	str	r3, [sp, #24]
 8003fc0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003fc4:	9305      	str	r3, [sp, #20]
 8003fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003fca:	9304      	str	r3, [sp, #16]
 8003fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003fd0:	9303      	str	r3, [sp, #12]
 8003fd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fd6:	9302      	str	r3, [sp, #8]
 8003fd8:	7f3b      	ldrb	r3, [r7, #28]
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	8b3b      	ldrh	r3, [r7, #24]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	f000 fbf4 	bl	80047d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003fe8:	4a09      	ldr	r2, [pc, #36]	@ (8004010 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ff2:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ff8:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ffe:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004004:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	08006600 	.word	0x08006600

08004014 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	889b      	ldrh	r3, [r3, #4]
 8004028:	0adb      	lsrs	r3, r3, #11
 800402a:	b29b      	uxth	r3, r3
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4413      	add	r3, r2
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004046:	b480      	push	{r7}
 8004048:	b089      	sub	sp, #36	@ 0x24
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	460b      	mov	r3, r1
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	7b1b      	ldrb	r3, [r3, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8004062:	2300      	movs	r3, #0
 8004064:	e031      	b.n	80040ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1a      	ldr	r2, [r3, #32]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	7b5b      	ldrb	r3, [r3, #13]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	b21b      	sxth	r3, r3
 8004076:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800407a:	b219      	sxth	r1, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	7adb      	ldrb	r3, [r3, #11]
 8004080:	b21b      	sxth	r3, r3
 8004082:	430b      	orrs	r3, r1
 8004084:	b21b      	sxth	r3, r3
 8004086:	b29b      	uxth	r3, r3
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	7b1b      	ldrb	r3, [r3, #12]
 8004092:	837b      	strh	r3, [r7, #26]
 8004094:	e013      	b.n	80040be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	897a      	ldrh	r2, [r7, #10]
 800409c:	429a      	cmp	r2, r3
 800409e:	d103      	bne.n	80040a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80040a6:	e010      	b.n	80040ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	897a      	ldrh	r2, [r7, #10]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d309      	bcc.n	80040c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80040b2:	8b7b      	ldrh	r3, [r7, #26]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	837b      	strh	r3, [r7, #26]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3304      	adds	r3, #4
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	8b7b      	ldrh	r3, [r7, #26]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e8      	bne.n	8004096 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 80040c4:	e000      	b.n	80040c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 80040c6:	bf00      	nop
        }
    }
    return 0;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3724      	adds	r7, #36	@ 0x24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4801      	ldr	r0, [pc, #4]	@ (80040e4 <__tcf_0+0xc>)
 80040de:	f7ff ff1f 	bl	8003f20 <_ZN8touchgfx13GeneratedFontD1Ev>
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20013a6c 	.word	0x20013a6c

080040e8 <_Z23getFont_verdana_10_4bppv>:
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08e      	sub	sp, #56	@ 0x38
 80040ec:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80040ee:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f3bf 8f5b 	dmb	ish
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bf0c      	ite	eq
 80040fe:	2301      	moveq	r3, #1
 8004100:	2300      	movne	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d030      	beq.n	800416a <_Z23getFont_verdana_10_4bppv+0x82>
 8004108:	481a      	ldr	r0, [pc, #104]	@ (8004174 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800410a:	f001 f8da 	bl	80052c2 <__cxa_guard_acquire>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d025      	beq.n	800416a <_Z23getFont_verdana_10_4bppv+0x82>
 800411e:	2300      	movs	r3, #0
 8004120:	930c      	str	r3, [sp, #48]	@ 0x30
 8004122:	2300      	movs	r3, #0
 8004124:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004126:	2300      	movs	r3, #0
 8004128:	930a      	str	r3, [sp, #40]	@ 0x28
 800412a:	233f      	movs	r3, #63	@ 0x3f
 800412c:	9309      	str	r3, [sp, #36]	@ 0x24
 800412e:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <_Z23getFont_verdana_10_4bppv+0x90>)
 8004130:	9308      	str	r3, [sp, #32]
 8004132:	4b12      	ldr	r3, [pc, #72]	@ (800417c <_Z23getFont_verdana_10_4bppv+0x94>)
 8004134:	9307      	str	r3, [sp, #28]
 8004136:	2300      	movs	r3, #0
 8004138:	9306      	str	r3, [sp, #24]
 800413a:	2300      	movs	r3, #0
 800413c:	9305      	str	r3, [sp, #20]
 800413e:	2301      	movs	r3, #1
 8004140:	9304      	str	r3, [sp, #16]
 8004142:	2304      	movs	r3, #4
 8004144:	9303      	str	r3, [sp, #12]
 8004146:	2300      	movs	r3, #0
 8004148:	9302      	str	r3, [sp, #8]
 800414a:	2300      	movs	r3, #0
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	230a      	movs	r3, #10
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	230a      	movs	r3, #10
 8004154:	2201      	movs	r2, #1
 8004156:	490a      	ldr	r1, [pc, #40]	@ (8004180 <_Z23getFont_verdana_10_4bppv+0x98>)
 8004158:	480a      	ldr	r0, [pc, #40]	@ (8004184 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800415a:	f7ff ff1b 	bl	8003f94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800415e:	480a      	ldr	r0, [pc, #40]	@ (8004188 <_Z23getFont_verdana_10_4bppv+0xa0>)
 8004160:	f001 f8fa 	bl	8005358 <atexit>
 8004164:	4803      	ldr	r0, [pc, #12]	@ (8004174 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8004166:	f001 f8b8 	bl	80052da <__cxa_guard_release>
    return verdana_10_4bpp;
 800416a:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20013a98 	.word	0x20013a98
 8004178:	08006948 	.word	0x08006948
 800417c:	08006954 	.word	0x08006954
 8004180:	08006918 	.word	0x08006918
 8004184:	20013a6c 	.word	0x20013a6c
 8004188:	080040d9 	.word	0x080040d9

0800418c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
 8004190:	4801      	ldr	r0, [pc, #4]	@ (8004198 <__tcf_0+0xc>)
 8004192:	f7ff fec5 	bl	8003f20 <_ZN8touchgfx13GeneratedFontD1Ev>
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20013a9c 	.word	0x20013a9c

0800419c <_Z23getFont_verdana_20_4bppv>:
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08e      	sub	sp, #56	@ 0x38
 80041a0:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80041a2:	4b21      	ldr	r3, [pc, #132]	@ (8004228 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f3bf 8f5b 	dmb	ish
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf0c      	ite	eq
 80041b2:	2301      	moveq	r3, #1
 80041b4:	2300      	movne	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d030      	beq.n	800421e <_Z23getFont_verdana_20_4bppv+0x82>
 80041bc:	481a      	ldr	r0, [pc, #104]	@ (8004228 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80041be:	f001 f880 	bl	80052c2 <__cxa_guard_acquire>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf14      	ite	ne
 80041c8:	2301      	movne	r3, #1
 80041ca:	2300      	moveq	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d025      	beq.n	800421e <_Z23getFont_verdana_20_4bppv+0x82>
 80041d2:	2300      	movs	r3, #0
 80041d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80041d6:	2300      	movs	r3, #0
 80041d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041da:	2300      	movs	r3, #0
 80041dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80041de:	233f      	movs	r3, #63	@ 0x3f
 80041e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80041e2:	4b12      	ldr	r3, [pc, #72]	@ (800422c <_Z23getFont_verdana_20_4bppv+0x90>)
 80041e4:	9308      	str	r3, [sp, #32]
 80041e6:	4b12      	ldr	r3, [pc, #72]	@ (8004230 <_Z23getFont_verdana_20_4bppv+0x94>)
 80041e8:	9307      	str	r3, [sp, #28]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9306      	str	r3, [sp, #24]
 80041ee:	2300      	movs	r3, #0
 80041f0:	9305      	str	r3, [sp, #20]
 80041f2:	2301      	movs	r3, #1
 80041f4:	9304      	str	r3, [sp, #16]
 80041f6:	2304      	movs	r3, #4
 80041f8:	9303      	str	r3, [sp, #12]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9302      	str	r3, [sp, #8]
 80041fe:	2300      	movs	r3, #0
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2314      	movs	r3, #20
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	2314      	movs	r3, #20
 8004208:	2201      	movs	r2, #1
 800420a:	490a      	ldr	r1, [pc, #40]	@ (8004234 <_Z23getFont_verdana_20_4bppv+0x98>)
 800420c:	480a      	ldr	r0, [pc, #40]	@ (8004238 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800420e:	f7ff fec1 	bl	8003f94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004212:	480a      	ldr	r0, [pc, #40]	@ (800423c <_Z23getFont_verdana_20_4bppv+0xa0>)
 8004214:	f001 f8a0 	bl	8005358 <atexit>
 8004218:	4803      	ldr	r0, [pc, #12]	@ (8004228 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800421a:	f001 f85e 	bl	80052da <__cxa_guard_release>
    return verdana_20_4bpp;
 800421e:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20013ac8 	.word	0x20013ac8
 800422c:	0800694c 	.word	0x0800694c
 8004230:	08006958 	.word	0x08006958
 8004234:	08006928 	.word	0x08006928
 8004238:	20013a9c 	.word	0x20013a9c
 800423c:	0800418d 	.word	0x0800418d

08004240 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
 8004244:	4801      	ldr	r0, [pc, #4]	@ (800424c <__tcf_0+0xc>)
 8004246:	f7ff fe6b 	bl	8003f20 <_ZN8touchgfx13GeneratedFontD1Ev>
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20013acc 	.word	0x20013acc

08004250 <_Z23getFont_verdana_40_4bppv>:
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08e      	sub	sp, #56	@ 0x38
 8004254:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004256:	4b21      	ldr	r3, [pc, #132]	@ (80042dc <_Z23getFont_verdana_40_4bppv+0x8c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f3bf 8f5b 	dmb	ish
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d030      	beq.n	80042d2 <_Z23getFont_verdana_40_4bppv+0x82>
 8004270:	481a      	ldr	r0, [pc, #104]	@ (80042dc <_Z23getFont_verdana_40_4bppv+0x8c>)
 8004272:	f001 f826 	bl	80052c2 <__cxa_guard_acquire>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d025      	beq.n	80042d2 <_Z23getFont_verdana_40_4bppv+0x82>
 8004286:	2300      	movs	r3, #0
 8004288:	930c      	str	r3, [sp, #48]	@ 0x30
 800428a:	2300      	movs	r3, #0
 800428c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800428e:	2300      	movs	r3, #0
 8004290:	930a      	str	r3, [sp, #40]	@ 0x28
 8004292:	233f      	movs	r3, #63	@ 0x3f
 8004294:	9309      	str	r3, [sp, #36]	@ 0x24
 8004296:	4b12      	ldr	r3, [pc, #72]	@ (80042e0 <_Z23getFont_verdana_40_4bppv+0x90>)
 8004298:	9308      	str	r3, [sp, #32]
 800429a:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <_Z23getFont_verdana_40_4bppv+0x94>)
 800429c:	9307      	str	r3, [sp, #28]
 800429e:	2300      	movs	r3, #0
 80042a0:	9306      	str	r3, [sp, #24]
 80042a2:	2300      	movs	r3, #0
 80042a4:	9305      	str	r3, [sp, #20]
 80042a6:	2301      	movs	r3, #1
 80042a8:	9304      	str	r3, [sp, #16]
 80042aa:	2304      	movs	r3, #4
 80042ac:	9303      	str	r3, [sp, #12]
 80042ae:	2300      	movs	r3, #0
 80042b0:	9302      	str	r3, [sp, #8]
 80042b2:	2300      	movs	r3, #0
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	2328      	movs	r3, #40	@ 0x28
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2328      	movs	r3, #40	@ 0x28
 80042bc:	2201      	movs	r2, #1
 80042be:	490a      	ldr	r1, [pc, #40]	@ (80042e8 <_Z23getFont_verdana_40_4bppv+0x98>)
 80042c0:	480a      	ldr	r0, [pc, #40]	@ (80042ec <_Z23getFont_verdana_40_4bppv+0x9c>)
 80042c2:	f7ff fe67 	bl	8003f94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80042c6:	480a      	ldr	r0, [pc, #40]	@ (80042f0 <_Z23getFont_verdana_40_4bppv+0xa0>)
 80042c8:	f001 f846 	bl	8005358 <atexit>
 80042cc:	4803      	ldr	r0, [pc, #12]	@ (80042dc <_Z23getFont_verdana_40_4bppv+0x8c>)
 80042ce:	f001 f804 	bl	80052da <__cxa_guard_release>
    return verdana_40_4bpp;
 80042d2:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20013af8 	.word	0x20013af8
 80042e0:	08006950 	.word	0x08006950
 80042e4:	0800695c 	.word	0x0800695c
 80042e8:	08006938 	.word	0x08006938
 80042ec:	20013acc 	.word	0x20013acc
 80042f0:	08004241 	.word	0x08004241

080042f4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	460b      	mov	r3, r1
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	817b      	strh	r3, [r7, #10]
        return 0;
 8004302:	2300      	movs	r3, #0
    }
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
        return 0;
 8004318:	2300      	movs	r3, #0
    }
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
        return 0;
 800432e:	2300      	movs	r3, #0
    }
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800433c:	b40e      	push	{r1, r2, r3}
 800433e:	b580      	push	{r7, lr}
 8004340:	b085      	sub	sp, #20
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8004346:	f107 0320 	add.w	r3, r7, #32
 800434a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	2100      	movs	r1, #0
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f910 	bl	8004578 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8004358:	4603      	mov	r3, r0
 800435a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800435c:	89fb      	ldrh	r3, [r7, #14]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004368:	b003      	add	sp, #12
 800436a:	4770      	bx	lr

0800436c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800436c:	b40c      	push	{r2, r3}
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800437a:	f107 031c 	add.w	r3, r7, #28
 800437e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004380:	78f9      	ldrb	r1, [r7, #3]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8f6 	bl	8004578 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800438c:	4603      	mov	r3, r0
 800438e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8004390:	89fb      	ldrh	r3, [r7, #14]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800439c:	b002      	add	sp, #8
 800439e:	4770      	bx	lr

080043a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	@ 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d016      	beq.n	80043e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3322      	adds	r3, #34	@ 0x22
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	8adb      	ldrh	r3, [r3, #22]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d105      	bne.n	80043ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80043c2:	4b43      	ldr	r3, [pc, #268]	@ (80044d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80043c4:	4a43      	ldr	r2, [pc, #268]	@ (80044d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80043c6:	21c5      	movs	r1, #197	@ 0xc5
 80043c8:	4843      	ldr	r0, [pc, #268]	@ (80044d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80043ca:	f000 ffa7 	bl	800531c <__assert_func>
            return buffer[pos];
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	8a9b      	ldrh	r3, [r3, #20]
 80043d2:	461a      	mov	r2, r3
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80043e2:	2300      	movs	r3, #0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d06a      	beq.n	80044be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 ff49 	bl	8005280 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3322      	adds	r3, #34	@ 0x22
 80043f2:	623b      	str	r3, [r7, #32]
 80043f4:	2301      	movs	r3, #1
 80043f6:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	8adb      	ldrh	r3, [r3, #22]
 80043fc:	8bfa      	ldrh	r2, [r7, #30]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d305      	bcc.n	800440e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8004402:	4b36      	ldr	r3, [pc, #216]	@ (80044dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8004404:	4a36      	ldr	r2, [pc, #216]	@ (80044e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8004406:	21cb      	movs	r1, #203	@ 0xcb
 8004408:	4833      	ldr	r0, [pc, #204]	@ (80044d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800440a:	f000 ff87 	bl	800531c <__assert_func>
            const uint16_t index = pos + offset;
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	8a9a      	ldrh	r2, [r3, #20]
 8004412:	8bfb      	ldrh	r3, [r7, #30]
 8004414:	4413      	add	r3, r2
 8004416:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8004418:	8bbb      	ldrh	r3, [r7, #28]
 800441a:	2b09      	cmp	r3, #9
 800441c:	d801      	bhi.n	8004422 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800441e:	8bbb      	ldrh	r3, [r7, #28]
 8004420:	e001      	b.n	8004426 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8004422:	8bbb      	ldrh	r3, [r7, #28]
 8004424:	3b0a      	subs	r3, #10
 8004426:	6a3a      	ldr	r2, [r7, #32]
 8004428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800442c:	f640 123f 	movw	r2, #2367	@ 0x93f
 8004430:	4293      	cmp	r3, r2
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d03f      	beq.n	80044be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3322      	adds	r3, #34	@ 0x22
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	3222      	adds	r2, #34	@ 0x22
 8004446:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	8ad2      	ldrh	r2, [r2, #22]
 800444c:	2a00      	cmp	r2, #0
 800444e:	d105      	bne.n	800445c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8004450:	4b1f      	ldr	r3, [pc, #124]	@ (80044d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8004452:	4a20      	ldr	r2, [pc, #128]	@ (80044d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8004454:	21c5      	movs	r1, #197	@ 0xc5
 8004456:	4820      	ldr	r0, [pc, #128]	@ (80044d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8004458:	f000 ff60 	bl	800531c <__assert_func>
            return buffer[pos];
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	8a92      	ldrh	r2, [r2, #20]
 8004460:	4611      	mov	r1, r2
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	4613      	mov	r3, r2
 800446c:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	8adb      	ldrh	r3, [r3, #22]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d806      	bhi.n	8004484 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8004476:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8004478:	4a1b      	ldr	r2, [pc, #108]	@ (80044e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800447a:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800447e:	4816      	ldr	r0, [pc, #88]	@ (80044d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8004480:	f000 ff4c 	bl	800531c <__assert_func>
            const uint16_t index = pos + 1;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	8a9b      	ldrh	r3, [r3, #20]
 8004488:	3301      	adds	r3, #1
 800448a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800448c:	89bb      	ldrh	r3, [r7, #12]
 800448e:	2b09      	cmp	r3, #9
 8004490:	d801      	bhi.n	8004496 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8004492:	89bb      	ldrh	r3, [r7, #12]
 8004494:	e000      	b.n	8004498 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8004496:	2300      	movs	r3, #0
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	89f9      	ldrh	r1, [r7, #14]
 800449c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80044a0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3322      	adds	r3, #34	@ 0x22
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	f640 133f 	movw	r3, #2367	@ 0x93f
 80044ac:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	8a9b      	ldrh	r3, [r3, #20]
 80044b2:	4619      	mov	r1, r3
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	8afa      	ldrh	r2, [r7, #22]
 80044b8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80044bc:	bf00      	nop
        }
    }
    return getNextChar();
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fde0 	bl	8005084 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80044c4:	4603      	mov	r3, r0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3728      	adds	r7, #40	@ 0x28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	0800633c 	.word	0x0800633c
 80044d4:	08006348 	.word	0x08006348
 80044d8:	080063f4 	.word	0x080063f4
 80044dc:	0800643c 	.word	0x0800643c
 80044e0:	0800644c 	.word	0x0800644c
 80044e4:	08006520 	.word	0x08006520
 80044e8:	0800652c 	.word	0x0800652c

080044ec <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fd8e 	bl	8005016 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d113      	bne.n	800453c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800451a:	4293      	cmp	r3, r2
 800451c:	d10e      	bne.n	800453c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800451e:	f7ff fe3d 	bl	800419c <_Z23getFont_verdana_20_4bppv>
 8004522:	4603      	mov	r3, r0
};
 8004524:	4a07      	ldr	r2, [pc, #28]	@ (8004544 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004526:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8004528:	f7ff fe92 	bl	8004250 <_Z23getFont_verdana_40_4bppv>
 800452c:	4603      	mov	r3, r0
};
 800452e:	4a05      	ldr	r2, [pc, #20]	@ (8004544 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004530:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8004532:	f7ff fdd9 	bl	80040e8 <_Z23getFont_verdana_10_4bppv>
 8004536:	4603      	mov	r3, r0
};
 8004538:	4a02      	ldr	r2, [pc, #8]	@ (8004544 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800453a:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20013afc 	.word	0x20013afc

08004548 <_GLOBAL__sub_I_touchgfx_fonts>:
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
 800454c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004550:	2001      	movs	r0, #1
 8004552:	f7ff ffd7 	bl	8004504 <_Z41__static_initialization_and_destruction_0ii>
 8004556:	bd80      	pop	{r7, pc}

08004558 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8004558:	4b01      	ldr	r3, [pc, #4]	@ (8004560 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	4770      	bx	lr
 8004560:	20013b08 	.word	0x20013b08

08004564 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8004566:	2200      	movs	r2, #0
 8004568:	801a      	strh	r2, [r3, #0]
 800456a:	805a      	strh	r2, [r3, #2]
 800456c:	809a      	strh	r2, [r3, #4]
 800456e:	80da      	strh	r2, [r3, #6]
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20013b0c 	.word	0x20013b0c

08004578 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8004578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457c:	b09d      	sub	sp, #116	@ 0x74
 800457e:	4606      	mov	r6, r0
 8004580:	4614      	mov	r4, r2
 8004582:	468a      	mov	sl, r1
 8004584:	a803      	add	r0, sp, #12
 8004586:	461d      	mov	r5, r3
 8004588:	f000 f9b4 	bl	80048f4 <_ZN8touchgfx12TextProviderC1Ev>
 800458c:	6833      	ldr	r3, [r6, #0]
 800458e:	4630      	mov	r0, r6
 8004590:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8004594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004596:	4798      	blx	r3
 8004598:	6833      	ldr	r3, [r6, #0]
 800459a:	4607      	mov	r7, r0
 800459c:	4630      	mov	r0, r6
 800459e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a0:	4798      	blx	r3
 80045a2:	462a      	mov	r2, r5
 80045a4:	2500      	movs	r5, #0
 80045a6:	4621      	mov	r1, r4
 80045a8:	9000      	str	r0, [sp, #0]
 80045aa:	463b      	mov	r3, r7
 80045ac:	462c      	mov	r4, r5
 80045ae:	46a9      	mov	r9, r5
 80045b0:	46a8      	mov	r8, r5
 80045b2:	a803      	add	r0, sp, #12
 80045b4:	f000 f9f1 	bl	800499a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80045b8:	2300      	movs	r3, #0
 80045ba:	9302      	str	r3, [sp, #8]
 80045bc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80045c0:	429c      	cmp	r4, r3
 80045c2:	d002      	beq.n	80045ca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80045c4:	455c      	cmp	r4, fp
 80045c6:	bf18      	it	ne
 80045c8:	4625      	movne	r5, r4
 80045ca:	ab02      	add	r3, sp, #8
 80045cc:	4632      	mov	r2, r6
 80045ce:	4651      	mov	r1, sl
 80045d0:	a803      	add	r0, sp, #12
 80045d2:	f000 fcd7 	bl	8004f84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80045d6:	4604      	mov	r4, r0
 80045d8:	b108      	cbz	r0, 80045de <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80045da:	280a      	cmp	r0, #10
 80045dc:	d10a      	bne.n	80045f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80045de:	45c1      	cmp	r9, r8
 80045e0:	bf38      	it	cc
 80045e2:	46c1      	movcc	r9, r8
 80045e4:	f04f 0800 	mov.w	r8, #0
 80045e8:	2c00      	cmp	r4, #0
 80045ea:	d1e5      	bne.n	80045b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80045ec:	4648      	mov	r0, r9
 80045ee:	b01d      	add	sp, #116	@ 0x74
 80045f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f4:	9a02      	ldr	r2, [sp, #8]
 80045f6:	2a00      	cmp	r2, #0
 80045f8:	d0de      	beq.n	80045b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80045fa:	7b57      	ldrb	r7, [r2, #13]
 80045fc:	4629      	mov	r1, r5
 80045fe:	6833      	ldr	r3, [r6, #0]
 8004600:	007f      	lsls	r7, r7, #1
 8004602:	8894      	ldrh	r4, [r2, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004606:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800460a:	7a97      	ldrb	r7, [r2, #10]
 800460c:	4307      	orrs	r7, r0
 800460e:	4630      	mov	r0, r6
 8004610:	4798      	blx	r3
 8004612:	4438      	add	r0, r7
 8004614:	4480      	add	r8, r0
 8004616:	fa1f f888 	uxth.w	r8, r8
 800461a:	e7e5      	b.n	80045e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800461c <_ZNK8touchgfx4Font12getCharWidthEt>:
 800461c:	b508      	push	{r3, lr}
 800461e:	6803      	ldr	r3, [r0, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	4798      	blx	r3
 8004624:	b128      	cbz	r0, 8004632 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8004626:	7b43      	ldrb	r3, [r0, #13]
 8004628:	7a80      	ldrb	r0, [r0, #10]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004630:	4318      	orrs	r0, r3
 8004632:	bd08      	pop	{r3, pc}

08004634 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8004634:	b40e      	push	{r1, r2, r3}
 8004636:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004638:	b09e      	sub	sp, #120	@ 0x78
 800463a:	4605      	mov	r5, r0
 800463c:	ab23      	add	r3, sp, #140	@ 0x8c
 800463e:	a805      	add	r0, sp, #20
 8004640:	f853 4b04 	ldr.w	r4, [r3], #4
 8004644:	9303      	str	r3, [sp, #12]
 8004646:	f000 f955 	bl	80048f4 <_ZN8touchgfx12TextProviderC1Ev>
 800464a:	682b      	ldr	r3, [r5, #0]
 800464c:	4628      	mov	r0, r5
 800464e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004650:	4798      	blx	r3
 8004652:	682b      	ldr	r3, [r5, #0]
 8004654:	4606      	mov	r6, r0
 8004656:	4628      	mov	r0, r5
 8004658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465a:	4798      	blx	r3
 800465c:	4633      	mov	r3, r6
 800465e:	4621      	mov	r1, r4
 8004660:	ae1e      	add	r6, sp, #120	@ 0x78
 8004662:	2400      	movs	r4, #0
 8004664:	9000      	str	r0, [sp, #0]
 8004666:	9a03      	ldr	r2, [sp, #12]
 8004668:	a805      	add	r0, sp, #20
 800466a:	f000 f996 	bl	800499a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800466e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8004672:	462a      	mov	r2, r5
 8004674:	4633      	mov	r3, r6
 8004676:	4621      	mov	r1, r4
 8004678:	a805      	add	r0, sp, #20
 800467a:	f000 fc83 	bl	8004f84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800467e:	b300      	cbz	r0, 80046c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8004680:	280a      	cmp	r0, #10
 8004682:	d01a      	beq.n	80046ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8004684:	9f04      	ldr	r7, [sp, #16]
 8004686:	b1c7      	cbz	r7, 80046ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8004688:	7b78      	ldrb	r0, [r7, #13]
 800468a:	7a3b      	ldrb	r3, [r7, #8]
 800468c:	00c1      	lsls	r1, r0, #3
 800468e:	88ea      	ldrh	r2, [r5, #6]
 8004690:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8004694:	4319      	orrs	r1, r3
 8004696:	0643      	lsls	r3, r0, #25
 8004698:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800469c:	bf48      	it	mi
 800469e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80046a2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80046a6:	bf48      	it	mi
 80046a8:	b219      	sxthmi	r1, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	4303      	orrs	r3, r0
 80046ae:	4413      	add	r3, r2
 80046b0:	1a5b      	subs	r3, r3, r1
 80046b2:	b21b      	sxth	r3, r3
 80046b4:	429c      	cmp	r4, r3
 80046b6:	bfb8      	it	lt
 80046b8:	461c      	movlt	r4, r3
 80046ba:	4633      	mov	r3, r6
 80046bc:	462a      	mov	r2, r5
 80046be:	2100      	movs	r1, #0
 80046c0:	e7da      	b.n	8004678 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80046c2:	b2a0      	uxth	r0, r4
 80046c4:	b01e      	add	sp, #120	@ 0x78
 80046c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80046ca:	b003      	add	sp, #12
 80046cc:	4770      	bx	lr

080046ce <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80046ce:	7a43      	ldrb	r3, [r0, #9]
 80046d0:	8880      	ldrh	r0, [r0, #4]
 80046d2:	4418      	add	r0, r3
 80046d4:	b280      	uxth	r0, r0
 80046d6:	4770      	bx	lr

080046d8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80046d8:	6803      	ldr	r3, [r0, #0]
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	4718      	bx	r3

080046de <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80046de:	b40e      	push	{r1, r2, r3}
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	b09d      	sub	sp, #116	@ 0x74
 80046e4:	4604      	mov	r4, r0
 80046e6:	ab21      	add	r3, sp, #132	@ 0x84
 80046e8:	a803      	add	r0, sp, #12
 80046ea:	f853 5b04 	ldr.w	r5, [r3], #4
 80046ee:	9302      	str	r3, [sp, #8]
 80046f0:	f000 f900 	bl	80048f4 <_ZN8touchgfx12TextProviderC1Ev>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	4620      	mov	r0, r4
 80046f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fa:	4798      	blx	r3
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	4606      	mov	r6, r0
 8004700:	4620      	mov	r0, r4
 8004702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004704:	2401      	movs	r4, #1
 8004706:	4798      	blx	r3
 8004708:	4633      	mov	r3, r6
 800470a:	9000      	str	r0, [sp, #0]
 800470c:	4629      	mov	r1, r5
 800470e:	9a02      	ldr	r2, [sp, #8]
 8004710:	a803      	add	r0, sp, #12
 8004712:	f000 f942 	bl	800499a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8004716:	a803      	add	r0, sp, #12
 8004718:	f000 fcb4 	bl	8005084 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800471c:	b2a3      	uxth	r3, r4
 800471e:	b138      	cbz	r0, 8004730 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8004720:	280a      	cmp	r0, #10
 8004722:	a803      	add	r0, sp, #12
 8004724:	bf04      	itt	eq
 8004726:	3301      	addeq	r3, #1
 8004728:	b21c      	sxtheq	r4, r3
 800472a:	f000 fcab 	bl	8005084 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800472e:	e7f5      	b.n	800471c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8004730:	4618      	mov	r0, r3
 8004732:	b01d      	add	sp, #116	@ 0x74
 8004734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004738:	b003      	add	sp, #12
 800473a:	4770      	bx	lr

0800473c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800473c:	b40e      	push	{r1, r2, r3}
 800473e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004740:	b09e      	sub	sp, #120	@ 0x78
 8004742:	4604      	mov	r4, r0
 8004744:	ab23      	add	r3, sp, #140	@ 0x8c
 8004746:	a805      	add	r0, sp, #20
 8004748:	f853 5b04 	ldr.w	r5, [r3], #4
 800474c:	9303      	str	r3, [sp, #12]
 800474e:	f000 f8d1 	bl	80048f4 <_ZN8touchgfx12TextProviderC1Ev>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	4620      	mov	r0, r4
 8004756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004758:	4798      	blx	r3
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	4606      	mov	r6, r0
 800475e:	4620      	mov	r0, r4
 8004760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004762:	4798      	blx	r3
 8004764:	4633      	mov	r3, r6
 8004766:	4629      	mov	r1, r5
 8004768:	9000      	str	r0, [sp, #0]
 800476a:	9a03      	ldr	r2, [sp, #12]
 800476c:	a805      	add	r0, sp, #20
 800476e:	f000 f914 	bl	800499a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8004772:	ad1e      	add	r5, sp, #120	@ 0x78
 8004774:	2100      	movs	r1, #0
 8004776:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800477a:	4622      	mov	r2, r4
 800477c:	a805      	add	r0, sp, #20
 800477e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8004782:	462b      	mov	r3, r5
 8004784:	f000 fbfe 	bl	8004f84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8004788:	b1d8      	cbz	r0, 80047c2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800478a:	280a      	cmp	r0, #10
 800478c:	d012      	beq.n	80047b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800478e:	9804      	ldr	r0, [sp, #16]
 8004790:	b180      	cbz	r0, 80047b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8004792:	7b47      	ldrb	r7, [r0, #13]
 8004794:	88e2      	ldrh	r2, [r4, #6]
 8004796:	00fb      	lsls	r3, r7, #3
 8004798:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800479c:	7a03      	ldrb	r3, [r0, #8]
 800479e:	430b      	orrs	r3, r1
 80047a0:	0679      	lsls	r1, r7, #25
 80047a2:	bf44      	itt	mi
 80047a4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80047a8:	b21b      	sxthmi	r3, r3
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	b21b      	sxth	r3, r3
 80047ae:	429e      	cmp	r6, r3
 80047b0:	bfa8      	it	ge
 80047b2:	461e      	movge	r6, r3
 80047b4:	462b      	mov	r3, r5
 80047b6:	4622      	mov	r2, r4
 80047b8:	2100      	movs	r1, #0
 80047ba:	a805      	add	r0, sp, #20
 80047bc:	f000 fbe2 	bl	8004f84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80047c0:	e7e2      	b.n	8004788 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80047c2:	4630      	mov	r0, r6
 80047c4:	b01e      	add	sp, #120	@ 0x78
 80047c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80047ca:	b003      	add	sp, #12
 80047cc:	4770      	bx	lr
	...

080047d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80047d0:	b530      	push	{r4, r5, lr}
 80047d2:	8083      	strh	r3, [r0, #4]
 80047d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80047d8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80047dc:	80c3      	strh	r3, [r0, #6]
 80047de:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80047e2:	6141      	str	r1, [r0, #20]
 80047e4:	7203      	strb	r3, [r0, #8]
 80047e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80047ea:	8302      	strh	r2, [r0, #24]
 80047ec:	7243      	strb	r3, [r0, #9]
 80047ee:	7a83      	ldrb	r3, [r0, #10]
 80047f0:	f365 0306 	bfi	r3, r5, #0, #7
 80047f4:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80047f8:	f365 13c7 	bfi	r3, r5, #7, #1
 80047fc:	7283      	strb	r3, [r0, #10]
 80047fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004802:	72c3      	strb	r3, [r0, #11]
 8004804:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8004808:	7303      	strb	r3, [r0, #12]
 800480a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800480e:	81c3      	strh	r3, [r0, #14]
 8004810:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8004814:	8203      	strh	r3, [r0, #16]
 8004816:	4b01      	ldr	r3, [pc, #4]	@ (800481c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8004818:	6003      	str	r3, [r0, #0]
 800481a:	bd30      	pop	{r4, r5, pc}
 800481c:	080066cc 	.word	0x080066cc

08004820 <_ZNK8touchgfx9ConstFont4findEt>:
 8004820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004822:	6944      	ldr	r4, [r0, #20]
 8004824:	b3bc      	cbz	r4, 8004896 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8004826:	88a3      	ldrh	r3, [r4, #4]
 8004828:	8b02      	ldrh	r2, [r0, #24]
 800482a:	1acb      	subs	r3, r1, r3
 800482c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004830:	d431      	bmi.n	8004896 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8004832:	4293      	cmp	r3, r2
 8004834:	dd0c      	ble.n	8004850 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8004836:	230e      	movs	r3, #14
 8004838:	fb03 4302 	mla	r3, r3, r2, r4
 800483c:	889b      	ldrh	r3, [r3, #4]
 800483e:	1a5b      	subs	r3, r3, r1
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	429a      	cmp	r2, r3
 8004844:	db27      	blt.n	8004896 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8004846:	2b00      	cmp	r3, #0
 8004848:	bfbc      	itt	lt
 800484a:	2302      	movlt	r3, #2
 800484c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8004850:	2500      	movs	r5, #0
 8004852:	260e      	movs	r6, #14
 8004854:	4295      	cmp	r5, r2
 8004856:	dc1e      	bgt.n	8004896 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8004858:	fb06 4003 	mla	r0, r6, r3, r4
 800485c:	8887      	ldrh	r7, [r0, #4]
 800485e:	42b9      	cmp	r1, r7
 8004860:	d01a      	beq.n	8004898 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8004862:	d20d      	bcs.n	8004880 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8004864:	1e5a      	subs	r2, r3, #1
 8004866:	4295      	cmp	r5, r2
 8004868:	dc15      	bgt.n	8004896 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800486a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800486e:	1a5b      	subs	r3, r3, r1
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	429a      	cmp	r2, r3
 8004874:	db0f      	blt.n	8004896 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8004876:	429d      	cmp	r5, r3
 8004878:	ddec      	ble.n	8004854 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800487a:	1953      	adds	r3, r2, r5
 800487c:	105b      	asrs	r3, r3, #1
 800487e:	e7e9      	b.n	8004854 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8004880:	1c5d      	adds	r5, r3, #1
 8004882:	42aa      	cmp	r2, r5
 8004884:	db07      	blt.n	8004896 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8004886:	8a43      	ldrh	r3, [r0, #18]
 8004888:	1acb      	subs	r3, r1, r3
 800488a:	442b      	add	r3, r5
 800488c:	429d      	cmp	r5, r3
 800488e:	dc02      	bgt.n	8004896 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8004890:	429a      	cmp	r2, r3
 8004892:	dadf      	bge.n	8004854 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8004894:	e7f1      	b.n	800487a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8004896:	2000      	movs	r0, #0
 8004898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800489a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800489a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489c:	4604      	mov	r4, r0
 800489e:	4617      	mov	r7, r2
 80048a0:	461e      	mov	r6, r3
 80048a2:	b911      	cbnz	r1, 80048aa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80048a4:	2500      	movs	r5, #0
 80048a6:	4628      	mov	r0, r5
 80048a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048aa:	290a      	cmp	r1, #10
 80048ac:	d0fa      	beq.n	80048a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80048ae:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80048b2:	4291      	cmp	r1, r2
 80048b4:	d0f6      	beq.n	80048a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80048b6:	f242 020b 	movw	r2, #8203	@ 0x200b
 80048ba:	4291      	cmp	r1, r2
 80048bc:	d0f2      	beq.n	80048a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80048be:	f7ff ffaf 	bl	8004820 <_ZNK8touchgfx9ConstFont4findEt>
 80048c2:	4605      	mov	r5, r0
 80048c4:	b950      	cbnz	r0, 80048dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	4620      	mov	r0, r4
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	4798      	blx	r3
 80048ce:	4601      	mov	r1, r0
 80048d0:	4620      	mov	r0, r4
 80048d2:	f7ff ffa5 	bl	8004820 <_ZNK8touchgfx9ConstFont4findEt>
 80048d6:	4605      	mov	r5, r0
 80048d8:	2800      	cmp	r0, #0
 80048da:	d0e3      	beq.n	80048a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	4629      	mov	r1, r5
 80048e0:	4620      	mov	r0, r4
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	4798      	blx	r3
 80048e6:	6038      	str	r0, [r7, #0]
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	4620      	mov	r0, r4
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	4798      	blx	r3
 80048f0:	7030      	strb	r0, [r6, #0]
 80048f2:	e7d8      	b.n	80048a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080048f4 <_ZN8touchgfx12TextProviderC1Ev>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	2500      	movs	r5, #0
 80048f8:	2302      	movs	r3, #2
 80048fa:	4604      	mov	r4, r0
 80048fc:	220e      	movs	r2, #14
 80048fe:	7403      	strb	r3, [r0, #16]
 8004900:	4629      	mov	r1, r5
 8004902:	6145      	str	r5, [r0, #20]
 8004904:	7605      	strb	r5, [r0, #24]
 8004906:	83c5      	strh	r5, [r0, #30]
 8004908:	8405      	strh	r5, [r0, #32]
 800490a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800490c:	8705      	strh	r5, [r0, #56]	@ 0x38
 800490e:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8004910:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8004914:	e9c0 5500 	strd	r5, r5, [r0]
 8004918:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800491c:	304c      	adds	r0, #76	@ 0x4c
 800491e:	f000 fef6 	bl	800570e <memset>
 8004922:	2301      	movs	r3, #1
 8004924:	4620      	mov	r0, r4
 8004926:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800492a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800492e:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8004932:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8004936:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800493a:	f7ff fdd7 	bl	80044ec <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800493e:	4620      	mov	r0, r4
 8004940:	bd38      	pop	{r3, r4, r5, pc}

08004942 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8004942:	b530      	push	{r4, r5, lr}
 8004944:	2500      	movs	r5, #0
 8004946:	2401      	movs	r4, #1
 8004948:	6843      	ldr	r3, [r0, #4]
 800494a:	b913      	cbnz	r3, 8004952 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800494c:	6803      	ldr	r3, [r0, #0]
 800494e:	b313      	cbz	r3, 8004996 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8004950:	6043      	str	r3, [r0, #4]
 8004952:	7e03      	ldrb	r3, [r0, #24]
 8004954:	b143      	cbz	r3, 8004968 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8004956:	6943      	ldr	r3, [r0, #20]
 8004958:	b12b      	cbz	r3, 8004966 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800495a:	881a      	ldrh	r2, [r3, #0]
 800495c:	b11a      	cbz	r2, 8004966 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800495e:	1c9a      	adds	r2, r3, #2
 8004960:	6142      	str	r2, [r0, #20]
 8004962:	8818      	ldrh	r0, [r3, #0]
 8004964:	bd30      	pop	{r4, r5, pc}
 8004966:	7605      	strb	r5, [r0, #24]
 8004968:	6843      	ldr	r3, [r0, #4]
 800496a:	8819      	ldrh	r1, [r3, #0]
 800496c:	b199      	cbz	r1, 8004996 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800496e:	1c9a      	adds	r2, r3, #2
 8004970:	2902      	cmp	r1, #2
 8004972:	6042      	str	r2, [r0, #4]
 8004974:	d1f5      	bne.n	8004962 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8004976:	7c03      	ldrb	r3, [r0, #16]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d8e5      	bhi.n	8004948 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	3302      	adds	r3, #2
 8004980:	7402      	strb	r2, [r0, #16]
 8004982:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004986:	6143      	str	r3, [r0, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0dd      	beq.n	8004948 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0da      	beq.n	8004948 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8004992:	7604      	strb	r4, [r0, #24]
 8004994:	e7d8      	b.n	8004948 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8004996:	2000      	movs	r0, #0
 8004998:	e7e4      	b.n	8004964 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800499a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800499a:	6001      	str	r1, [r0, #0]
 800499c:	2100      	movs	r1, #0
 800499e:	b430      	push	{r4, r5}
 80049a0:	6041      	str	r1, [r0, #4]
 80049a2:	6815      	ldr	r5, [r2, #0]
 80049a4:	6085      	str	r5, [r0, #8]
 80049a6:	6852      	ldr	r2, [r2, #4]
 80049a8:	6443      	str	r3, [r0, #68]	@ 0x44
 80049aa:	9b02      	ldr	r3, [sp, #8]
 80049ac:	60c2      	str	r2, [r0, #12]
 80049ae:	7401      	strb	r1, [r0, #16]
 80049b0:	6141      	str	r1, [r0, #20]
 80049b2:	7601      	strb	r1, [r0, #24]
 80049b4:	8701      	strh	r1, [r0, #56]	@ 0x38
 80049b6:	8401      	strh	r1, [r0, #32]
 80049b8:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80049bc:	6483      	str	r3, [r0, #72]	@ 0x48
 80049be:	bc30      	pop	{r4, r5}
 80049c0:	f7ff bd94 	b.w	80044ec <_ZN8touchgfx12TextProvider18initializeInternalEv>

080049c4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80049c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c6:	4605      	mov	r5, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	b1f1      	cbz	r1, 8004a0a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80049cc:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80049d0:	460b      	mov	r3, r1
 80049d2:	f101 0708 	add.w	r7, r1, #8
 80049d6:	4622      	mov	r2, r4
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	3308      	adds	r3, #8
 80049dc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80049e0:	4626      	mov	r6, r4
 80049e2:	42bb      	cmp	r3, r7
 80049e4:	c603      	stmia	r6!, {r0, r1}
 80049e6:	4634      	mov	r4, r6
 80049e8:	d1f6      	bne.n	80049d8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	6030      	str	r0, [r6, #0]
 80049ee:	4610      	mov	r0, r2
 80049f0:	889b      	ldrh	r3, [r3, #4]
 80049f2:	80b3      	strh	r3, [r6, #4]
 80049f4:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80049f8:	015b      	lsls	r3, r3, #5
 80049fa:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80049fe:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8004a02:	430b      	orrs	r3, r1
 8004a04:	425b      	negs	r3, r3
 8004a06:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8004a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a0c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	460c      	mov	r4, r1
 8004a10:	6811      	ldr	r1, [r2, #0]
 8004a12:	4610      	mov	r0, r2
 8004a14:	68cd      	ldr	r5, [r1, #12]
 8004a16:	4619      	mov	r1, r3
 8004a18:	47a8      	blx	r5
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	bf08      	it	eq
 8004a1e:	4620      	moveq	r0, r4
 8004a20:	bd38      	pop	{r3, r4, r5, pc}
	...

08004a24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8004a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a28:	468c      	mov	ip, r1
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4615      	mov	r5, r2
 8004a2e:	b942      	cbnz	r2, 8004a42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8004a30:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8004a34:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8004a38:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a42:	7b50      	ldrb	r0, [r2, #13]
 8004a44:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8004a48:	8893      	ldrh	r3, [r2, #4]
 8004a4a:	0106      	lsls	r6, r0, #4
 8004a4c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8004a50:	79ee      	ldrb	r6, [r5, #7]
 8004a52:	4316      	orrs	r6, r2
 8004a54:	185a      	adds	r2, r3, r1
 8004a56:	b291      	uxth	r1, r2
 8004a58:	b2b7      	uxth	r7, r6
 8004a5a:	291d      	cmp	r1, #29
 8004a5c:	d87f      	bhi.n	8004b5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8004a5e:	2201      	movs	r2, #1
 8004a60:	10f6      	asrs	r6, r6, #3
 8004a62:	408a      	lsls	r2, r1
 8004a64:	4974      	ldr	r1, [pc, #464]	@ (8004c38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8004a66:	420a      	tst	r2, r1
 8004a68:	d12e      	bne.n	8004ac8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8004a6a:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8004a6e:	d076      	beq.n	8004b5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8004a70:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8004a74:	462b      	mov	r3, r5
 8004a76:	f105 0e08 	add.w	lr, r5, #8
 8004a7a:	4615      	mov	r5, r2
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8004a84:	4694      	mov	ip, r2
 8004a86:	4573      	cmp	r3, lr
 8004a88:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004a8c:	4662      	mov	r2, ip
 8004a8e:	d1f5      	bne.n	8004a7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	f8cc 0000 	str.w	r0, [ip]
 8004a96:	889b      	ldrh	r3, [r3, #4]
 8004a98:	f8ac 3004 	strh.w	r3, [ip, #4]
 8004a9c:	b2b3      	uxth	r3, r6
 8004a9e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8004aa2:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 8004aa6:	1aca      	subs	r2, r1, r3
 8004aa8:	1bcf      	subs	r7, r1, r7
 8004aaa:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8004aae:	b292      	uxth	r2, r2
 8004ab0:	1afb      	subs	r3, r7, r3
 8004ab2:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8004ab6:	10d2      	asrs	r2, r2, #3
 8004ab8:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8004abc:	4302      	orrs	r2, r0
 8004abe:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8004ac2:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8004ac6:	e7b9      	b.n	8004a3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8004ac8:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8004acc:	462b      	mov	r3, r5
 8004ace:	f105 0808 	add.w	r8, r5, #8
 8004ad2:	4615      	mov	r5, r2
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8004adc:	4696      	mov	lr, r2
 8004ade:	4543      	cmp	r3, r8
 8004ae0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8004ae4:	4672      	mov	r2, lr
 8004ae6:	d1f5      	bne.n	8004ad4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	f8ce 0000 	str.w	r0, [lr]
 8004aee:	889b      	ldrh	r3, [r3, #4]
 8004af0:	f8ae 3004 	strh.w	r3, [lr, #4]
 8004af4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004af6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004afa:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8004afc:	f640 6333 	movw	r3, #3635	@ 0xe33
 8004b00:	4299      	cmp	r1, r3
 8004b02:	d111      	bne.n	8004b28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8004b04:	f8dc 3000 	ldr.w	r3, [ip]
 8004b08:	4660      	mov	r0, ip
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4798      	blx	r3
 8004b0e:	7b41      	ldrb	r1, [r0, #13]
 8004b10:	00cb      	lsls	r3, r1, #3
 8004b12:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004b16:	7a03      	ldrb	r3, [r0, #8]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	064a      	lsls	r2, r1, #25
 8004b1c:	bf44      	itt	mi
 8004b1e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8004b22:	b21b      	sxthmi	r3, r3
 8004b24:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8004b28:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8004b2c:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8004b30:	443b      	add	r3, r7
 8004b32:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b36:	4433      	add	r3, r6
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8004b3e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8004b42:	10db      	asrs	r3, r3, #3
 8004b44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8004b4e:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8004b52:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8004b5c:	e76e      	b.n	8004a3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8004b5e:	f023 0204 	bic.w	r2, r3, #4
 8004b62:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8004b66:	428a      	cmp	r2, r1
 8004b68:	d003      	beq.n	8004b72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8004b6a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d120      	bne.n	8004bb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 8004b72:	3b01      	subs	r3, #1
 8004b74:	4662      	mov	r2, ip
 8004b76:	4629      	mov	r1, r5
 8004b78:	4620      	mov	r0, r4
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f7ff ff46 	bl	8004a0c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8004b80:	7b41      	ldrb	r1, [r0, #13]
 8004b82:	00cb      	lsls	r3, r1, #3
 8004b84:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004b88:	7a03      	ldrb	r3, [r0, #8]
 8004b8a:	0648      	lsls	r0, r1, #25
 8004b8c:	ea43 0302 	orr.w	r3, r3, r2
 8004b90:	bf44      	itt	mi
 8004b92:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8004b96:	b21b      	sxthmi	r3, r3
 8004b98:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8004b9c:	7b6b      	ldrb	r3, [r5, #13]
 8004b9e:	7aaa      	ldrb	r2, [r5, #10]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	115a      	asrs	r2, r3, #5
 8004baa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8004bae:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8004bb2:	e032      	b.n	8004c1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8004bb4:	00c2      	lsls	r2, r0, #3
 8004bb6:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8004bba:	7a2a      	ldrb	r2, [r5, #8]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	0641      	lsls	r1, r0, #25
 8004bc0:	f640 6109 	movw	r1, #3593	@ 0xe09
 8004bc4:	bf44      	itt	mi
 8004bc6:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8004bca:	b212      	sxthmi	r2, r2
 8004bcc:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8004bd0:	f023 0210 	bic.w	r2, r3, #16
 8004bd4:	428a      	cmp	r2, r1
 8004bd6:	d003      	beq.n	8004be0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 8004bd8:	f640 6213 	movw	r2, #3603	@ 0xe13
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d129      	bne.n	8004c34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 8004be0:	7b6e      	ldrb	r6, [r5, #13]
 8004be2:	4629      	mov	r1, r5
 8004be4:	4620      	mov	r0, r4
 8004be6:	0076      	lsls	r6, r6, #1
 8004be8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8004bec:	7aae      	ldrb	r6, [r5, #10]
 8004bee:	4316      	orrs	r6, r2
 8004bf0:	f640 6213 	movw	r2, #3603	@ 0xe13
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	4662      	mov	r2, ip
 8004bf8:	bf16      	itet	ne
 8004bfa:	f103 33ff 	addne.w	r3, r3, #4294967295
 8004bfe:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8004c02:	b29b      	uxthne	r3, r3
 8004c04:	f7ff ff02 	bl	8004a0c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8004c08:	7b43      	ldrb	r3, [r0, #13]
 8004c0a:	7a82      	ldrb	r2, [r0, #10]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c12:	4313      	orrs	r3, r2
 8004c14:	1af6      	subs	r6, r6, r3
 8004c16:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8004c1a:	7b69      	ldrb	r1, [r5, #13]
 8004c1c:	00cb      	lsls	r3, r1, #3
 8004c1e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004c22:	7a2b      	ldrb	r3, [r5, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	064a      	lsls	r2, r1, #25
 8004c28:	bf44      	itt	mi
 8004c2a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8004c2e:	b21b      	sxthmi	r3, r3
 8004c30:	1bdb      	subs	r3, r3, r7
 8004c32:	e746      	b.n	8004ac2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8004c34:	2300      	movs	r3, #0
 8004c36:	e7ba      	b.n	8004bae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 8004c38:	3fc00079 	.word	0x3fc00079

08004c3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8004c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c40:	4604      	mov	r4, r0
 8004c42:	b942      	cbnz	r2, 8004c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8004c44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c48:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8004c4c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8004c50:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8004c54:	e047      	b.n	8004ce6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8004c56:	7b51      	ldrb	r1, [r2, #13]
 8004c58:	8893      	ldrh	r3, [r2, #4]
 8004c5a:	010d      	lsls	r5, r1, #4
 8004c5c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8004c60:	79d5      	ldrb	r5, [r2, #7]
 8004c62:	4305      	orrs	r5, r0
 8004c64:	2d04      	cmp	r5, #4
 8004c66:	bfcc      	ite	gt
 8004c68:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8004c6c:	f04f 0e01 	movle.w	lr, #1
 8004c70:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8004c74:	f200 80ab 	bhi.w	8004dce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8004c78:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8004c7c:	4283      	cmp	r3, r0
 8004c7e:	d216      	bcs.n	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004c80:	f240 605b 	movw	r0, #1627	@ 0x65b
 8004c84:	4283      	cmp	r3, r0
 8004c86:	d859      	bhi.n	8004d3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8004c88:	f240 6057 	movw	r0, #1623	@ 0x657
 8004c8c:	4283      	cmp	r3, r0
 8004c8e:	d20e      	bcs.n	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004c90:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8004c94:	d24a      	bcs.n	8004d2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8004c96:	f240 604e 	movw	r0, #1614	@ 0x64e
 8004c9a:	4283      	cmp	r3, r0
 8004c9c:	d207      	bcs.n	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004c9e:	f240 601a 	movw	r0, #1562	@ 0x61a
 8004ca2:	4283      	cmp	r3, r0
 8004ca4:	d02a      	beq.n	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004ca6:	d821      	bhi.n	8004cec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8004ca8:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8004cac:	d35b      	bcc.n	8004d66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8004cae:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8004cb2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004cb6:	f040 80d0 	bne.w	8004e5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8004cba:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8004cbe:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8004cc2:	f040 80ca 	bne.w	8004e5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8004cc6:	00cb      	lsls	r3, r1, #3
 8004cc8:	0649      	lsls	r1, r1, #25
 8004cca:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8004cce:	7a13      	ldrb	r3, [r2, #8]
 8004cd0:	ea43 0300 	orr.w	r3, r3, r0
 8004cd4:	bf44      	itt	mi
 8004cd6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8004cda:	b21b      	sxthmi	r3, r3
 8004cdc:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8004ce0:	1b5d      	subs	r5, r3, r5
 8004ce2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cec:	f240 604b 	movw	r0, #1611	@ 0x64b
 8004cf0:	4283      	cmp	r3, r0
 8004cf2:	d338      	bcc.n	8004d66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8004cf4:	f240 604c 	movw	r0, #1612	@ 0x64c
 8004cf8:	4283      	cmp	r3, r0
 8004cfa:	d9d8      	bls.n	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004cfc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8004d00:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8004d04:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8004d08:	f040 80f3 	bne.w	8004ef2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8004d0c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004d10:	f040 80ef 	bne.w	8004ef2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8004d14:	00cb      	lsls	r3, r1, #3
 8004d16:	064e      	lsls	r6, r1, #25
 8004d18:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8004d1c:	7a13      	ldrb	r3, [r2, #8]
 8004d1e:	ea43 0300 	orr.w	r3, r3, r0
 8004d22:	bf44      	itt	mi
 8004d24:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8004d28:	b21b      	sxthmi	r3, r3
 8004d2a:	e7d9      	b.n	8004ce0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8004d2c:	f240 6054 	movw	r0, #1620	@ 0x654
 8004d30:	4283      	cmp	r3, r0
 8004d32:	d8e3      	bhi.n	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004d34:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8004d38:	d9e0      	bls.n	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004d3a:	e7b8      	b.n	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004d3c:	f240 6074 	movw	r0, #1652	@ 0x674
 8004d40:	4283      	cmp	r3, r0
 8004d42:	d0b4      	beq.n	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004d44:	d82d      	bhi.n	8004da2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8004d46:	f240 605e 	movw	r0, #1630	@ 0x65e
 8004d4a:	4283      	cmp	r3, r0
 8004d4c:	d804      	bhi.n	8004d58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8004d4e:	f240 605d 	movw	r0, #1629	@ 0x65d
 8004d52:	4283      	cmp	r3, r0
 8004d54:	d3d2      	bcc.n	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004d56:	e7aa      	b.n	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004d58:	f240 605f 	movw	r0, #1631	@ 0x65f
 8004d5c:	4283      	cmp	r3, r0
 8004d5e:	d0cd      	beq.n	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004d60:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8004d64:	d0a3      	beq.n	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004d66:	00cb      	lsls	r3, r1, #3
 8004d68:	0649      	lsls	r1, r1, #25
 8004d6a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8004d6e:	7a13      	ldrb	r3, [r2, #8]
 8004d70:	ea43 0300 	orr.w	r3, r3, r0
 8004d74:	bf44      	itt	mi
 8004d76:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8004d7a:	b21b      	sxthmi	r3, r3
 8004d7c:	1b5d      	subs	r5, r3, r5
 8004d7e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8004d82:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8004d86:	7b53      	ldrb	r3, [r2, #13]
 8004d88:	015b      	lsls	r3, r3, #5
 8004d8a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8004d8e:	7993      	ldrb	r3, [r2, #6]
 8004d90:	430b      	orrs	r3, r1
 8004d92:	2105      	movs	r1, #5
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	fb93 f3f1 	sdiv	r3, r3, r1
 8004d9a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8004d9e:	440b      	add	r3, r1
 8004da0:	e756      	b.n	8004c50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8004da2:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8004da6:	4283      	cmp	r3, r0
 8004da8:	d809      	bhi.n	8004dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8004daa:	f240 60df 	movw	r0, #1759	@ 0x6df
 8004dae:	4283      	cmp	r3, r0
 8004db0:	f4bf af7d 	bcs.w	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004db4:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	d8d4      	bhi.n	8004d66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8004dbc:	e777      	b.n	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004dbe:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8004dc2:	4283      	cmp	r3, r0
 8004dc4:	d09a      	beq.n	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004dc6:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8004dca:	4283      	cmp	r3, r0
 8004dcc:	e7ca      	b.n	8004d64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8004dce:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8004dd2:	d22b      	bcs.n	8004e2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8004dd4:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8004dd8:	4283      	cmp	r3, r0
 8004dda:	d28f      	bcs.n	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004ddc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8004de0:	4283      	cmp	r3, r0
 8004de2:	d816      	bhi.n	8004e12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8004de4:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8004de8:	4283      	cmp	r3, r0
 8004dea:	f4bf af60 	bcs.w	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004dee:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8004df2:	4283      	cmp	r3, r0
 8004df4:	d80a      	bhi.n	8004e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8004df6:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8004dfa:	4283      	cmp	r3, r0
 8004dfc:	f4bf af57 	bcs.w	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004e00:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8004e04:	4283      	cmp	r3, r0
 8004e06:	f43f af79 	beq.w	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004e0a:	e7ac      	b.n	8004d66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8004e0c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8004e10:	e7f8      	b.n	8004e04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8004e12:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8004e16:	4283      	cmp	r3, r0
 8004e18:	d802      	bhi.n	8004e20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8004e1a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8004e1e:	e798      	b.n	8004d52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8004e20:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8004e24:	4283      	cmp	r3, r0
 8004e26:	f47f af42 	bne.w	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004e2a:	e767      	b.n	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004e2c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8004e30:	4283      	cmp	r3, r0
 8004e32:	f43f af63 	beq.w	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004e36:	d802      	bhi.n	8004e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8004e38:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8004e3c:	e7f2      	b.n	8004e24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8004e3e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8004e42:	4283      	cmp	r3, r0
 8004e44:	d805      	bhi.n	8004e52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8004e46:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8004e4a:	4283      	cmp	r3, r0
 8004e4c:	f4ff af2f 	bcc.w	8004cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8004e50:	e754      	b.n	8004cfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8004e52:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8004e56:	4283      	cmp	r3, r0
 8004e58:	e7af      	b.n	8004dba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8004e5a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8004e5e:	4617      	mov	r7, r2
 8004e60:	f102 0808 	add.w	r8, r2, #8
 8004e64:	4666      	mov	r6, ip
 8004e66:	6838      	ldr	r0, [r7, #0]
 8004e68:	3708      	adds	r7, #8
 8004e6a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8004e6e:	46e6      	mov	lr, ip
 8004e70:	4547      	cmp	r7, r8
 8004e72:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8004e76:	46f4      	mov	ip, lr
 8004e78:	d1f5      	bne.n	8004e66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8004e7a:	6838      	ldr	r0, [r7, #0]
 8004e7c:	f8ce 0000 	str.w	r0, [lr]
 8004e80:	88b9      	ldrh	r1, [r7, #4]
 8004e82:	f8ae 1004 	strh.w	r1, [lr, #4]
 8004e86:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8004e8a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8004e8e:	d009      	beq.n	8004ea4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8004e90:	7b51      	ldrb	r1, [r2, #13]
 8004e92:	7992      	ldrb	r2, [r2, #6]
 8004e94:	0149      	lsls	r1, r1, #5
 8004e96:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8004e9a:	4311      	orrs	r1, r2
 8004e9c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8004ea0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8004ea4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004ea8:	b2ad      	uxth	r5, r5
 8004eaa:	d00d      	beq.n	8004ec8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8004eac:	442b      	add	r3, r5
 8004eae:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004eb8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8004ebc:	10db      	asrs	r3, r3, #3
 8004ebe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8004ec8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8004ecc:	00cb      	lsls	r3, r1, #3
 8004ece:	064f      	lsls	r7, r1, #25
 8004ed0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004ed4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8004ed8:	ea43 0302 	orr.w	r3, r3, r2
 8004edc:	bf44      	itt	mi
 8004ede:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8004ee2:	b21b      	sxthmi	r3, r3
 8004ee4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8004ee8:	1b5b      	subs	r3, r3, r5
 8004eea:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8004eee:	4632      	mov	r2, r6
 8004ef0:	e6f9      	b.n	8004ce6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8004ef2:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8004ef6:	4617      	mov	r7, r2
 8004ef8:	f102 0908 	add.w	r9, r2, #8
 8004efc:	4666      	mov	r6, ip
 8004efe:	6838      	ldr	r0, [r7, #0]
 8004f00:	3708      	adds	r7, #8
 8004f02:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8004f06:	46e0      	mov	r8, ip
 8004f08:	454f      	cmp	r7, r9
 8004f0a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8004f0e:	46c4      	mov	ip, r8
 8004f10:	d1f5      	bne.n	8004efe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8004f12:	6838      	ldr	r0, [r7, #0]
 8004f14:	f8c8 0000 	str.w	r0, [r8]
 8004f18:	88b9      	ldrh	r1, [r7, #4]
 8004f1a:	f8a8 1004 	strh.w	r1, [r8, #4]
 8004f1e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8004f22:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8004f26:	d009      	beq.n	8004f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8004f28:	7b51      	ldrb	r1, [r2, #13]
 8004f2a:	7992      	ldrb	r2, [r2, #6]
 8004f2c:	0149      	lsls	r1, r1, #5
 8004f2e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8004f32:	4311      	orrs	r1, r2
 8004f34:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8004f38:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8004f3c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004f40:	d00e      	beq.n	8004f60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8004f42:	eba3 030e 	sub.w	r3, r3, lr
 8004f46:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f50:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8004f54:	10db      	asrs	r3, r3, #3
 8004f56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8004f60:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8004f64:	00cb      	lsls	r3, r1, #3
 8004f66:	0648      	lsls	r0, r1, #25
 8004f68:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004f6c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8004f70:	ea43 0302 	orr.w	r3, r3, r2
 8004f74:	bf44      	itt	mi
 8004f76:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8004f7a:	b21b      	sxthmi	r3, r3
 8004f7c:	1b5d      	subs	r5, r3, r5
 8004f7e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8004f82:	e7b4      	b.n	8004eee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08004f84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8004f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f88:	461e      	mov	r6, r3
 8004f8a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	4617      	mov	r7, r2
 8004f90:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004f94:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8004f98:	f7ff fa02 	bl	80043a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	b918      	cbnz	r0, 8004fa8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8004fa0:	6030      	str	r0, [r6, #0]
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	4601      	mov	r1, r0
 8004fac:	4638      	mov	r0, r7
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4798      	blx	r3
 8004fb2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	6030      	str	r0, [r6, #0]
 8004fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fbe:	d213      	bcs.n	8004fe8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8004fc0:	4643      	mov	r3, r8
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f7ff fe39 	bl	8004c3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8004fca:	6030      	str	r0, [r6, #0]
 8004fcc:	6833      	ldr	r3, [r6, #0]
 8004fce:	b143      	cbz	r3, 8004fe2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8004fd0:	7b5a      	ldrb	r2, [r3, #13]
 8004fd2:	7a9b      	ldrb	r3, [r3, #10]
 8004fd4:	0052      	lsls	r2, r2, #1
 8004fd6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	bf0c      	ite	eq
 8004fde:	2301      	moveq	r3, #1
 8004fe0:	2300      	movne	r3, #0
 8004fe2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8004fe6:	e7dc      	b.n	8004fa2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8004fe8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ff0:	d804      	bhi.n	8004ffc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f7ff fd15 	bl	8004a24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8004ffa:	e7e6      	b.n	8004fca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8004ffc:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0e3      	beq.n	8004fcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8005004:	f640 1302 	movw	r3, #2306	@ 0x902
 8005008:	429d      	cmp	r5, r3
 800500a:	d1df      	bne.n	8004fcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800500c:	4601      	mov	r1, r0
 800500e:	4620      	mov	r0, r4
 8005010:	f7ff fcd8 	bl	80049c4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8005014:	e7d9      	b.n	8004fca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08005016 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8005016:	b510      	push	{r4, lr}
 8005018:	4604      	mov	r4, r0
 800501a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800501e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8005020:	b1e1      	cbz	r1, 800505c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8005022:	2b0a      	cmp	r3, #10
 8005024:	d02d      	beq.n	8005082 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8005026:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005028:	3901      	subs	r1, #1
 800502a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800502e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8005030:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8005034:	1c51      	adds	r1, r2, #1
 8005036:	b289      	uxth	r1, r1
 8005038:	2901      	cmp	r1, #1
 800503a:	bf8a      	itet	hi
 800503c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005040:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8005042:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	8722      	strh	r2, [r4, #56]	@ 0x38
 8005048:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800504a:	4413      	add	r3, r2
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b09      	cmp	r3, #9
 8005050:	bf88      	it	hi
 8005052:	3b0a      	subhi	r3, #10
 8005054:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8005058:	8458      	strh	r0, [r3, #34]	@ 0x22
 800505a:	e7de      	b.n	800501a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800505c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800505e:	2b0a      	cmp	r3, #10
 8005060:	d00f      	beq.n	8005082 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8005062:	4620      	mov	r0, r4
 8005064:	f7ff fc6d 	bl	8004942 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8005068:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	8722      	strh	r2, [r4, #56]	@ 0x38
 800506e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8005070:	4413      	add	r3, r2
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b09      	cmp	r3, #9
 8005076:	bf88      	it	hi
 8005078:	3b0a      	subhi	r3, #10
 800507a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800507e:	8458      	strh	r0, [r3, #34]	@ 0x22
 8005080:	e7ec      	b.n	800505c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8005082:	bd10      	pop	{r4, pc}

08005084 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8005088:	4604      	mov	r4, r0
 800508a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800508e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8005090:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8005092:	3a01      	subs	r2, #1
 8005094:	8702      	strh	r2, [r0, #56]	@ 0x38
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	b292      	uxth	r2, r2
 800509a:	2a09      	cmp	r2, #9
 800509c:	bf8a      	itet	hi
 800509e:	3b09      	subhi	r3, #9
 80050a0:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80050a2:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80050a4:	f7ff ffb7 	bl	8005016 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80050a8:	8c23      	ldrh	r3, [r4, #32]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	bf9c      	itt	ls
 80050ae:	3301      	addls	r3, #1
 80050b0:	8423      	strhls	r3, [r4, #32]
 80050b2:	8be3      	ldrh	r3, [r4, #30]
 80050b4:	b90b      	cbnz	r3, 80050ba <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80050b6:	2302      	movs	r3, #2
 80050b8:	83e3      	strh	r3, [r4, #30]
 80050ba:	8be3      	ldrh	r3, [r4, #30]
 80050bc:	4628      	mov	r0, r5
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	83e3      	strh	r3, [r4, #30]
 80050c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80050c8:	8365      	strh	r5, [r4, #26]
 80050ca:	bd38      	pop	{r3, r4, r5, pc}

080050cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80050cc:	428a      	cmp	r2, r1
 80050ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d2:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80050d4:	d932      	bls.n	800513c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80050d6:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80050d8:	1a54      	subs	r4, r2, r1
 80050da:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80050de:	19ee      	adds	r6, r5, r7
 80050e0:	fa1f fe84 	uxth.w	lr, r4
 80050e4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 80050e8:	3e01      	subs	r6, #1
 80050ea:	b2b4      	uxth	r4, r6
 80050ec:	eba4 090e 	sub.w	r9, r4, lr
 80050f0:	fa1f f989 	uxth.w	r9, r9
 80050f4:	2c09      	cmp	r4, #9
 80050f6:	4626      	mov	r6, r4
 80050f8:	bf88      	it	hi
 80050fa:	f1a4 060a 	subhi.w	r6, r4, #10
 80050fe:	f1bc 0f00 	cmp.w	ip, #0
 8005102:	f104 34ff 	add.w	r4, r4, #4294967295
 8005106:	bf08      	it	eq
 8005108:	f04f 0c02 	moveq.w	ip, #2
 800510c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8005110:	b2a4      	uxth	r4, r4
 8005112:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005116:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800511a:	454c      	cmp	r4, r9
 800511c:	fa1f fc8c 	uxth.w	ip, ip
 8005120:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8005124:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8005128:	d1e4      	bne.n	80050f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800512a:	eba5 050e 	sub.w	r5, r5, lr
 800512e:	eb0e 0408 	add.w	r4, lr, r8
 8005132:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8005136:	8705      	strh	r5, [r0, #56]	@ 0x38
 8005138:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800513c:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800513e:	250a      	movs	r5, #10
 8005140:	1a64      	subs	r4, r4, r1
 8005142:	4439      	add	r1, r7
 8005144:	b289      	uxth	r1, r1
 8005146:	8704      	strh	r4, [r0, #56]	@ 0x38
 8005148:	2909      	cmp	r1, #9
 800514a:	bf88      	it	hi
 800514c:	390a      	subhi	r1, #10
 800514e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8005150:	b18a      	cbz	r2, 8005176 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8005152:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8005154:	3a01      	subs	r2, #1
 8005156:	3101      	adds	r1, #1
 8005158:	b292      	uxth	r2, r2
 800515a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800515e:	8701      	strh	r1, [r0, #56]	@ 0x38
 8005160:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8005162:	b901      	cbnz	r1, 8005166 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8005164:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8005166:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8005168:	3901      	subs	r1, #1
 800516a:	b289      	uxth	r1, r1
 800516c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800516e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8005172:	844c      	strh	r4, [r1, #34]	@ 0x22
 8005174:	e7ec      	b.n	8005150 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8005176:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800517a:	f7ff bf4c 	b.w	8005016 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800517e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800517e:	b570      	push	{r4, r5, r6, lr}
 8005180:	2500      	movs	r5, #0
 8005182:	4295      	cmp	r5, r2
 8005184:	d011      	beq.n	80051aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8005186:	8bc4      	ldrh	r4, [r0, #30]
 8005188:	f831 6b02 	ldrh.w	r6, [r1], #2
 800518c:	4414      	add	r4, r2
 800518e:	3c01      	subs	r4, #1
 8005190:	1b64      	subs	r4, r4, r5
 8005192:	b2a4      	uxth	r4, r4
 8005194:	2c01      	cmp	r4, #1
 8005196:	bf88      	it	hi
 8005198:	3c02      	subhi	r4, #2
 800519a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800519e:	8b64      	ldrh	r4, [r4, #26]
 80051a0:	42b4      	cmp	r4, r6
 80051a2:	d117      	bne.n	80051d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80051a4:	3501      	adds	r5, #1
 80051a6:	b2ad      	uxth	r5, r5
 80051a8:	e7eb      	b.n	8005182 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80051aa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80051ae:	2400      	movs	r4, #0
 80051b0:	4413      	add	r3, r2
 80051b2:	b2a2      	uxth	r2, r4
 80051b4:	429a      	cmp	r2, r3
 80051b6:	da0f      	bge.n	80051d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80051b8:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80051ba:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80051be:	3401      	adds	r4, #1
 80051c0:	4432      	add	r2, r6
 80051c2:	b292      	uxth	r2, r2
 80051c4:	2a09      	cmp	r2, #9
 80051c6:	bf88      	it	hi
 80051c8:	3a0a      	subhi	r2, #10
 80051ca:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80051ce:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80051d0:	42aa      	cmp	r2, r5
 80051d2:	d0ee      	beq.n	80051b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80051d4:	2000      	movs	r0, #0
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
 80051d8:	2001      	movs	r0, #1
 80051da:	e7fc      	b.n	80051d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080051dc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80051dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	4605      	mov	r5, r0
 80051e2:	4616      	mov	r6, r2
 80051e4:	1c8c      	adds	r4, r1, #2
 80051e6:	8809      	ldrh	r1, [r1, #0]
 80051e8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80051ec:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80051f0:	42b3      	cmp	r3, r6
 80051f2:	d124      	bne.n	800523e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80051f4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80051f8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80051fc:	f001 070f 	and.w	r7, r1, #15
 8005200:	4652      	mov	r2, sl
 8005202:	f8cd 8000 	str.w	r8, [sp]
 8005206:	464b      	mov	r3, r9
 8005208:	4621      	mov	r1, r4
 800520a:	4628      	mov	r0, r5
 800520c:	f7ff ffb7 	bl	800517e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8005210:	4683      	mov	fp, r0
 8005212:	b168      	cbz	r0, 8005230 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8005214:	eb0a 0109 	add.w	r1, sl, r9
 8005218:	463a      	mov	r2, r7
 800521a:	4628      	mov	r0, r5
 800521c:	4441      	add	r1, r8
 800521e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8005222:	4649      	mov	r1, r9
 8005224:	f7ff ff52 	bl	80050cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8005228:	4658      	mov	r0, fp
 800522a:	b003      	add	sp, #12
 800522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005230:	eb07 010a 	add.w	r1, r7, sl
 8005234:	4449      	add	r1, r9
 8005236:	4441      	add	r1, r8
 8005238:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800523c:	e7d2      	b.n	80051e4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800523e:	f04f 0b00 	mov.w	fp, #0
 8005242:	e7f1      	b.n	8005228 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08005244 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	8810      	ldrh	r0, [r2, #0]
 8005248:	4298      	cmp	r0, r3
 800524a:	d817      	bhi.n	800527c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800524c:	1e48      	subs	r0, r1, #1
 800524e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8005252:	4298      	cmp	r0, r3
 8005254:	d312      	bcc.n	800527c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8005256:	2400      	movs	r4, #0
 8005258:	428c      	cmp	r4, r1
 800525a:	d20f      	bcs.n	800527c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800525c:	1860      	adds	r0, r4, r1
 800525e:	1040      	asrs	r0, r0, #1
 8005260:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8005264:	0085      	lsls	r5, r0, #2
 8005266:	42b3      	cmp	r3, r6
 8005268:	d902      	bls.n	8005270 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800526a:	3001      	adds	r0, #1
 800526c:	b284      	uxth	r4, r0
 800526e:	e7f3      	b.n	8005258 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8005270:	d201      	bcs.n	8005276 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8005272:	b281      	uxth	r1, r0
 8005274:	e7f0      	b.n	8005258 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8005276:	442a      	add	r2, r5
 8005278:	8850      	ldrh	r0, [r2, #2]
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	2000      	movs	r0, #0
 800527e:	e7fc      	b.n	800527a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08005280 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8005280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005284:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8005286:	4604      	mov	r4, r0
 8005288:	260b      	movs	r6, #11
 800528a:	886f      	ldrh	r7, [r5, #2]
 800528c:	087f      	lsrs	r7, r7, #1
 800528e:	3e01      	subs	r6, #1
 8005290:	d013      	beq.n	80052ba <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8005292:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005294:	462a      	mov	r2, r5
 8005296:	4639      	mov	r1, r7
 8005298:	4620      	mov	r0, r4
 800529a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800529e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80052a2:	4643      	mov	r3, r8
 80052a4:	f7ff ffce 	bl	8005244 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80052a8:	b138      	cbz	r0, 80052ba <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80052aa:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80052ae:	4642      	mov	r2, r8
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7ff ff93 	bl	80051dc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d1e9      	bne.n	800528e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80052ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080052be <_ZdlPvj>:
 80052be:	f000 b812 	b.w	80052e6 <_ZdlPv>

080052c2 <__cxa_guard_acquire>:
 80052c2:	6802      	ldr	r2, [r0, #0]
 80052c4:	07d2      	lsls	r2, r2, #31
 80052c6:	4603      	mov	r3, r0
 80052c8:	d405      	bmi.n	80052d6 <__cxa_guard_acquire+0x14>
 80052ca:	7842      	ldrb	r2, [r0, #1]
 80052cc:	b102      	cbz	r2, 80052d0 <__cxa_guard_acquire+0xe>
 80052ce:	deff      	udf	#255	@ 0xff
 80052d0:	2001      	movs	r0, #1
 80052d2:	7058      	strb	r0, [r3, #1]
 80052d4:	4770      	bx	lr
 80052d6:	2000      	movs	r0, #0
 80052d8:	4770      	bx	lr

080052da <__cxa_guard_release>:
 80052da:	2301      	movs	r3, #1
 80052dc:	6003      	str	r3, [r0, #0]
 80052de:	4770      	bx	lr

080052e0 <__cxa_pure_virtual>:
 80052e0:	b508      	push	{r3, lr}
 80052e2:	f000 f80f 	bl	8005304 <_ZSt9terminatev>

080052e6 <_ZdlPv>:
 80052e6:	f000 b845 	b.w	8005374 <free>

080052ea <_ZN10__cxxabiv111__terminateEPFvvE>:
 80052ea:	b508      	push	{r3, lr}
 80052ec:	4780      	blx	r0
 80052ee:	f000 f80e 	bl	800530e <abort>
	...

080052f4 <_ZSt13get_terminatev>:
 80052f4:	4b02      	ldr	r3, [pc, #8]	@ (8005300 <_ZSt13get_terminatev+0xc>)
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	f3bf 8f5b 	dmb	ish
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	2000000c 	.word	0x2000000c

08005304 <_ZSt9terminatev>:
 8005304:	b508      	push	{r3, lr}
 8005306:	f7ff fff5 	bl	80052f4 <_ZSt13get_terminatev>
 800530a:	f7ff ffee 	bl	80052ea <_ZN10__cxxabiv111__terminateEPFvvE>

0800530e <abort>:
 800530e:	b508      	push	{r3, lr}
 8005310:	2006      	movs	r0, #6
 8005312:	f000 fa2d 	bl	8005770 <raise>
 8005316:	2001      	movs	r0, #1
 8005318:	f7fb fe90 	bl	800103c <_exit>

0800531c <__assert_func>:
 800531c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800531e:	4614      	mov	r4, r2
 8005320:	461a      	mov	r2, r3
 8005322:	4b09      	ldr	r3, [pc, #36]	@ (8005348 <__assert_func+0x2c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4605      	mov	r5, r0
 8005328:	68d8      	ldr	r0, [r3, #12]
 800532a:	b954      	cbnz	r4, 8005342 <__assert_func+0x26>
 800532c:	4b07      	ldr	r3, [pc, #28]	@ (800534c <__assert_func+0x30>)
 800532e:	461c      	mov	r4, r3
 8005330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005334:	9100      	str	r1, [sp, #0]
 8005336:	462b      	mov	r3, r5
 8005338:	4905      	ldr	r1, [pc, #20]	@ (8005350 <__assert_func+0x34>)
 800533a:	f000 f975 	bl	8005628 <fiprintf>
 800533e:	f7ff ffe6 	bl	800530e <abort>
 8005342:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <__assert_func+0x38>)
 8005344:	e7f4      	b.n	8005330 <__assert_func+0x14>
 8005346:	bf00      	nop
 8005348:	2000001c 	.word	0x2000001c
 800534c:	08006767 	.word	0x08006767
 8005350:	08006739 	.word	0x08006739
 8005354:	0800672c 	.word	0x0800672c

08005358 <atexit>:
 8005358:	2300      	movs	r3, #0
 800535a:	4601      	mov	r1, r0
 800535c:	461a      	mov	r2, r3
 800535e:	4618      	mov	r0, r3
 8005360:	f000 baa6 	b.w	80058b0 <__register_exitproc>

08005364 <malloc>:
 8005364:	4b02      	ldr	r3, [pc, #8]	@ (8005370 <malloc+0xc>)
 8005366:	4601      	mov	r1, r0
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	f000 b82d 	b.w	80053c8 <_malloc_r>
 800536e:	bf00      	nop
 8005370:	2000001c 	.word	0x2000001c

08005374 <free>:
 8005374:	4b02      	ldr	r3, [pc, #8]	@ (8005380 <free+0xc>)
 8005376:	4601      	mov	r1, r0
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	f000 baf5 	b.w	8005968 <_free_r>
 800537e:	bf00      	nop
 8005380:	2000001c 	.word	0x2000001c

08005384 <sbrk_aligned>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	4e0f      	ldr	r6, [pc, #60]	@ (80053c4 <sbrk_aligned+0x40>)
 8005388:	460c      	mov	r4, r1
 800538a:	6831      	ldr	r1, [r6, #0]
 800538c:	4605      	mov	r5, r0
 800538e:	b911      	cbnz	r1, 8005396 <sbrk_aligned+0x12>
 8005390:	f000 fa3e 	bl	8005810 <_sbrk_r>
 8005394:	6030      	str	r0, [r6, #0]
 8005396:	4621      	mov	r1, r4
 8005398:	4628      	mov	r0, r5
 800539a:	f000 fa39 	bl	8005810 <_sbrk_r>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	d103      	bne.n	80053aa <sbrk_aligned+0x26>
 80053a2:	f04f 34ff 	mov.w	r4, #4294967295
 80053a6:	4620      	mov	r0, r4
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
 80053aa:	1cc4      	adds	r4, r0, #3
 80053ac:	f024 0403 	bic.w	r4, r4, #3
 80053b0:	42a0      	cmp	r0, r4
 80053b2:	d0f8      	beq.n	80053a6 <sbrk_aligned+0x22>
 80053b4:	1a21      	subs	r1, r4, r0
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 fa2a 	bl	8005810 <_sbrk_r>
 80053bc:	3001      	adds	r0, #1
 80053be:	d1f2      	bne.n	80053a6 <sbrk_aligned+0x22>
 80053c0:	e7ef      	b.n	80053a2 <sbrk_aligned+0x1e>
 80053c2:	bf00      	nop
 80053c4:	20013b14 	.word	0x20013b14

080053c8 <_malloc_r>:
 80053c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053cc:	1ccd      	adds	r5, r1, #3
 80053ce:	f025 0503 	bic.w	r5, r5, #3
 80053d2:	3508      	adds	r5, #8
 80053d4:	2d0c      	cmp	r5, #12
 80053d6:	bf38      	it	cc
 80053d8:	250c      	movcc	r5, #12
 80053da:	2d00      	cmp	r5, #0
 80053dc:	4606      	mov	r6, r0
 80053de:	db01      	blt.n	80053e4 <_malloc_r+0x1c>
 80053e0:	42a9      	cmp	r1, r5
 80053e2:	d904      	bls.n	80053ee <_malloc_r+0x26>
 80053e4:	230c      	movs	r3, #12
 80053e6:	6033      	str	r3, [r6, #0]
 80053e8:	2000      	movs	r0, #0
 80053ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054c4 <_malloc_r+0xfc>
 80053f2:	f000 f869 	bl	80054c8 <__malloc_lock>
 80053f6:	f8d8 3000 	ldr.w	r3, [r8]
 80053fa:	461c      	mov	r4, r3
 80053fc:	bb44      	cbnz	r4, 8005450 <_malloc_r+0x88>
 80053fe:	4629      	mov	r1, r5
 8005400:	4630      	mov	r0, r6
 8005402:	f7ff ffbf 	bl	8005384 <sbrk_aligned>
 8005406:	1c43      	adds	r3, r0, #1
 8005408:	4604      	mov	r4, r0
 800540a:	d158      	bne.n	80054be <_malloc_r+0xf6>
 800540c:	f8d8 4000 	ldr.w	r4, [r8]
 8005410:	4627      	mov	r7, r4
 8005412:	2f00      	cmp	r7, #0
 8005414:	d143      	bne.n	800549e <_malloc_r+0xd6>
 8005416:	2c00      	cmp	r4, #0
 8005418:	d04b      	beq.n	80054b2 <_malloc_r+0xea>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	4639      	mov	r1, r7
 800541e:	4630      	mov	r0, r6
 8005420:	eb04 0903 	add.w	r9, r4, r3
 8005424:	f000 f9f4 	bl	8005810 <_sbrk_r>
 8005428:	4581      	cmp	r9, r0
 800542a:	d142      	bne.n	80054b2 <_malloc_r+0xea>
 800542c:	6821      	ldr	r1, [r4, #0]
 800542e:	1a6d      	subs	r5, r5, r1
 8005430:	4629      	mov	r1, r5
 8005432:	4630      	mov	r0, r6
 8005434:	f7ff ffa6 	bl	8005384 <sbrk_aligned>
 8005438:	3001      	adds	r0, #1
 800543a:	d03a      	beq.n	80054b2 <_malloc_r+0xea>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	442b      	add	r3, r5
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	f8d8 3000 	ldr.w	r3, [r8]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	bb62      	cbnz	r2, 80054a4 <_malloc_r+0xdc>
 800544a:	f8c8 7000 	str.w	r7, [r8]
 800544e:	e00f      	b.n	8005470 <_malloc_r+0xa8>
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	1b52      	subs	r2, r2, r5
 8005454:	d420      	bmi.n	8005498 <_malloc_r+0xd0>
 8005456:	2a0b      	cmp	r2, #11
 8005458:	d917      	bls.n	800548a <_malloc_r+0xc2>
 800545a:	1961      	adds	r1, r4, r5
 800545c:	42a3      	cmp	r3, r4
 800545e:	6025      	str	r5, [r4, #0]
 8005460:	bf18      	it	ne
 8005462:	6059      	strne	r1, [r3, #4]
 8005464:	6863      	ldr	r3, [r4, #4]
 8005466:	bf08      	it	eq
 8005468:	f8c8 1000 	streq.w	r1, [r8]
 800546c:	5162      	str	r2, [r4, r5]
 800546e:	604b      	str	r3, [r1, #4]
 8005470:	4630      	mov	r0, r6
 8005472:	f000 f82f 	bl	80054d4 <__malloc_unlock>
 8005476:	f104 000b 	add.w	r0, r4, #11
 800547a:	1d23      	adds	r3, r4, #4
 800547c:	f020 0007 	bic.w	r0, r0, #7
 8005480:	1ac2      	subs	r2, r0, r3
 8005482:	bf1c      	itt	ne
 8005484:	1a1b      	subne	r3, r3, r0
 8005486:	50a3      	strne	r3, [r4, r2]
 8005488:	e7af      	b.n	80053ea <_malloc_r+0x22>
 800548a:	6862      	ldr	r2, [r4, #4]
 800548c:	42a3      	cmp	r3, r4
 800548e:	bf0c      	ite	eq
 8005490:	f8c8 2000 	streq.w	r2, [r8]
 8005494:	605a      	strne	r2, [r3, #4]
 8005496:	e7eb      	b.n	8005470 <_malloc_r+0xa8>
 8005498:	4623      	mov	r3, r4
 800549a:	6864      	ldr	r4, [r4, #4]
 800549c:	e7ae      	b.n	80053fc <_malloc_r+0x34>
 800549e:	463c      	mov	r4, r7
 80054a0:	687f      	ldr	r7, [r7, #4]
 80054a2:	e7b6      	b.n	8005412 <_malloc_r+0x4a>
 80054a4:	461a      	mov	r2, r3
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	42a3      	cmp	r3, r4
 80054aa:	d1fb      	bne.n	80054a4 <_malloc_r+0xdc>
 80054ac:	2300      	movs	r3, #0
 80054ae:	6053      	str	r3, [r2, #4]
 80054b0:	e7de      	b.n	8005470 <_malloc_r+0xa8>
 80054b2:	230c      	movs	r3, #12
 80054b4:	6033      	str	r3, [r6, #0]
 80054b6:	4630      	mov	r0, r6
 80054b8:	f000 f80c 	bl	80054d4 <__malloc_unlock>
 80054bc:	e794      	b.n	80053e8 <_malloc_r+0x20>
 80054be:	6005      	str	r5, [r0, #0]
 80054c0:	e7d6      	b.n	8005470 <_malloc_r+0xa8>
 80054c2:	bf00      	nop
 80054c4:	20013b18 	.word	0x20013b18

080054c8 <__malloc_lock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	@ (80054d0 <__malloc_lock+0x8>)
 80054ca:	f000 b9ee 	b.w	80058aa <__retarget_lock_acquire_recursive>
 80054ce:	bf00      	nop
 80054d0:	20013c5c 	.word	0x20013c5c

080054d4 <__malloc_unlock>:
 80054d4:	4801      	ldr	r0, [pc, #4]	@ (80054dc <__malloc_unlock+0x8>)
 80054d6:	f000 b9e9 	b.w	80058ac <__retarget_lock_release_recursive>
 80054da:	bf00      	nop
 80054dc:	20013c5c 	.word	0x20013c5c

080054e0 <std>:
 80054e0:	2300      	movs	r3, #0
 80054e2:	b510      	push	{r4, lr}
 80054e4:	4604      	mov	r4, r0
 80054e6:	e9c0 3300 	strd	r3, r3, [r0]
 80054ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ee:	6083      	str	r3, [r0, #8]
 80054f0:	8181      	strh	r1, [r0, #12]
 80054f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80054f4:	81c2      	strh	r2, [r0, #14]
 80054f6:	6183      	str	r3, [r0, #24]
 80054f8:	4619      	mov	r1, r3
 80054fa:	2208      	movs	r2, #8
 80054fc:	305c      	adds	r0, #92	@ 0x5c
 80054fe:	f000 f906 	bl	800570e <memset>
 8005502:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <std+0x58>)
 8005504:	6263      	str	r3, [r4, #36]	@ 0x24
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <std+0x5c>)
 8005508:	62a3      	str	r3, [r4, #40]	@ 0x28
 800550a:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <std+0x60>)
 800550c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800550e:	4b0d      	ldr	r3, [pc, #52]	@ (8005544 <std+0x64>)
 8005510:	6323      	str	r3, [r4, #48]	@ 0x30
 8005512:	4b0d      	ldr	r3, [pc, #52]	@ (8005548 <std+0x68>)
 8005514:	6224      	str	r4, [r4, #32]
 8005516:	429c      	cmp	r4, r3
 8005518:	d006      	beq.n	8005528 <std+0x48>
 800551a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800551e:	4294      	cmp	r4, r2
 8005520:	d002      	beq.n	8005528 <std+0x48>
 8005522:	33d0      	adds	r3, #208	@ 0xd0
 8005524:	429c      	cmp	r4, r3
 8005526:	d105      	bne.n	8005534 <std+0x54>
 8005528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800552c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005530:	f000 b9ba 	b.w	80058a8 <__retarget_lock_init_recursive>
 8005534:	bd10      	pop	{r4, pc}
 8005536:	bf00      	nop
 8005538:	08005689 	.word	0x08005689
 800553c:	080056ab 	.word	0x080056ab
 8005540:	080056e3 	.word	0x080056e3
 8005544:	08005707 	.word	0x08005707
 8005548:	20013b1c 	.word	0x20013b1c

0800554c <stdio_exit_handler>:
 800554c:	4a02      	ldr	r2, [pc, #8]	@ (8005558 <stdio_exit_handler+0xc>)
 800554e:	4903      	ldr	r1, [pc, #12]	@ (800555c <stdio_exit_handler+0x10>)
 8005550:	4803      	ldr	r0, [pc, #12]	@ (8005560 <stdio_exit_handler+0x14>)
 8005552:	f000 b87b 	b.w	800564c <_fwalk_sglue>
 8005556:	bf00      	nop
 8005558:	20000010 	.word	0x20000010
 800555c:	080060a5 	.word	0x080060a5
 8005560:	20000020 	.word	0x20000020

08005564 <cleanup_stdio>:
 8005564:	6841      	ldr	r1, [r0, #4]
 8005566:	4b0c      	ldr	r3, [pc, #48]	@ (8005598 <cleanup_stdio+0x34>)
 8005568:	4299      	cmp	r1, r3
 800556a:	b510      	push	{r4, lr}
 800556c:	4604      	mov	r4, r0
 800556e:	d001      	beq.n	8005574 <cleanup_stdio+0x10>
 8005570:	f000 fd98 	bl	80060a4 <_fflush_r>
 8005574:	68a1      	ldr	r1, [r4, #8]
 8005576:	4b09      	ldr	r3, [pc, #36]	@ (800559c <cleanup_stdio+0x38>)
 8005578:	4299      	cmp	r1, r3
 800557a:	d002      	beq.n	8005582 <cleanup_stdio+0x1e>
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fd91 	bl	80060a4 <_fflush_r>
 8005582:	68e1      	ldr	r1, [r4, #12]
 8005584:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <cleanup_stdio+0x3c>)
 8005586:	4299      	cmp	r1, r3
 8005588:	d004      	beq.n	8005594 <cleanup_stdio+0x30>
 800558a:	4620      	mov	r0, r4
 800558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005590:	f000 bd88 	b.w	80060a4 <_fflush_r>
 8005594:	bd10      	pop	{r4, pc}
 8005596:	bf00      	nop
 8005598:	20013b1c 	.word	0x20013b1c
 800559c:	20013b84 	.word	0x20013b84
 80055a0:	20013bec 	.word	0x20013bec

080055a4 <global_stdio_init.part.0>:
 80055a4:	b510      	push	{r4, lr}
 80055a6:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <global_stdio_init.part.0+0x30>)
 80055a8:	4c0b      	ldr	r4, [pc, #44]	@ (80055d8 <global_stdio_init.part.0+0x34>)
 80055aa:	4a0c      	ldr	r2, [pc, #48]	@ (80055dc <global_stdio_init.part.0+0x38>)
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	4620      	mov	r0, r4
 80055b0:	2200      	movs	r2, #0
 80055b2:	2104      	movs	r1, #4
 80055b4:	f7ff ff94 	bl	80054e0 <std>
 80055b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055bc:	2201      	movs	r2, #1
 80055be:	2109      	movs	r1, #9
 80055c0:	f7ff ff8e 	bl	80054e0 <std>
 80055c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055c8:	2202      	movs	r2, #2
 80055ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ce:	2112      	movs	r1, #18
 80055d0:	f7ff bf86 	b.w	80054e0 <std>
 80055d4:	20013c54 	.word	0x20013c54
 80055d8:	20013b1c 	.word	0x20013b1c
 80055dc:	0800554d 	.word	0x0800554d

080055e0 <__sfp_lock_acquire>:
 80055e0:	4801      	ldr	r0, [pc, #4]	@ (80055e8 <__sfp_lock_acquire+0x8>)
 80055e2:	f000 b962 	b.w	80058aa <__retarget_lock_acquire_recursive>
 80055e6:	bf00      	nop
 80055e8:	20013c5e 	.word	0x20013c5e

080055ec <__sfp_lock_release>:
 80055ec:	4801      	ldr	r0, [pc, #4]	@ (80055f4 <__sfp_lock_release+0x8>)
 80055ee:	f000 b95d 	b.w	80058ac <__retarget_lock_release_recursive>
 80055f2:	bf00      	nop
 80055f4:	20013c5e 	.word	0x20013c5e

080055f8 <__sinit>:
 80055f8:	b510      	push	{r4, lr}
 80055fa:	4604      	mov	r4, r0
 80055fc:	f7ff fff0 	bl	80055e0 <__sfp_lock_acquire>
 8005600:	6a23      	ldr	r3, [r4, #32]
 8005602:	b11b      	cbz	r3, 800560c <__sinit+0x14>
 8005604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005608:	f7ff bff0 	b.w	80055ec <__sfp_lock_release>
 800560c:	4b04      	ldr	r3, [pc, #16]	@ (8005620 <__sinit+0x28>)
 800560e:	6223      	str	r3, [r4, #32]
 8005610:	4b04      	ldr	r3, [pc, #16]	@ (8005624 <__sinit+0x2c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f5      	bne.n	8005604 <__sinit+0xc>
 8005618:	f7ff ffc4 	bl	80055a4 <global_stdio_init.part.0>
 800561c:	e7f2      	b.n	8005604 <__sinit+0xc>
 800561e:	bf00      	nop
 8005620:	08005565 	.word	0x08005565
 8005624:	20013c54 	.word	0x20013c54

08005628 <fiprintf>:
 8005628:	b40e      	push	{r1, r2, r3}
 800562a:	b503      	push	{r0, r1, lr}
 800562c:	4601      	mov	r1, r0
 800562e:	ab03      	add	r3, sp, #12
 8005630:	4805      	ldr	r0, [pc, #20]	@ (8005648 <fiprintf+0x20>)
 8005632:	f853 2b04 	ldr.w	r2, [r3], #4
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	f000 fa09 	bl	8005a50 <_vfiprintf_r>
 800563e:	b002      	add	sp, #8
 8005640:	f85d eb04 	ldr.w	lr, [sp], #4
 8005644:	b003      	add	sp, #12
 8005646:	4770      	bx	lr
 8005648:	2000001c 	.word	0x2000001c

0800564c <_fwalk_sglue>:
 800564c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005650:	4607      	mov	r7, r0
 8005652:	4688      	mov	r8, r1
 8005654:	4614      	mov	r4, r2
 8005656:	2600      	movs	r6, #0
 8005658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800565c:	f1b9 0901 	subs.w	r9, r9, #1
 8005660:	d505      	bpl.n	800566e <_fwalk_sglue+0x22>
 8005662:	6824      	ldr	r4, [r4, #0]
 8005664:	2c00      	cmp	r4, #0
 8005666:	d1f7      	bne.n	8005658 <_fwalk_sglue+0xc>
 8005668:	4630      	mov	r0, r6
 800566a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d907      	bls.n	8005684 <_fwalk_sglue+0x38>
 8005674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005678:	3301      	adds	r3, #1
 800567a:	d003      	beq.n	8005684 <_fwalk_sglue+0x38>
 800567c:	4629      	mov	r1, r5
 800567e:	4638      	mov	r0, r7
 8005680:	47c0      	blx	r8
 8005682:	4306      	orrs	r6, r0
 8005684:	3568      	adds	r5, #104	@ 0x68
 8005686:	e7e9      	b.n	800565c <_fwalk_sglue+0x10>

08005688 <__sread>:
 8005688:	b510      	push	{r4, lr}
 800568a:	460c      	mov	r4, r1
 800568c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005690:	f000 f898 	bl	80057c4 <_read_r>
 8005694:	2800      	cmp	r0, #0
 8005696:	bfab      	itete	ge
 8005698:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800569a:	89a3      	ldrhlt	r3, [r4, #12]
 800569c:	181b      	addge	r3, r3, r0
 800569e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056a2:	bfac      	ite	ge
 80056a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056a6:	81a3      	strhlt	r3, [r4, #12]
 80056a8:	bd10      	pop	{r4, pc}

080056aa <__swrite>:
 80056aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ae:	461f      	mov	r7, r3
 80056b0:	898b      	ldrh	r3, [r1, #12]
 80056b2:	05db      	lsls	r3, r3, #23
 80056b4:	4605      	mov	r5, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	4616      	mov	r6, r2
 80056ba:	d505      	bpl.n	80056c8 <__swrite+0x1e>
 80056bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c0:	2302      	movs	r3, #2
 80056c2:	2200      	movs	r2, #0
 80056c4:	f000 f86c 	bl	80057a0 <_lseek_r>
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056d2:	81a3      	strh	r3, [r4, #12]
 80056d4:	4632      	mov	r2, r6
 80056d6:	463b      	mov	r3, r7
 80056d8:	4628      	mov	r0, r5
 80056da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056de:	f000 b8a7 	b.w	8005830 <_write_r>

080056e2 <__sseek>:
 80056e2:	b510      	push	{r4, lr}
 80056e4:	460c      	mov	r4, r1
 80056e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ea:	f000 f859 	bl	80057a0 <_lseek_r>
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	bf15      	itete	ne
 80056f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056fe:	81a3      	strheq	r3, [r4, #12]
 8005700:	bf18      	it	ne
 8005702:	81a3      	strhne	r3, [r4, #12]
 8005704:	bd10      	pop	{r4, pc}

08005706 <__sclose>:
 8005706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570a:	f000 b839 	b.w	8005780 <_close_r>

0800570e <memset>:
 800570e:	4402      	add	r2, r0
 8005710:	4603      	mov	r3, r0
 8005712:	4293      	cmp	r3, r2
 8005714:	d100      	bne.n	8005718 <memset+0xa>
 8005716:	4770      	bx	lr
 8005718:	f803 1b01 	strb.w	r1, [r3], #1
 800571c:	e7f9      	b.n	8005712 <memset+0x4>

0800571e <_raise_r>:
 800571e:	291f      	cmp	r1, #31
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4605      	mov	r5, r0
 8005724:	460c      	mov	r4, r1
 8005726:	d904      	bls.n	8005732 <_raise_r+0x14>
 8005728:	2316      	movs	r3, #22
 800572a:	6003      	str	r3, [r0, #0]
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	bd38      	pop	{r3, r4, r5, pc}
 8005732:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005734:	b112      	cbz	r2, 800573c <_raise_r+0x1e>
 8005736:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800573a:	b94b      	cbnz	r3, 8005750 <_raise_r+0x32>
 800573c:	4628      	mov	r0, r5
 800573e:	f000 f865 	bl	800580c <_getpid_r>
 8005742:	4622      	mov	r2, r4
 8005744:	4601      	mov	r1, r0
 8005746:	4628      	mov	r0, r5
 8005748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800574c:	f000 b84c 	b.w	80057e8 <_kill_r>
 8005750:	2b01      	cmp	r3, #1
 8005752:	d00a      	beq.n	800576a <_raise_r+0x4c>
 8005754:	1c59      	adds	r1, r3, #1
 8005756:	d103      	bne.n	8005760 <_raise_r+0x42>
 8005758:	2316      	movs	r3, #22
 800575a:	6003      	str	r3, [r0, #0]
 800575c:	2001      	movs	r0, #1
 800575e:	e7e7      	b.n	8005730 <_raise_r+0x12>
 8005760:	2100      	movs	r1, #0
 8005762:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005766:	4620      	mov	r0, r4
 8005768:	4798      	blx	r3
 800576a:	2000      	movs	r0, #0
 800576c:	e7e0      	b.n	8005730 <_raise_r+0x12>
	...

08005770 <raise>:
 8005770:	4b02      	ldr	r3, [pc, #8]	@ (800577c <raise+0xc>)
 8005772:	4601      	mov	r1, r0
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	f7ff bfd2 	b.w	800571e <_raise_r>
 800577a:	bf00      	nop
 800577c:	2000001c 	.word	0x2000001c

08005780 <_close_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d06      	ldr	r5, [pc, #24]	@ (800579c <_close_r+0x1c>)
 8005784:	2300      	movs	r3, #0
 8005786:	4604      	mov	r4, r0
 8005788:	4608      	mov	r0, r1
 800578a:	602b      	str	r3, [r5, #0]
 800578c:	f7fb fc9a 	bl	80010c4 <_close>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d102      	bne.n	800579a <_close_r+0x1a>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	b103      	cbz	r3, 800579a <_close_r+0x1a>
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	20013c58 	.word	0x20013c58

080057a0 <_lseek_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4d07      	ldr	r5, [pc, #28]	@ (80057c0 <_lseek_r+0x20>)
 80057a4:	4604      	mov	r4, r0
 80057a6:	4608      	mov	r0, r1
 80057a8:	4611      	mov	r1, r2
 80057aa:	2200      	movs	r2, #0
 80057ac:	602a      	str	r2, [r5, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f7fb fcaf 	bl	8001112 <_lseek>
 80057b4:	1c43      	adds	r3, r0, #1
 80057b6:	d102      	bne.n	80057be <_lseek_r+0x1e>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	b103      	cbz	r3, 80057be <_lseek_r+0x1e>
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	20013c58 	.word	0x20013c58

080057c4 <_read_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d07      	ldr	r5, [pc, #28]	@ (80057e4 <_read_r+0x20>)
 80057c8:	4604      	mov	r4, r0
 80057ca:	4608      	mov	r0, r1
 80057cc:	4611      	mov	r1, r2
 80057ce:	2200      	movs	r2, #0
 80057d0:	602a      	str	r2, [r5, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f7fb fc3d 	bl	8001052 <_read>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d102      	bne.n	80057e2 <_read_r+0x1e>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	b103      	cbz	r3, 80057e2 <_read_r+0x1e>
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	bd38      	pop	{r3, r4, r5, pc}
 80057e4:	20013c58 	.word	0x20013c58

080057e8 <_kill_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4d07      	ldr	r5, [pc, #28]	@ (8005808 <_kill_r+0x20>)
 80057ec:	2300      	movs	r3, #0
 80057ee:	4604      	mov	r4, r0
 80057f0:	4608      	mov	r0, r1
 80057f2:	4611      	mov	r1, r2
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	f7fb fc11 	bl	800101c <_kill>
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	d102      	bne.n	8005804 <_kill_r+0x1c>
 80057fe:	682b      	ldr	r3, [r5, #0]
 8005800:	b103      	cbz	r3, 8005804 <_kill_r+0x1c>
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	bd38      	pop	{r3, r4, r5, pc}
 8005806:	bf00      	nop
 8005808:	20013c58 	.word	0x20013c58

0800580c <_getpid_r>:
 800580c:	f7fb bbfe 	b.w	800100c <_getpid>

08005810 <_sbrk_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4d06      	ldr	r5, [pc, #24]	@ (800582c <_sbrk_r+0x1c>)
 8005814:	2300      	movs	r3, #0
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	602b      	str	r3, [r5, #0]
 800581c:	f7fb fc86 	bl	800112c <_sbrk>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_sbrk_r+0x1a>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_sbrk_r+0x1a>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	20013c58 	.word	0x20013c58

08005830 <_write_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d07      	ldr	r5, [pc, #28]	@ (8005850 <_write_r+0x20>)
 8005834:	4604      	mov	r4, r0
 8005836:	4608      	mov	r0, r1
 8005838:	4611      	mov	r1, r2
 800583a:	2200      	movs	r2, #0
 800583c:	602a      	str	r2, [r5, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	f7fb fc24 	bl	800108c <_write>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_write_r+0x1e>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b103      	cbz	r3, 800584e <_write_r+0x1e>
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	20013c58 	.word	0x20013c58

08005854 <__errno>:
 8005854:	4b01      	ldr	r3, [pc, #4]	@ (800585c <__errno+0x8>)
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	2000001c 	.word	0x2000001c

08005860 <__libc_init_array>:
 8005860:	b570      	push	{r4, r5, r6, lr}
 8005862:	4d0d      	ldr	r5, [pc, #52]	@ (8005898 <__libc_init_array+0x38>)
 8005864:	4c0d      	ldr	r4, [pc, #52]	@ (800589c <__libc_init_array+0x3c>)
 8005866:	1b64      	subs	r4, r4, r5
 8005868:	10a4      	asrs	r4, r4, #2
 800586a:	2600      	movs	r6, #0
 800586c:	42a6      	cmp	r6, r4
 800586e:	d109      	bne.n	8005884 <__libc_init_array+0x24>
 8005870:	4d0b      	ldr	r5, [pc, #44]	@ (80058a0 <__libc_init_array+0x40>)
 8005872:	4c0c      	ldr	r4, [pc, #48]	@ (80058a4 <__libc_init_array+0x44>)
 8005874:	f000 fd56 	bl	8006324 <_init>
 8005878:	1b64      	subs	r4, r4, r5
 800587a:	10a4      	asrs	r4, r4, #2
 800587c:	2600      	movs	r6, #0
 800587e:	42a6      	cmp	r6, r4
 8005880:	d105      	bne.n	800588e <__libc_init_array+0x2e>
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	f855 3b04 	ldr.w	r3, [r5], #4
 8005888:	4798      	blx	r3
 800588a:	3601      	adds	r6, #1
 800588c:	e7ee      	b.n	800586c <__libc_init_array+0xc>
 800588e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005892:	4798      	blx	r3
 8005894:	3601      	adds	r6, #1
 8005896:	e7f2      	b.n	800587e <__libc_init_array+0x1e>
 8005898:	08006968 	.word	0x08006968
 800589c:	08006968 	.word	0x08006968
 80058a0:	08006968 	.word	0x08006968
 80058a4:	08006978 	.word	0x08006978

080058a8 <__retarget_lock_init_recursive>:
 80058a8:	4770      	bx	lr

080058aa <__retarget_lock_acquire_recursive>:
 80058aa:	4770      	bx	lr

080058ac <__retarget_lock_release_recursive>:
 80058ac:	4770      	bx	lr
	...

080058b0 <__register_exitproc>:
 80058b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b4:	4d27      	ldr	r5, [pc, #156]	@ (8005954 <__register_exitproc+0xa4>)
 80058b6:	4607      	mov	r7, r0
 80058b8:	6828      	ldr	r0, [r5, #0]
 80058ba:	4691      	mov	r9, r2
 80058bc:	460e      	mov	r6, r1
 80058be:	4698      	mov	r8, r3
 80058c0:	f7ff fff3 	bl	80058aa <__retarget_lock_acquire_recursive>
 80058c4:	4a24      	ldr	r2, [pc, #144]	@ (8005958 <__register_exitproc+0xa8>)
 80058c6:	6814      	ldr	r4, [r2, #0]
 80058c8:	b93c      	cbnz	r4, 80058da <__register_exitproc+0x2a>
 80058ca:	4b24      	ldr	r3, [pc, #144]	@ (800595c <__register_exitproc+0xac>)
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	4a24      	ldr	r2, [pc, #144]	@ (8005960 <__register_exitproc+0xb0>)
 80058d0:	b112      	cbz	r2, 80058d8 <__register_exitproc+0x28>
 80058d2:	6812      	ldr	r2, [r2, #0]
 80058d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80058d8:	4c20      	ldr	r4, [pc, #128]	@ (800595c <__register_exitproc+0xac>)
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	2b1f      	cmp	r3, #31
 80058de:	dd06      	ble.n	80058ee <__register_exitproc+0x3e>
 80058e0:	6828      	ldr	r0, [r5, #0]
 80058e2:	f7ff ffe3 	bl	80058ac <__retarget_lock_release_recursive>
 80058e6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ee:	b32f      	cbz	r7, 800593c <__register_exitproc+0x8c>
 80058f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80058f4:	b968      	cbnz	r0, 8005912 <__register_exitproc+0x62>
 80058f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005964 <__register_exitproc+0xb4>)
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f1      	beq.n	80058e0 <__register_exitproc+0x30>
 80058fc:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8005900:	f7ff fd30 	bl	8005364 <malloc>
 8005904:	2800      	cmp	r0, #0
 8005906:	d0eb      	beq.n	80058e0 <__register_exitproc+0x30>
 8005908:	2300      	movs	r3, #0
 800590a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 800590e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8005918:	2201      	movs	r2, #1
 800591a:	409a      	lsls	r2, r3
 800591c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8005920:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800592a:	2f02      	cmp	r7, #2
 800592c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8005930:	bf02      	ittt	eq
 8005932:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8005936:	4313      	orreq	r3, r2
 8005938:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800593c:	6863      	ldr	r3, [r4, #4]
 800593e:	6828      	ldr	r0, [r5, #0]
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	3302      	adds	r3, #2
 8005944:	6062      	str	r2, [r4, #4]
 8005946:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800594a:	f7ff ffaf 	bl	80058ac <__retarget_lock_release_recursive>
 800594e:	2000      	movs	r0, #0
 8005950:	e7cb      	b.n	80058ea <__register_exitproc+0x3a>
 8005952:	bf00      	nop
 8005954:	2000006c 	.word	0x2000006c
 8005958:	20013cec 	.word	0x20013cec
 800595c:	20013c60 	.word	0x20013c60
 8005960:	08006768 	.word	0x08006768
 8005964:	08005365 	.word	0x08005365

08005968 <_free_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4605      	mov	r5, r0
 800596c:	2900      	cmp	r1, #0
 800596e:	d041      	beq.n	80059f4 <_free_r+0x8c>
 8005970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005974:	1f0c      	subs	r4, r1, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	bfb8      	it	lt
 800597a:	18e4      	addlt	r4, r4, r3
 800597c:	f7ff fda4 	bl	80054c8 <__malloc_lock>
 8005980:	4a1d      	ldr	r2, [pc, #116]	@ (80059f8 <_free_r+0x90>)
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	b933      	cbnz	r3, 8005994 <_free_r+0x2c>
 8005986:	6063      	str	r3, [r4, #4]
 8005988:	6014      	str	r4, [r2, #0]
 800598a:	4628      	mov	r0, r5
 800598c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005990:	f7ff bda0 	b.w	80054d4 <__malloc_unlock>
 8005994:	42a3      	cmp	r3, r4
 8005996:	d908      	bls.n	80059aa <_free_r+0x42>
 8005998:	6820      	ldr	r0, [r4, #0]
 800599a:	1821      	adds	r1, r4, r0
 800599c:	428b      	cmp	r3, r1
 800599e:	bf01      	itttt	eq
 80059a0:	6819      	ldreq	r1, [r3, #0]
 80059a2:	685b      	ldreq	r3, [r3, #4]
 80059a4:	1809      	addeq	r1, r1, r0
 80059a6:	6021      	streq	r1, [r4, #0]
 80059a8:	e7ed      	b.n	8005986 <_free_r+0x1e>
 80059aa:	461a      	mov	r2, r3
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	b10b      	cbz	r3, 80059b4 <_free_r+0x4c>
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d9fa      	bls.n	80059aa <_free_r+0x42>
 80059b4:	6811      	ldr	r1, [r2, #0]
 80059b6:	1850      	adds	r0, r2, r1
 80059b8:	42a0      	cmp	r0, r4
 80059ba:	d10b      	bne.n	80059d4 <_free_r+0x6c>
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	4401      	add	r1, r0
 80059c0:	1850      	adds	r0, r2, r1
 80059c2:	4283      	cmp	r3, r0
 80059c4:	6011      	str	r1, [r2, #0]
 80059c6:	d1e0      	bne.n	800598a <_free_r+0x22>
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	6053      	str	r3, [r2, #4]
 80059ce:	4408      	add	r0, r1
 80059d0:	6010      	str	r0, [r2, #0]
 80059d2:	e7da      	b.n	800598a <_free_r+0x22>
 80059d4:	d902      	bls.n	80059dc <_free_r+0x74>
 80059d6:	230c      	movs	r3, #12
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	e7d6      	b.n	800598a <_free_r+0x22>
 80059dc:	6820      	ldr	r0, [r4, #0]
 80059de:	1821      	adds	r1, r4, r0
 80059e0:	428b      	cmp	r3, r1
 80059e2:	bf04      	itt	eq
 80059e4:	6819      	ldreq	r1, [r3, #0]
 80059e6:	685b      	ldreq	r3, [r3, #4]
 80059e8:	6063      	str	r3, [r4, #4]
 80059ea:	bf04      	itt	eq
 80059ec:	1809      	addeq	r1, r1, r0
 80059ee:	6021      	streq	r1, [r4, #0]
 80059f0:	6054      	str	r4, [r2, #4]
 80059f2:	e7ca      	b.n	800598a <_free_r+0x22>
 80059f4:	bd38      	pop	{r3, r4, r5, pc}
 80059f6:	bf00      	nop
 80059f8:	20013b18 	.word	0x20013b18

080059fc <__sfputc_r>:
 80059fc:	6893      	ldr	r3, [r2, #8]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	b410      	push	{r4}
 8005a04:	6093      	str	r3, [r2, #8]
 8005a06:	da08      	bge.n	8005a1a <__sfputc_r+0x1e>
 8005a08:	6994      	ldr	r4, [r2, #24]
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	db01      	blt.n	8005a12 <__sfputc_r+0x16>
 8005a0e:	290a      	cmp	r1, #10
 8005a10:	d103      	bne.n	8005a1a <__sfputc_r+0x1e>
 8005a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a16:	f000 bb6d 	b.w	80060f4 <__swbuf_r>
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	1c58      	adds	r0, r3, #1
 8005a1e:	6010      	str	r0, [r2, #0]
 8005a20:	7019      	strb	r1, [r3, #0]
 8005a22:	4608      	mov	r0, r1
 8005a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <__sfputs_r>:
 8005a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	460f      	mov	r7, r1
 8005a30:	4614      	mov	r4, r2
 8005a32:	18d5      	adds	r5, r2, r3
 8005a34:	42ac      	cmp	r4, r5
 8005a36:	d101      	bne.n	8005a3c <__sfputs_r+0x12>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e007      	b.n	8005a4c <__sfputs_r+0x22>
 8005a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a40:	463a      	mov	r2, r7
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff ffda 	bl	80059fc <__sfputc_r>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d1f3      	bne.n	8005a34 <__sfputs_r+0xa>
 8005a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a50 <_vfiprintf_r>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	460d      	mov	r5, r1
 8005a56:	b09d      	sub	sp, #116	@ 0x74
 8005a58:	4614      	mov	r4, r2
 8005a5a:	4698      	mov	r8, r3
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	b118      	cbz	r0, 8005a68 <_vfiprintf_r+0x18>
 8005a60:	6a03      	ldr	r3, [r0, #32]
 8005a62:	b90b      	cbnz	r3, 8005a68 <_vfiprintf_r+0x18>
 8005a64:	f7ff fdc8 	bl	80055f8 <__sinit>
 8005a68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a6a:	07d9      	lsls	r1, r3, #31
 8005a6c:	d405      	bmi.n	8005a7a <_vfiprintf_r+0x2a>
 8005a6e:	89ab      	ldrh	r3, [r5, #12]
 8005a70:	059a      	lsls	r2, r3, #22
 8005a72:	d402      	bmi.n	8005a7a <_vfiprintf_r+0x2a>
 8005a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a76:	f7ff ff18 	bl	80058aa <__retarget_lock_acquire_recursive>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	071b      	lsls	r3, r3, #28
 8005a7e:	d501      	bpl.n	8005a84 <_vfiprintf_r+0x34>
 8005a80:	692b      	ldr	r3, [r5, #16]
 8005a82:	b99b      	cbnz	r3, 8005aac <_vfiprintf_r+0x5c>
 8005a84:	4629      	mov	r1, r5
 8005a86:	4630      	mov	r0, r6
 8005a88:	f000 fb72 	bl	8006170 <__swsetup_r>
 8005a8c:	b170      	cbz	r0, 8005aac <_vfiprintf_r+0x5c>
 8005a8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a90:	07dc      	lsls	r4, r3, #31
 8005a92:	d504      	bpl.n	8005a9e <_vfiprintf_r+0x4e>
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295
 8005a98:	b01d      	add	sp, #116	@ 0x74
 8005a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9e:	89ab      	ldrh	r3, [r5, #12]
 8005aa0:	0598      	lsls	r0, r3, #22
 8005aa2:	d4f7      	bmi.n	8005a94 <_vfiprintf_r+0x44>
 8005aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005aa6:	f7ff ff01 	bl	80058ac <__retarget_lock_release_recursive>
 8005aaa:	e7f3      	b.n	8005a94 <_vfiprintf_r+0x44>
 8005aac:	2300      	movs	r3, #0
 8005aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aba:	2330      	movs	r3, #48	@ 0x30
 8005abc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c6c <_vfiprintf_r+0x21c>
 8005ac0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ac4:	f04f 0901 	mov.w	r9, #1
 8005ac8:	4623      	mov	r3, r4
 8005aca:	469a      	mov	sl, r3
 8005acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad0:	b10a      	cbz	r2, 8005ad6 <_vfiprintf_r+0x86>
 8005ad2:	2a25      	cmp	r2, #37	@ 0x25
 8005ad4:	d1f9      	bne.n	8005aca <_vfiprintf_r+0x7a>
 8005ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8005ada:	d00b      	beq.n	8005af4 <_vfiprintf_r+0xa4>
 8005adc:	465b      	mov	r3, fp
 8005ade:	4622      	mov	r2, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f7ff ffa1 	bl	8005a2a <__sfputs_r>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f000 80a7 	beq.w	8005c3c <_vfiprintf_r+0x1ec>
 8005aee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005af0:	445a      	add	r2, fp
 8005af2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005af4:	f89a 3000 	ldrb.w	r3, [sl]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 809f 	beq.w	8005c3c <_vfiprintf_r+0x1ec>
 8005afe:	2300      	movs	r3, #0
 8005b00:	f04f 32ff 	mov.w	r2, #4294967295
 8005b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b08:	f10a 0a01 	add.w	sl, sl, #1
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	9307      	str	r3, [sp, #28]
 8005b10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b14:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b16:	4654      	mov	r4, sl
 8005b18:	2205      	movs	r2, #5
 8005b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1e:	4853      	ldr	r0, [pc, #332]	@ (8005c6c <_vfiprintf_r+0x21c>)
 8005b20:	f7fa fb76 	bl	8000210 <memchr>
 8005b24:	9a04      	ldr	r2, [sp, #16]
 8005b26:	b9d8      	cbnz	r0, 8005b60 <_vfiprintf_r+0x110>
 8005b28:	06d1      	lsls	r1, r2, #27
 8005b2a:	bf44      	itt	mi
 8005b2c:	2320      	movmi	r3, #32
 8005b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b32:	0713      	lsls	r3, r2, #28
 8005b34:	bf44      	itt	mi
 8005b36:	232b      	movmi	r3, #43	@ 0x2b
 8005b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b42:	d015      	beq.n	8005b70 <_vfiprintf_r+0x120>
 8005b44:	9a07      	ldr	r2, [sp, #28]
 8005b46:	4654      	mov	r4, sl
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f04f 0c0a 	mov.w	ip, #10
 8005b4e:	4621      	mov	r1, r4
 8005b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b54:	3b30      	subs	r3, #48	@ 0x30
 8005b56:	2b09      	cmp	r3, #9
 8005b58:	d94b      	bls.n	8005bf2 <_vfiprintf_r+0x1a2>
 8005b5a:	b1b0      	cbz	r0, 8005b8a <_vfiprintf_r+0x13a>
 8005b5c:	9207      	str	r2, [sp, #28]
 8005b5e:	e014      	b.n	8005b8a <_vfiprintf_r+0x13a>
 8005b60:	eba0 0308 	sub.w	r3, r0, r8
 8005b64:	fa09 f303 	lsl.w	r3, r9, r3
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	9304      	str	r3, [sp, #16]
 8005b6c:	46a2      	mov	sl, r4
 8005b6e:	e7d2      	b.n	8005b16 <_vfiprintf_r+0xc6>
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	1d19      	adds	r1, r3, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	9103      	str	r1, [sp, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bfbb      	ittet	lt
 8005b7c:	425b      	neglt	r3, r3
 8005b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b82:	9307      	strge	r3, [sp, #28]
 8005b84:	9307      	strlt	r3, [sp, #28]
 8005b86:	bfb8      	it	lt
 8005b88:	9204      	strlt	r2, [sp, #16]
 8005b8a:	7823      	ldrb	r3, [r4, #0]
 8005b8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b8e:	d10a      	bne.n	8005ba6 <_vfiprintf_r+0x156>
 8005b90:	7863      	ldrb	r3, [r4, #1]
 8005b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b94:	d132      	bne.n	8005bfc <_vfiprintf_r+0x1ac>
 8005b96:	9b03      	ldr	r3, [sp, #12]
 8005b98:	1d1a      	adds	r2, r3, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	9203      	str	r2, [sp, #12]
 8005b9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ba2:	3402      	adds	r4, #2
 8005ba4:	9305      	str	r3, [sp, #20]
 8005ba6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c7c <_vfiprintf_r+0x22c>
 8005baa:	7821      	ldrb	r1, [r4, #0]
 8005bac:	2203      	movs	r2, #3
 8005bae:	4650      	mov	r0, sl
 8005bb0:	f7fa fb2e 	bl	8000210 <memchr>
 8005bb4:	b138      	cbz	r0, 8005bc6 <_vfiprintf_r+0x176>
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	eba0 000a 	sub.w	r0, r0, sl
 8005bbc:	2240      	movs	r2, #64	@ 0x40
 8005bbe:	4082      	lsls	r2, r0
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	3401      	adds	r4, #1
 8005bc4:	9304      	str	r3, [sp, #16]
 8005bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bca:	4829      	ldr	r0, [pc, #164]	@ (8005c70 <_vfiprintf_r+0x220>)
 8005bcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bd0:	2206      	movs	r2, #6
 8005bd2:	f7fa fb1d 	bl	8000210 <memchr>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d03f      	beq.n	8005c5a <_vfiprintf_r+0x20a>
 8005bda:	4b26      	ldr	r3, [pc, #152]	@ (8005c74 <_vfiprintf_r+0x224>)
 8005bdc:	bb1b      	cbnz	r3, 8005c26 <_vfiprintf_r+0x1d6>
 8005bde:	9b03      	ldr	r3, [sp, #12]
 8005be0:	3307      	adds	r3, #7
 8005be2:	f023 0307 	bic.w	r3, r3, #7
 8005be6:	3308      	adds	r3, #8
 8005be8:	9303      	str	r3, [sp, #12]
 8005bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bec:	443b      	add	r3, r7
 8005bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bf0:	e76a      	b.n	8005ac8 <_vfiprintf_r+0x78>
 8005bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	e7a8      	b.n	8005b4e <_vfiprintf_r+0xfe>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	3401      	adds	r4, #1
 8005c00:	9305      	str	r3, [sp, #20]
 8005c02:	4619      	mov	r1, r3
 8005c04:	f04f 0c0a 	mov.w	ip, #10
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c0e:	3a30      	subs	r2, #48	@ 0x30
 8005c10:	2a09      	cmp	r2, #9
 8005c12:	d903      	bls.n	8005c1c <_vfiprintf_r+0x1cc>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0c6      	beq.n	8005ba6 <_vfiprintf_r+0x156>
 8005c18:	9105      	str	r1, [sp, #20]
 8005c1a:	e7c4      	b.n	8005ba6 <_vfiprintf_r+0x156>
 8005c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c20:	4604      	mov	r4, r0
 8005c22:	2301      	movs	r3, #1
 8005c24:	e7f0      	b.n	8005c08 <_vfiprintf_r+0x1b8>
 8005c26:	ab03      	add	r3, sp, #12
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	462a      	mov	r2, r5
 8005c2c:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <_vfiprintf_r+0x228>)
 8005c2e:	a904      	add	r1, sp, #16
 8005c30:	4630      	mov	r0, r6
 8005c32:	f3af 8000 	nop.w
 8005c36:	4607      	mov	r7, r0
 8005c38:	1c78      	adds	r0, r7, #1
 8005c3a:	d1d6      	bne.n	8005bea <_vfiprintf_r+0x19a>
 8005c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c3e:	07d9      	lsls	r1, r3, #31
 8005c40:	d405      	bmi.n	8005c4e <_vfiprintf_r+0x1fe>
 8005c42:	89ab      	ldrh	r3, [r5, #12]
 8005c44:	059a      	lsls	r2, r3, #22
 8005c46:	d402      	bmi.n	8005c4e <_vfiprintf_r+0x1fe>
 8005c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c4a:	f7ff fe2f 	bl	80058ac <__retarget_lock_release_recursive>
 8005c4e:	89ab      	ldrh	r3, [r5, #12]
 8005c50:	065b      	lsls	r3, r3, #25
 8005c52:	f53f af1f 	bmi.w	8005a94 <_vfiprintf_r+0x44>
 8005c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c58:	e71e      	b.n	8005a98 <_vfiprintf_r+0x48>
 8005c5a:	ab03      	add	r3, sp, #12
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	462a      	mov	r2, r5
 8005c60:	4b05      	ldr	r3, [pc, #20]	@ (8005c78 <_vfiprintf_r+0x228>)
 8005c62:	a904      	add	r1, sp, #16
 8005c64:	4630      	mov	r0, r6
 8005c66:	f000 f879 	bl	8005d5c <_printf_i>
 8005c6a:	e7e4      	b.n	8005c36 <_vfiprintf_r+0x1e6>
 8005c6c:	0800676c 	.word	0x0800676c
 8005c70:	08006776 	.word	0x08006776
 8005c74:	00000000 	.word	0x00000000
 8005c78:	08005a2b 	.word	0x08005a2b
 8005c7c:	08006772 	.word	0x08006772

08005c80 <_printf_common>:
 8005c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c84:	4616      	mov	r6, r2
 8005c86:	4698      	mov	r8, r3
 8005c88:	688a      	ldr	r2, [r1, #8]
 8005c8a:	690b      	ldr	r3, [r1, #16]
 8005c8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	bfb8      	it	lt
 8005c94:	4613      	movlt	r3, r2
 8005c96:	6033      	str	r3, [r6, #0]
 8005c98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	b10a      	cbz	r2, 8005ca6 <_printf_common+0x26>
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	6033      	str	r3, [r6, #0]
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	0699      	lsls	r1, r3, #26
 8005caa:	bf42      	ittt	mi
 8005cac:	6833      	ldrmi	r3, [r6, #0]
 8005cae:	3302      	addmi	r3, #2
 8005cb0:	6033      	strmi	r3, [r6, #0]
 8005cb2:	6825      	ldr	r5, [r4, #0]
 8005cb4:	f015 0506 	ands.w	r5, r5, #6
 8005cb8:	d106      	bne.n	8005cc8 <_printf_common+0x48>
 8005cba:	f104 0a19 	add.w	sl, r4, #25
 8005cbe:	68e3      	ldr	r3, [r4, #12]
 8005cc0:	6832      	ldr	r2, [r6, #0]
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	42ab      	cmp	r3, r5
 8005cc6:	dc26      	bgt.n	8005d16 <_printf_common+0x96>
 8005cc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ccc:	6822      	ldr	r2, [r4, #0]
 8005cce:	3b00      	subs	r3, #0
 8005cd0:	bf18      	it	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	0692      	lsls	r2, r2, #26
 8005cd6:	d42b      	bmi.n	8005d30 <_printf_common+0xb0>
 8005cd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cdc:	4641      	mov	r1, r8
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c8      	blx	r9
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d01e      	beq.n	8005d24 <_printf_common+0xa4>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	6922      	ldr	r2, [r4, #16]
 8005cea:	f003 0306 	and.w	r3, r3, #6
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	bf02      	ittt	eq
 8005cf2:	68e5      	ldreq	r5, [r4, #12]
 8005cf4:	6833      	ldreq	r3, [r6, #0]
 8005cf6:	1aed      	subeq	r5, r5, r3
 8005cf8:	68a3      	ldr	r3, [r4, #8]
 8005cfa:	bf0c      	ite	eq
 8005cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d00:	2500      	movne	r5, #0
 8005d02:	4293      	cmp	r3, r2
 8005d04:	bfc4      	itt	gt
 8005d06:	1a9b      	subgt	r3, r3, r2
 8005d08:	18ed      	addgt	r5, r5, r3
 8005d0a:	2600      	movs	r6, #0
 8005d0c:	341a      	adds	r4, #26
 8005d0e:	42b5      	cmp	r5, r6
 8005d10:	d11a      	bne.n	8005d48 <_printf_common+0xc8>
 8005d12:	2000      	movs	r0, #0
 8005d14:	e008      	b.n	8005d28 <_printf_common+0xa8>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4652      	mov	r2, sl
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	47c8      	blx	r9
 8005d20:	3001      	adds	r0, #1
 8005d22:	d103      	bne.n	8005d2c <_printf_common+0xac>
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	e7c6      	b.n	8005cbe <_printf_common+0x3e>
 8005d30:	18e1      	adds	r1, r4, r3
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	2030      	movs	r0, #48	@ 0x30
 8005d36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d3a:	4422      	add	r2, r4
 8005d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d44:	3302      	adds	r3, #2
 8005d46:	e7c7      	b.n	8005cd8 <_printf_common+0x58>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	4638      	mov	r0, r7
 8005d50:	47c8      	blx	r9
 8005d52:	3001      	adds	r0, #1
 8005d54:	d0e6      	beq.n	8005d24 <_printf_common+0xa4>
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7d9      	b.n	8005d0e <_printf_common+0x8e>
	...

08005d5c <_printf_i>:
 8005d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	7e0f      	ldrb	r7, [r1, #24]
 8005d62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d64:	2f78      	cmp	r7, #120	@ 0x78
 8005d66:	4691      	mov	r9, r2
 8005d68:	4680      	mov	r8, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	469a      	mov	sl, r3
 8005d6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d72:	d807      	bhi.n	8005d84 <_printf_i+0x28>
 8005d74:	2f62      	cmp	r7, #98	@ 0x62
 8005d76:	d80a      	bhi.n	8005d8e <_printf_i+0x32>
 8005d78:	2f00      	cmp	r7, #0
 8005d7a:	f000 80d2 	beq.w	8005f22 <_printf_i+0x1c6>
 8005d7e:	2f58      	cmp	r7, #88	@ 0x58
 8005d80:	f000 80b9 	beq.w	8005ef6 <_printf_i+0x19a>
 8005d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d8c:	e03a      	b.n	8005e04 <_printf_i+0xa8>
 8005d8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d92:	2b15      	cmp	r3, #21
 8005d94:	d8f6      	bhi.n	8005d84 <_printf_i+0x28>
 8005d96:	a101      	add	r1, pc, #4	@ (adr r1, 8005d9c <_printf_i+0x40>)
 8005d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d9c:	08005df5 	.word	0x08005df5
 8005da0:	08005e09 	.word	0x08005e09
 8005da4:	08005d85 	.word	0x08005d85
 8005da8:	08005d85 	.word	0x08005d85
 8005dac:	08005d85 	.word	0x08005d85
 8005db0:	08005d85 	.word	0x08005d85
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005d85 	.word	0x08005d85
 8005dbc:	08005d85 	.word	0x08005d85
 8005dc0:	08005d85 	.word	0x08005d85
 8005dc4:	08005d85 	.word	0x08005d85
 8005dc8:	08005f09 	.word	0x08005f09
 8005dcc:	08005e33 	.word	0x08005e33
 8005dd0:	08005ec3 	.word	0x08005ec3
 8005dd4:	08005d85 	.word	0x08005d85
 8005dd8:	08005d85 	.word	0x08005d85
 8005ddc:	08005f2b 	.word	0x08005f2b
 8005de0:	08005d85 	.word	0x08005d85
 8005de4:	08005e33 	.word	0x08005e33
 8005de8:	08005d85 	.word	0x08005d85
 8005dec:	08005d85 	.word	0x08005d85
 8005df0:	08005ecb 	.word	0x08005ecb
 8005df4:	6833      	ldr	r3, [r6, #0]
 8005df6:	1d1a      	adds	r2, r3, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6032      	str	r2, [r6, #0]
 8005dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e04:	2301      	movs	r3, #1
 8005e06:	e09d      	b.n	8005f44 <_printf_i+0x1e8>
 8005e08:	6833      	ldr	r3, [r6, #0]
 8005e0a:	6820      	ldr	r0, [r4, #0]
 8005e0c:	1d19      	adds	r1, r3, #4
 8005e0e:	6031      	str	r1, [r6, #0]
 8005e10:	0606      	lsls	r6, r0, #24
 8005e12:	d501      	bpl.n	8005e18 <_printf_i+0xbc>
 8005e14:	681d      	ldr	r5, [r3, #0]
 8005e16:	e003      	b.n	8005e20 <_printf_i+0xc4>
 8005e18:	0645      	lsls	r5, r0, #25
 8005e1a:	d5fb      	bpl.n	8005e14 <_printf_i+0xb8>
 8005e1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	da03      	bge.n	8005e2c <_printf_i+0xd0>
 8005e24:	232d      	movs	r3, #45	@ 0x2d
 8005e26:	426d      	negs	r5, r5
 8005e28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e2c:	4859      	ldr	r0, [pc, #356]	@ (8005f94 <_printf_i+0x238>)
 8005e2e:	230a      	movs	r3, #10
 8005e30:	e011      	b.n	8005e56 <_printf_i+0xfa>
 8005e32:	6821      	ldr	r1, [r4, #0]
 8005e34:	6833      	ldr	r3, [r6, #0]
 8005e36:	0608      	lsls	r0, r1, #24
 8005e38:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e3c:	d402      	bmi.n	8005e44 <_printf_i+0xe8>
 8005e3e:	0649      	lsls	r1, r1, #25
 8005e40:	bf48      	it	mi
 8005e42:	b2ad      	uxthmi	r5, r5
 8005e44:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e46:	4853      	ldr	r0, [pc, #332]	@ (8005f94 <_printf_i+0x238>)
 8005e48:	6033      	str	r3, [r6, #0]
 8005e4a:	bf14      	ite	ne
 8005e4c:	230a      	movne	r3, #10
 8005e4e:	2308      	moveq	r3, #8
 8005e50:	2100      	movs	r1, #0
 8005e52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e56:	6866      	ldr	r6, [r4, #4]
 8005e58:	60a6      	str	r6, [r4, #8]
 8005e5a:	2e00      	cmp	r6, #0
 8005e5c:	bfa2      	ittt	ge
 8005e5e:	6821      	ldrge	r1, [r4, #0]
 8005e60:	f021 0104 	bicge.w	r1, r1, #4
 8005e64:	6021      	strge	r1, [r4, #0]
 8005e66:	b90d      	cbnz	r5, 8005e6c <_printf_i+0x110>
 8005e68:	2e00      	cmp	r6, #0
 8005e6a:	d04b      	beq.n	8005f04 <_printf_i+0x1a8>
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e72:	fb03 5711 	mls	r7, r3, r1, r5
 8005e76:	5dc7      	ldrb	r7, [r0, r7]
 8005e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e7c:	462f      	mov	r7, r5
 8005e7e:	42bb      	cmp	r3, r7
 8005e80:	460d      	mov	r5, r1
 8005e82:	d9f4      	bls.n	8005e6e <_printf_i+0x112>
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d10b      	bne.n	8005ea0 <_printf_i+0x144>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	07df      	lsls	r7, r3, #31
 8005e8c:	d508      	bpl.n	8005ea0 <_printf_i+0x144>
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	6861      	ldr	r1, [r4, #4]
 8005e92:	4299      	cmp	r1, r3
 8005e94:	bfde      	ittt	le
 8005e96:	2330      	movle	r3, #48	@ 0x30
 8005e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ea0:	1b92      	subs	r2, r2, r6
 8005ea2:	6122      	str	r2, [r4, #16]
 8005ea4:	f8cd a000 	str.w	sl, [sp]
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	aa03      	add	r2, sp, #12
 8005eac:	4621      	mov	r1, r4
 8005eae:	4640      	mov	r0, r8
 8005eb0:	f7ff fee6 	bl	8005c80 <_printf_common>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d14a      	bne.n	8005f4e <_printf_i+0x1f2>
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	b004      	add	sp, #16
 8005ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f043 0320 	orr.w	r3, r3, #32
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	4833      	ldr	r0, [pc, #204]	@ (8005f98 <_printf_i+0x23c>)
 8005ecc:	2778      	movs	r7, #120	@ 0x78
 8005ece:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	6831      	ldr	r1, [r6, #0]
 8005ed6:	061f      	lsls	r7, r3, #24
 8005ed8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005edc:	d402      	bmi.n	8005ee4 <_printf_i+0x188>
 8005ede:	065f      	lsls	r7, r3, #25
 8005ee0:	bf48      	it	mi
 8005ee2:	b2ad      	uxthmi	r5, r5
 8005ee4:	6031      	str	r1, [r6, #0]
 8005ee6:	07d9      	lsls	r1, r3, #31
 8005ee8:	bf44      	itt	mi
 8005eea:	f043 0320 	orrmi.w	r3, r3, #32
 8005eee:	6023      	strmi	r3, [r4, #0]
 8005ef0:	b11d      	cbz	r5, 8005efa <_printf_i+0x19e>
 8005ef2:	2310      	movs	r3, #16
 8005ef4:	e7ac      	b.n	8005e50 <_printf_i+0xf4>
 8005ef6:	4827      	ldr	r0, [pc, #156]	@ (8005f94 <_printf_i+0x238>)
 8005ef8:	e7e9      	b.n	8005ece <_printf_i+0x172>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	f023 0320 	bic.w	r3, r3, #32
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	e7f6      	b.n	8005ef2 <_printf_i+0x196>
 8005f04:	4616      	mov	r6, r2
 8005f06:	e7bd      	b.n	8005e84 <_printf_i+0x128>
 8005f08:	6833      	ldr	r3, [r6, #0]
 8005f0a:	6825      	ldr	r5, [r4, #0]
 8005f0c:	6961      	ldr	r1, [r4, #20]
 8005f0e:	1d18      	adds	r0, r3, #4
 8005f10:	6030      	str	r0, [r6, #0]
 8005f12:	062e      	lsls	r6, r5, #24
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	d501      	bpl.n	8005f1c <_printf_i+0x1c0>
 8005f18:	6019      	str	r1, [r3, #0]
 8005f1a:	e002      	b.n	8005f22 <_printf_i+0x1c6>
 8005f1c:	0668      	lsls	r0, r5, #25
 8005f1e:	d5fb      	bpl.n	8005f18 <_printf_i+0x1bc>
 8005f20:	8019      	strh	r1, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	4616      	mov	r6, r2
 8005f28:	e7bc      	b.n	8005ea4 <_printf_i+0x148>
 8005f2a:	6833      	ldr	r3, [r6, #0]
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	6032      	str	r2, [r6, #0]
 8005f30:	681e      	ldr	r6, [r3, #0]
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	2100      	movs	r1, #0
 8005f36:	4630      	mov	r0, r6
 8005f38:	f7fa f96a 	bl	8000210 <memchr>
 8005f3c:	b108      	cbz	r0, 8005f42 <_printf_i+0x1e6>
 8005f3e:	1b80      	subs	r0, r0, r6
 8005f40:	6060      	str	r0, [r4, #4]
 8005f42:	6863      	ldr	r3, [r4, #4]
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	2300      	movs	r3, #0
 8005f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f4c:	e7aa      	b.n	8005ea4 <_printf_i+0x148>
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	4632      	mov	r2, r6
 8005f52:	4649      	mov	r1, r9
 8005f54:	4640      	mov	r0, r8
 8005f56:	47d0      	blx	sl
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d0ad      	beq.n	8005eb8 <_printf_i+0x15c>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	079b      	lsls	r3, r3, #30
 8005f60:	d413      	bmi.n	8005f8a <_printf_i+0x22e>
 8005f62:	68e0      	ldr	r0, [r4, #12]
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	4298      	cmp	r0, r3
 8005f68:	bfb8      	it	lt
 8005f6a:	4618      	movlt	r0, r3
 8005f6c:	e7a6      	b.n	8005ebc <_printf_i+0x160>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4632      	mov	r2, r6
 8005f72:	4649      	mov	r1, r9
 8005f74:	4640      	mov	r0, r8
 8005f76:	47d0      	blx	sl
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d09d      	beq.n	8005eb8 <_printf_i+0x15c>
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	68e3      	ldr	r3, [r4, #12]
 8005f80:	9903      	ldr	r1, [sp, #12]
 8005f82:	1a5b      	subs	r3, r3, r1
 8005f84:	42ab      	cmp	r3, r5
 8005f86:	dcf2      	bgt.n	8005f6e <_printf_i+0x212>
 8005f88:	e7eb      	b.n	8005f62 <_printf_i+0x206>
 8005f8a:	2500      	movs	r5, #0
 8005f8c:	f104 0619 	add.w	r6, r4, #25
 8005f90:	e7f5      	b.n	8005f7e <_printf_i+0x222>
 8005f92:	bf00      	nop
 8005f94:	0800677d 	.word	0x0800677d
 8005f98:	0800678e 	.word	0x0800678e

08005f9c <__sflush_r>:
 8005f9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa4:	0716      	lsls	r6, r2, #28
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	460c      	mov	r4, r1
 8005faa:	d454      	bmi.n	8006056 <__sflush_r+0xba>
 8005fac:	684b      	ldr	r3, [r1, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	dc02      	bgt.n	8005fb8 <__sflush_r+0x1c>
 8005fb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dd48      	ble.n	800604a <__sflush_r+0xae>
 8005fb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fba:	2e00      	cmp	r6, #0
 8005fbc:	d045      	beq.n	800604a <__sflush_r+0xae>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fc4:	682f      	ldr	r7, [r5, #0]
 8005fc6:	6a21      	ldr	r1, [r4, #32]
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	d030      	beq.n	800602e <__sflush_r+0x92>
 8005fcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	0759      	lsls	r1, r3, #29
 8005fd2:	d505      	bpl.n	8005fe0 <__sflush_r+0x44>
 8005fd4:	6863      	ldr	r3, [r4, #4]
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fda:	b10b      	cbz	r3, 8005fe0 <__sflush_r+0x44>
 8005fdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fe4:	6a21      	ldr	r1, [r4, #32]
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b0      	blx	r6
 8005fea:	1c43      	adds	r3, r0, #1
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	d106      	bne.n	8005ffe <__sflush_r+0x62>
 8005ff0:	6829      	ldr	r1, [r5, #0]
 8005ff2:	291d      	cmp	r1, #29
 8005ff4:	d82b      	bhi.n	800604e <__sflush_r+0xb2>
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80060a0 <__sflush_r+0x104>)
 8005ff8:	410a      	asrs	r2, r1
 8005ffa:	07d6      	lsls	r6, r2, #31
 8005ffc:	d427      	bmi.n	800604e <__sflush_r+0xb2>
 8005ffe:	2200      	movs	r2, #0
 8006000:	6062      	str	r2, [r4, #4]
 8006002:	04d9      	lsls	r1, r3, #19
 8006004:	6922      	ldr	r2, [r4, #16]
 8006006:	6022      	str	r2, [r4, #0]
 8006008:	d504      	bpl.n	8006014 <__sflush_r+0x78>
 800600a:	1c42      	adds	r2, r0, #1
 800600c:	d101      	bne.n	8006012 <__sflush_r+0x76>
 800600e:	682b      	ldr	r3, [r5, #0]
 8006010:	b903      	cbnz	r3, 8006014 <__sflush_r+0x78>
 8006012:	6560      	str	r0, [r4, #84]	@ 0x54
 8006014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006016:	602f      	str	r7, [r5, #0]
 8006018:	b1b9      	cbz	r1, 800604a <__sflush_r+0xae>
 800601a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800601e:	4299      	cmp	r1, r3
 8006020:	d002      	beq.n	8006028 <__sflush_r+0x8c>
 8006022:	4628      	mov	r0, r5
 8006024:	f7ff fca0 	bl	8005968 <_free_r>
 8006028:	2300      	movs	r3, #0
 800602a:	6363      	str	r3, [r4, #52]	@ 0x34
 800602c:	e00d      	b.n	800604a <__sflush_r+0xae>
 800602e:	2301      	movs	r3, #1
 8006030:	4628      	mov	r0, r5
 8006032:	47b0      	blx	r6
 8006034:	4602      	mov	r2, r0
 8006036:	1c50      	adds	r0, r2, #1
 8006038:	d1c9      	bne.n	8005fce <__sflush_r+0x32>
 800603a:	682b      	ldr	r3, [r5, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0c6      	beq.n	8005fce <__sflush_r+0x32>
 8006040:	2b1d      	cmp	r3, #29
 8006042:	d001      	beq.n	8006048 <__sflush_r+0xac>
 8006044:	2b16      	cmp	r3, #22
 8006046:	d11e      	bne.n	8006086 <__sflush_r+0xea>
 8006048:	602f      	str	r7, [r5, #0]
 800604a:	2000      	movs	r0, #0
 800604c:	e022      	b.n	8006094 <__sflush_r+0xf8>
 800604e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006052:	b21b      	sxth	r3, r3
 8006054:	e01b      	b.n	800608e <__sflush_r+0xf2>
 8006056:	690f      	ldr	r7, [r1, #16]
 8006058:	2f00      	cmp	r7, #0
 800605a:	d0f6      	beq.n	800604a <__sflush_r+0xae>
 800605c:	0793      	lsls	r3, r2, #30
 800605e:	680e      	ldr	r6, [r1, #0]
 8006060:	bf08      	it	eq
 8006062:	694b      	ldreq	r3, [r1, #20]
 8006064:	600f      	str	r7, [r1, #0]
 8006066:	bf18      	it	ne
 8006068:	2300      	movne	r3, #0
 800606a:	eba6 0807 	sub.w	r8, r6, r7
 800606e:	608b      	str	r3, [r1, #8]
 8006070:	f1b8 0f00 	cmp.w	r8, #0
 8006074:	dde9      	ble.n	800604a <__sflush_r+0xae>
 8006076:	6a21      	ldr	r1, [r4, #32]
 8006078:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800607a:	4643      	mov	r3, r8
 800607c:	463a      	mov	r2, r7
 800607e:	4628      	mov	r0, r5
 8006080:	47b0      	blx	r6
 8006082:	2800      	cmp	r0, #0
 8006084:	dc08      	bgt.n	8006098 <__sflush_r+0xfc>
 8006086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800608a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800608e:	81a3      	strh	r3, [r4, #12]
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006098:	4407      	add	r7, r0
 800609a:	eba8 0800 	sub.w	r8, r8, r0
 800609e:	e7e7      	b.n	8006070 <__sflush_r+0xd4>
 80060a0:	dfbffffe 	.word	0xdfbffffe

080060a4 <_fflush_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	690b      	ldr	r3, [r1, #16]
 80060a8:	4605      	mov	r5, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	b913      	cbnz	r3, 80060b4 <_fflush_r+0x10>
 80060ae:	2500      	movs	r5, #0
 80060b0:	4628      	mov	r0, r5
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	b118      	cbz	r0, 80060be <_fflush_r+0x1a>
 80060b6:	6a03      	ldr	r3, [r0, #32]
 80060b8:	b90b      	cbnz	r3, 80060be <_fflush_r+0x1a>
 80060ba:	f7ff fa9d 	bl	80055f8 <__sinit>
 80060be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f3      	beq.n	80060ae <_fflush_r+0xa>
 80060c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060c8:	07d0      	lsls	r0, r2, #31
 80060ca:	d404      	bmi.n	80060d6 <_fflush_r+0x32>
 80060cc:	0599      	lsls	r1, r3, #22
 80060ce:	d402      	bmi.n	80060d6 <_fflush_r+0x32>
 80060d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060d2:	f7ff fbea 	bl	80058aa <__retarget_lock_acquire_recursive>
 80060d6:	4628      	mov	r0, r5
 80060d8:	4621      	mov	r1, r4
 80060da:	f7ff ff5f 	bl	8005f9c <__sflush_r>
 80060de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060e0:	07da      	lsls	r2, r3, #31
 80060e2:	4605      	mov	r5, r0
 80060e4:	d4e4      	bmi.n	80060b0 <_fflush_r+0xc>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	059b      	lsls	r3, r3, #22
 80060ea:	d4e1      	bmi.n	80060b0 <_fflush_r+0xc>
 80060ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ee:	f7ff fbdd 	bl	80058ac <__retarget_lock_release_recursive>
 80060f2:	e7dd      	b.n	80060b0 <_fflush_r+0xc>

080060f4 <__swbuf_r>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	460e      	mov	r6, r1
 80060f8:	4614      	mov	r4, r2
 80060fa:	4605      	mov	r5, r0
 80060fc:	b118      	cbz	r0, 8006106 <__swbuf_r+0x12>
 80060fe:	6a03      	ldr	r3, [r0, #32]
 8006100:	b90b      	cbnz	r3, 8006106 <__swbuf_r+0x12>
 8006102:	f7ff fa79 	bl	80055f8 <__sinit>
 8006106:	69a3      	ldr	r3, [r4, #24]
 8006108:	60a3      	str	r3, [r4, #8]
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	071a      	lsls	r2, r3, #28
 800610e:	d501      	bpl.n	8006114 <__swbuf_r+0x20>
 8006110:	6923      	ldr	r3, [r4, #16]
 8006112:	b943      	cbnz	r3, 8006126 <__swbuf_r+0x32>
 8006114:	4621      	mov	r1, r4
 8006116:	4628      	mov	r0, r5
 8006118:	f000 f82a 	bl	8006170 <__swsetup_r>
 800611c:	b118      	cbz	r0, 8006126 <__swbuf_r+0x32>
 800611e:	f04f 37ff 	mov.w	r7, #4294967295
 8006122:	4638      	mov	r0, r7
 8006124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	6922      	ldr	r2, [r4, #16]
 800612a:	1a98      	subs	r0, r3, r2
 800612c:	6963      	ldr	r3, [r4, #20]
 800612e:	b2f6      	uxtb	r6, r6
 8006130:	4283      	cmp	r3, r0
 8006132:	4637      	mov	r7, r6
 8006134:	dc05      	bgt.n	8006142 <__swbuf_r+0x4e>
 8006136:	4621      	mov	r1, r4
 8006138:	4628      	mov	r0, r5
 800613a:	f7ff ffb3 	bl	80060a4 <_fflush_r>
 800613e:	2800      	cmp	r0, #0
 8006140:	d1ed      	bne.n	800611e <__swbuf_r+0x2a>
 8006142:	68a3      	ldr	r3, [r4, #8]
 8006144:	3b01      	subs	r3, #1
 8006146:	60a3      	str	r3, [r4, #8]
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	6022      	str	r2, [r4, #0]
 800614e:	701e      	strb	r6, [r3, #0]
 8006150:	6962      	ldr	r2, [r4, #20]
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	429a      	cmp	r2, r3
 8006156:	d004      	beq.n	8006162 <__swbuf_r+0x6e>
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	07db      	lsls	r3, r3, #31
 800615c:	d5e1      	bpl.n	8006122 <__swbuf_r+0x2e>
 800615e:	2e0a      	cmp	r6, #10
 8006160:	d1df      	bne.n	8006122 <__swbuf_r+0x2e>
 8006162:	4621      	mov	r1, r4
 8006164:	4628      	mov	r0, r5
 8006166:	f7ff ff9d 	bl	80060a4 <_fflush_r>
 800616a:	2800      	cmp	r0, #0
 800616c:	d0d9      	beq.n	8006122 <__swbuf_r+0x2e>
 800616e:	e7d6      	b.n	800611e <__swbuf_r+0x2a>

08006170 <__swsetup_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4b29      	ldr	r3, [pc, #164]	@ (8006218 <__swsetup_r+0xa8>)
 8006174:	4605      	mov	r5, r0
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	460c      	mov	r4, r1
 800617a:	b118      	cbz	r0, 8006184 <__swsetup_r+0x14>
 800617c:	6a03      	ldr	r3, [r0, #32]
 800617e:	b90b      	cbnz	r3, 8006184 <__swsetup_r+0x14>
 8006180:	f7ff fa3a 	bl	80055f8 <__sinit>
 8006184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006188:	0719      	lsls	r1, r3, #28
 800618a:	d422      	bmi.n	80061d2 <__swsetup_r+0x62>
 800618c:	06da      	lsls	r2, r3, #27
 800618e:	d407      	bmi.n	80061a0 <__swsetup_r+0x30>
 8006190:	2209      	movs	r2, #9
 8006192:	602a      	str	r2, [r5, #0]
 8006194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006198:	81a3      	strh	r3, [r4, #12]
 800619a:	f04f 30ff 	mov.w	r0, #4294967295
 800619e:	e033      	b.n	8006208 <__swsetup_r+0x98>
 80061a0:	0758      	lsls	r0, r3, #29
 80061a2:	d512      	bpl.n	80061ca <__swsetup_r+0x5a>
 80061a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061a6:	b141      	cbz	r1, 80061ba <__swsetup_r+0x4a>
 80061a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061ac:	4299      	cmp	r1, r3
 80061ae:	d002      	beq.n	80061b6 <__swsetup_r+0x46>
 80061b0:	4628      	mov	r0, r5
 80061b2:	f7ff fbd9 	bl	8005968 <_free_r>
 80061b6:	2300      	movs	r3, #0
 80061b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061c0:	81a3      	strh	r3, [r4, #12]
 80061c2:	2300      	movs	r3, #0
 80061c4:	6063      	str	r3, [r4, #4]
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	f043 0308 	orr.w	r3, r3, #8
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	b94b      	cbnz	r3, 80061ea <__swsetup_r+0x7a>
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e0:	d003      	beq.n	80061ea <__swsetup_r+0x7a>
 80061e2:	4621      	mov	r1, r4
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 f83f 	bl	8006268 <__smakebuf_r>
 80061ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ee:	f013 0201 	ands.w	r2, r3, #1
 80061f2:	d00a      	beq.n	800620a <__swsetup_r+0x9a>
 80061f4:	2200      	movs	r2, #0
 80061f6:	60a2      	str	r2, [r4, #8]
 80061f8:	6962      	ldr	r2, [r4, #20]
 80061fa:	4252      	negs	r2, r2
 80061fc:	61a2      	str	r2, [r4, #24]
 80061fe:	6922      	ldr	r2, [r4, #16]
 8006200:	b942      	cbnz	r2, 8006214 <__swsetup_r+0xa4>
 8006202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006206:	d1c5      	bne.n	8006194 <__swsetup_r+0x24>
 8006208:	bd38      	pop	{r3, r4, r5, pc}
 800620a:	0799      	lsls	r1, r3, #30
 800620c:	bf58      	it	pl
 800620e:	6962      	ldrpl	r2, [r4, #20]
 8006210:	60a2      	str	r2, [r4, #8]
 8006212:	e7f4      	b.n	80061fe <__swsetup_r+0x8e>
 8006214:	2000      	movs	r0, #0
 8006216:	e7f7      	b.n	8006208 <__swsetup_r+0x98>
 8006218:	2000001c 	.word	0x2000001c

0800621c <__swhatbuf_r>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	460c      	mov	r4, r1
 8006220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006224:	2900      	cmp	r1, #0
 8006226:	b096      	sub	sp, #88	@ 0x58
 8006228:	4615      	mov	r5, r2
 800622a:	461e      	mov	r6, r3
 800622c:	da0d      	bge.n	800624a <__swhatbuf_r+0x2e>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	bf14      	ite	ne
 800623a:	2340      	movne	r3, #64	@ 0x40
 800623c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006240:	2000      	movs	r0, #0
 8006242:	6031      	str	r1, [r6, #0]
 8006244:	602b      	str	r3, [r5, #0]
 8006246:	b016      	add	sp, #88	@ 0x58
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	466a      	mov	r2, sp
 800624c:	f000 f848 	bl	80062e0 <_fstat_r>
 8006250:	2800      	cmp	r0, #0
 8006252:	dbec      	blt.n	800622e <__swhatbuf_r+0x12>
 8006254:	9901      	ldr	r1, [sp, #4]
 8006256:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800625a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800625e:	4259      	negs	r1, r3
 8006260:	4159      	adcs	r1, r3
 8006262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006266:	e7eb      	b.n	8006240 <__swhatbuf_r+0x24>

08006268 <__smakebuf_r>:
 8006268:	898b      	ldrh	r3, [r1, #12]
 800626a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800626c:	079d      	lsls	r5, r3, #30
 800626e:	4606      	mov	r6, r0
 8006270:	460c      	mov	r4, r1
 8006272:	d507      	bpl.n	8006284 <__smakebuf_r+0x1c>
 8006274:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	6123      	str	r3, [r4, #16]
 800627c:	2301      	movs	r3, #1
 800627e:	6163      	str	r3, [r4, #20]
 8006280:	b003      	add	sp, #12
 8006282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006284:	ab01      	add	r3, sp, #4
 8006286:	466a      	mov	r2, sp
 8006288:	f7ff ffc8 	bl	800621c <__swhatbuf_r>
 800628c:	9f00      	ldr	r7, [sp, #0]
 800628e:	4605      	mov	r5, r0
 8006290:	4639      	mov	r1, r7
 8006292:	4630      	mov	r0, r6
 8006294:	f7ff f898 	bl	80053c8 <_malloc_r>
 8006298:	b948      	cbnz	r0, 80062ae <__smakebuf_r+0x46>
 800629a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800629e:	059a      	lsls	r2, r3, #22
 80062a0:	d4ee      	bmi.n	8006280 <__smakebuf_r+0x18>
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	f043 0302 	orr.w	r3, r3, #2
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	e7e2      	b.n	8006274 <__smakebuf_r+0xc>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	6020      	str	r0, [r4, #0]
 80062b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062b6:	81a3      	strh	r3, [r4, #12]
 80062b8:	9b01      	ldr	r3, [sp, #4]
 80062ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062be:	b15b      	cbz	r3, 80062d8 <__smakebuf_r+0x70>
 80062c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062c4:	4630      	mov	r0, r6
 80062c6:	f000 f81d 	bl	8006304 <_isatty_r>
 80062ca:	b128      	cbz	r0, 80062d8 <__smakebuf_r+0x70>
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	431d      	orrs	r5, r3
 80062dc:	81a5      	strh	r5, [r4, #12]
 80062de:	e7cf      	b.n	8006280 <__smakebuf_r+0x18>

080062e0 <_fstat_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d07      	ldr	r5, [pc, #28]	@ (8006300 <_fstat_r+0x20>)
 80062e4:	2300      	movs	r3, #0
 80062e6:	4604      	mov	r4, r0
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	f7fa fef5 	bl	80010dc <_fstat>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	d102      	bne.n	80062fc <_fstat_r+0x1c>
 80062f6:	682b      	ldr	r3, [r5, #0]
 80062f8:	b103      	cbz	r3, 80062fc <_fstat_r+0x1c>
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	bd38      	pop	{r3, r4, r5, pc}
 80062fe:	bf00      	nop
 8006300:	20013c58 	.word	0x20013c58

08006304 <_isatty_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d06      	ldr	r5, [pc, #24]	@ (8006320 <_isatty_r+0x1c>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	602b      	str	r3, [r5, #0]
 8006310:	f7fa fef4 	bl	80010fc <_isatty>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_isatty_r+0x1a>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_isatty_r+0x1a>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20013c58 	.word	0x20013c58

08006324 <_init>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	bf00      	nop
 8006328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800632a:	bc08      	pop	{r3}
 800632c:	469e      	mov	lr, r3
 800632e:	4770      	bx	lr

08006330 <_fini>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	bf00      	nop
 8006334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006336:	bc08      	pop	{r3}
 8006338:	469e      	mov	lr, r3
 800633a:	4770      	bx	lr
